var searchIndex = JSON.parse('{\
"epic":{"doc":"Main for building the binary of a Epic peer-to-peer node.","t":[0,0,5,5,5,5,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,13,4,5,11,11,11,5,11,11,5,11,5,5,11,11,11,5,11,12,5,5,5,5,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,3,8,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,8,4,13,11,11,11,10,11,11,11,11,11,10,11,12,3,4,13,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11],"n":["built_info","cmd","info_strings","log_build_info","main","real_main","tui","BUILT_TIME_UTC","CFG_ENDIAN","CFG_ENV","CFG_FAMILY","CFG_OS","CFG_POINTER_WIDTH","CFG_TARGET_ARCH","CI_PLATFORM","DEBUG","DEPENDENCIES","DEPENDENCIES_STR","FEATURES","FEATURES_STR","GIT_VERSION","HOST","NUM_JOBS","OPT_LEVEL","PKG_AUTHORS","PKG_DESCRIPTION","PKG_HOMEPAGE","PKG_NAME","PKG_VERSION","PKG_VERSION_MAJOR","PKG_VERSION_MINOR","PKG_VERSION_PATCH","PKG_VERSION_PRE","PROFILE","RUSTC","RUSTC_VERSION","RUSTDOC","RUSTDOC_VERSION","TARGET","client","config","server","API","Error","ban_peer","borrow","borrow_mut","borrow_replacement","client_command","fmt","from","get_status_from_node","into","list_connected_peers","show_status","try_from","try_into","type_id","unban_peer","vzip","0","config_command_server","server_command","start_server","start_server_tui","constants","logs","menu","mining","peers","status","table","types","ui","version","MAIN_MENU","ROOT_STACK","SUBMENU_MINING_BUTTON","TABLE_MINING_DIFF_STATUS","TABLE_MINING_STATUS","TABLE_PEER_STATUS","VIEW_BASIC_STATUS","VIEW_LOGS","VIEW_MINING","VIEW_PEER_SYNC","VIEW_VERSION","_WELCOME_LOGO","LogBufferView","TUILogsView","as_any","as_any_mut","as_boxed_any","as_boxed_view","borrow","borrow","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","buffer","call_on","color","create","draw","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","update","update","vzip","vzip","create","DiffColumn","Difficulty","Duration","Hash","Height","Id","IsConnected","LastSeen","NumAccepted","NumBlocksFound","NumRejected","NumStale","PoWType","PowDifficulty","SecondaryScaling","StratumWorkerColumn","TUIMiningView","Time","_as_str","_as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","create","eq","eq","equivalent","equivalent","from","from","from","get_hash","get_hash","hash","hash","into","into","into","self_address_mut","self_address_mut","self_address_mut","self_address_mut","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vzip","vzip","vzip","Address","Direction","PeerColumn","State","TUIPeerView","TotalDifficulty","UsedBandwidth","UserAgent","Version","_as_str","borrow","borrow","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_boxed","clone_boxed","clone_into","create","eq","equivalent","from","from","get_hash","hash","into","into","self_address_mut","self_address_mut","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","NANO_TO_MILLIS","TUIStatusView","borrow","borrow_mut","borrow_replacement","create","from","into","try_from","try_into","type_id","update","update_sync_status","vzip","Absolute","Percent","TableColumn","TableColumnWidth","TableView","TableViewItem","active_column","align","alignment","as_any","as_any_mut","as_boxed_any","as_boxed_view","borrow","borrow","borrow","borrow_item","borrow_item_mut","borrow_items","borrow_items_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","call_on","clear","cmp","column","column","column_cancel","column_indices","column_next","column_prev","column_select","column_select","columns","default_column","default_order","disable","draw","draw_columns","draw_header","draw_item","draw_row","enable","enabled","focus","focus_down","focus_up","from","from","from","insert_item","into","into","into","is_empty","is_enabled","item","items","items","last_size","layout","len","new","new","on_event","on_select","on_select","on_sort","on_sort","on_submit","on_submit","order","order","ordering","remove_item","requested_width","row","rows_to_items","scrollbase","selected","selected_item","selected_row","set_enabled","set_items","set_on_select","set_on_sort","set_on_submit","set_selected_item","set_selected_row","sort","sort_by","sort_items","take_focus","take_items","title","to_column","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","width","width","width_percent","0","0","TUIStatusListener","UIMessage","UpdateStatus","borrow","borrow_mut","borrow_replacement","create","from","into","try_from","try_into","type_id","update","vzip","0","Controller","ControllerMessage","Shutdown","UI","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","controller_tx","cursive","from","from","from","into","into","into","logs_rx","modify_theme","new","new","run","rx","step","stop","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ui","ui_rx","ui_tx","vzip","vzip","vzip","TUIVersionView","borrow","borrow_mut","borrow_replacement","create","from","into","try_from","try_into","type_id","update","vzip"],"q":["epic","","","","","","","epic::built_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::cmd","","","epic::cmd::client","","","","","","","","","","","","","","","","","","epic::cmd::client::Error","epic::cmd::config","epic::cmd::server","","","epic::tui","","","","","","","","","","epic::tui::constants","","","","","","","","","","","","epic::tui::logs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::tui::menu","epic::tui::mining","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::tui::peers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::tui::status","","","","","","","","","","","","","","epic::tui::table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::tui::table::TableColumnWidth","","epic::tui::types","","","","","","","","","","","","","","epic::tui::types::UIMessage","epic::tui::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic::tui::version","","","","","","","","","","",""],"d":["","","","","","","Epic TUI","The built-time in RFC2822, UTC","The endianness, given by <code>cfg!(target_endian)</code>.","The toolchain-environment, given by <code>cfg!(target_env)</code>.","The OS-family, given by <code>cfg!(target_family)</code>.","The operating system, given by <code>cfg!(target_os)</code>.","The pointer width, given by <code>cfg!(target_pointer_width)</code>.","The target architecture, given by <code>cfg!(target_arch)</code>.","The Continuous Integration platform detected during …","Value of DEBUG for the profile used during compilation.","An array of effective dependencies as documented by …","The effective dependencies as a comma-separated string.","The features that were enabled during compilation.","The features as a comma-separated string.","If the crate was compiled from within a git-repository, …","The host triple of the rust compiler.","The parallelism that was specified during compilation.","Value of OPT_LEVEL for the profile used during compilation.","A colon-separated list of authors.","The description.","The homepage.","The name of the package.","The full version.","The major version.","The minor version.","The patch version.","The pre-release version.","<code>release</code> for release builds, <code>debug</code> for other builds.","The compiler that cargo resolved to use.","The output of <code>rustc -V</code>","The documentation generator that cargo resolved to use.","The output of <code>rustdoc -V</code>","The target triple that was being compiled for.","","","","Error originating from HTTP API calls.","Error type wrapping underlying module errors.","","","","","","","","","","","","","","","","","","Create a config file in the current directory","Handles the server part of the command line, mostly …","wrap below to allow UI to clean up on stop","","Identifiers for various TUI elements, because they may be …","","Main Menu definition","Mining status view definition","TUI peer display","Basic status view definition","Adapted from …","Types specific to the UI module","Basic TUI to better output the overall system status and …","Version and build info","","","","","","","","","","","","","","","Downcast self to a <code>Any</code>.","Downcast self to a mutable <code>Any</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mining status view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create the mining view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","update","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create basic status view","","","","","","","","","","","A type used for the construction of columns in a <code>TableView</code>.","","View to select an item among a list, supporting multiple …","A trait for displaying and sorting items inside a <code>TableView</code>…","","Sets the horizontal text alignment of the column.","","Downcast self to a <code>Any</code>.","Downcast self to a mutable <code>Any</code>.","","","","","","Returns a immutable reference to the item at the specified …","Returns a mutable reference to the item at the specified …","Returns a immutable reference to the items contained …","Returns a mutable reference to the items contained within …","","","","","","","","Removes all items from this view.","Method comparing two items via their specified column from …","Adds a column for the specified table column from type <code>H</code> …","","","","","","","","","Sets the initially active column of the table.","","Disables this view.","","","","","","Re-enables this view.","","","","","","","","Inserts a new item into the table.","","","","Returns <code>true</code> if this table has no items.","Returns <code>true</code> if this view is enabled.","Returns the index of the currently selected item within …","Sets the contained items of the table.","","","","Returns the number of items in this table.","Creates a new empty <code>TableView</code> without any columns.","","","Sets a callback to be used when an item is selected.","","Sets a callback to be used when a selected column is …","","Sets a callback to be used when <code>&lt;Enter&gt;</code> is pressed while …","","Returns the currently active column that is used for …","","Sets the default ordering of the column.","Removes the item at the specified index within the …","","Returns the index of the currently selected table row.","","","","Selects the item at the specified index within the …","Selects the row at the specified index.","Enable or disable this view.","Sets the contained items of the table.","Sets a callback to be used when an item is selected.","Sets a callback to be used when a selected column is …","Sets a callback to be used when <code>&lt;Enter&gt;</code> is pressed while …","Selects the item at the specified index within the …","Selects the row at the specified index.","Sorts the table using the currently active column and its …","Sorts the table using the specified table <code>column</code> and the …","","","Removes all items from the underlying storage and returns …","","Method returning a string representation of the item for …","","","","","","","","","","","","","Sets how many characters of width this column will try to …","","Sets what percentage of the width of the entire table this …","","","Trait for a UI element that receives status update messages","Main message struct to communicate between the UI and the …","","","","","create the view, to return to the main UI controller","","","","","","Update according to status update contents","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new UI","Create a new controller","Run the controller","","Step the UI by calling into Cursive’s step function, then","Stop the UI","","","","","","","","","","","","","","","","","","","","Create basic status view","","","","","","update",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,4,3,4,3,4,3,3,3,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,0,0,5,5,5,5,6,6,6,6,6,6,6,5,6,5,0,0,5,6,5,7,6,5,7,6,5,7,6,5,6,5,6,5,6,5,6,5,6,5,6,6,5,5,6,5,7,6,5,6,5,7,6,5,6,5,6,5,7,6,5,6,6,5,5,6,5,7,6,5,7,6,5,7,6,5,7,7,6,5,8,8,0,8,0,8,8,8,8,8,9,8,9,8,9,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,9,8,8,8,8,9,8,9,8,9,8,9,9,8,0,0,10,10,10,10,10,10,10,10,10,10,10,10,11,11,0,0,0,0,12,13,13,12,12,12,12,12,13,11,12,12,12,12,12,13,11,12,13,11,12,12,14,12,13,12,12,12,12,12,12,12,12,13,12,12,12,13,12,13,12,12,12,12,12,12,13,11,12,12,13,11,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,12,13,11,12,13,11,12,13,11,12,13,11,13,13,13,15,16,0,0,17,17,17,17,18,17,17,17,17,17,18,17,19,0,0,20,0,21,22,20,21,22,20,21,22,20,21,21,21,22,20,21,22,20,21,0,21,22,22,22,21,21,21,22,20,21,22,20,21,22,20,22,21,21,21,22,20,0,23,23,23,23,23,23,23,23,23,23,23],"f":[null,null,[[]],[[]],[[]],[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["serverconfig",3],["socketaddr",4],["option",4,["string"]],["string",3]]],[[]],[[]],[[]],[[["argmatches",3],["globalconfig",3]],["i32",15]],[[["formatter",3]],["result",6]],[[]],[[["serverconfig",3],["option",4,["string"]],["string",3]],[["status",3],["error",4],["result",4,["status","error"]]]],[[]],[[["serverconfig",3],["option",4,["string"]],["string",3]]],[[["serverconfig",3],["option",4,["string"]],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["serverconfig",3],["socketaddr",4],["option",4,["string"]],["string",3]]],[[]],null,[[["chaintypes",4],["str",15]]],[[["option",4,["receiver"]],["argmatches",3],["globalconfig",3],["receiver",3,["logentry"]],["option",4,["argmatches"]]],["i32",15]],[[["serverconfig",3],["option",4,["receiver"]],["receiver",3,["logentry"]]]],[[["serverconfig",3],["option",4,["receiver"]],["receiver",3,["logentry"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[],[["global",3],["box",3,["view","global"]],["view",8]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["selector",4]],["option",4]],[[["level",4]],["colorstyle",3]],[[],[["box",3,["view"]],["view",8]]],[[["printer",3]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["logentry",3],["cursive",3]]],[[["logentry",3]]],[[]],[[]],[[],[["box",3,["view"]],["view",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stratumworkercolumn",4]],[[],["diffcolumn",4]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["defaultfeatures",8],["global",3],["box",3,["defaultfeatures","global"]]]],[[],[["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]],["global",3]]],[[],[["defaultfeatures",8],["global",3],["box",3,["defaultfeatures","global"]]]],[[],[["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]],["global",3]]],[[]],[[]],[[],[["box",3,["view"]],["view",8]]],[[["stratumworkercolumn",4]],["bool",15]],[[["diffcolumn",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["serverstats",3],["cursive",3]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["peercolumn",4]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["defaultfeatures",8],["global",3],["box",3,["defaultfeatures","global"]]]],[[],[["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]],["global",3]]],[[]],[[],[["box",3,["view"]],["view",8]]],[[["peercolumn",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["serverstats",3],["cursive",3]]],[[]],[[]],null,null,[[]],[[]],[[]],[[],[["box",3,["view"]],["view",8]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["serverstats",3],["cursive",3]]],[[["syncstatus",4]],["string",3]],[[]],null,null,null,null,null,null,[[],["usize",15]],[[["halign",4]]],null,[[],["any",8]],[[],["any",8]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[],[["global",3],["box",3,["view","global"]],["view",8]]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["vec",3]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["selector",4]],["option",4]],[[]],[[],["ordering",4]],[[["fnonce",8],["string",3],["into",8,["string"]]]],null,[[]],null,[[],["bool",15]],[[],["bool",15]],[[]],null,null,[[]],null,[[]],[[["printer",3]]],[[["str",15],["printer",3],["fn",8]]],[[["printer",3]]],[[["usize",15],["printer",3]]],[[["str",15],["printer",3]]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],[[["vec",3]]],null,null,[[["vec2",6]]],[[],["usize",15]],[[]],[[["string",3]]],[[["event",4]],["eventresult",4]],[[]],null,[[]],null,[[]],null,[[],["option",4]],null,[[["ordering",4]]],[[["usize",15]],["option",4]],null,[[],[["usize",15],["option",4,["usize"]]]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[["vec",3]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["ordering",4]]],[[["ordering",4]]],[[["direction",4]],["bool",15]],[[],["vec",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["usize",15]]],null,[[["usize",15]]],null,null,null,null,null,[[]],[[]],[[]],[[],[["box",3,["view"]],["view",8]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["serverstats",3],["cursive",3]]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["theme",3]]],[[["logentry",3],["receiver",3,["logentry"]],["sender",3,["controllermessage"]],["controllermessage",4]],["ui",3]],[[["receiver",3,["logentry"]],["logentry",3]],[["controller",3],["result",4,["controller","string"]],["string",3]]],[[["server",3]]],null,[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[],[["box",3,["view"]],["view",8]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["serverstats",3],["cursive",3]]],[[]]],"p":[[4,"Error"],[13,"API"],[3,"LogBufferView"],[3,"TUILogsView"],[4,"DiffColumn"],[4,"StratumWorkerColumn"],[3,"TUIMiningView"],[4,"PeerColumn"],[3,"TUIPeerView"],[3,"TUIStatusView"],[4,"TableColumnWidth"],[3,"TableView"],[3,"TableColumn"],[8,"TableViewItem"],[13,"Percent"],[13,"Absolute"],[4,"UIMessage"],[8,"TUIStatusListener"],[13,"UpdateStatus"],[4,"ControllerMessage"],[3,"UI"],[3,"Controller"],[3,"TUIVersionView"]]},\
"epic_api":{"doc":"","t":[3,13,3,3,3,3,13,3,13,3,4,3,8,8,6,13,3,3,13,13,3,13,3,3,3,4,3,8,3,3,13,3,13,13,13,6,13,13,3,13,4,4,3,3,3,13,3,3,3,3,11,11,11,11,11,11,0,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,12,12,12,12,12,11,12,12,12,11,12,12,12,12,14,14,11,11,11,11,11,11,11,11,11,11,5,12,12,5,11,11,12,12,12,12,12,12,12,5,14,14,14,14,11,11,12,11,12,11,11,12,12,12,12,12,11,12,12,12,12,10,11,11,11,11,11,12,12,5,5,14,14,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,12,12,12,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,5,5,5,5],"n":["ApiServer","Argument","BlockHeaderInfo","BlockHeaderPrintable","BlockOutputs","BlockPrintable","Coinbase","CompactBlockPrintable","Cuckoo","Error","ErrorKind","Foreign","ForeignRpc","Handler","HandlerObj","Internal","LocatedTxKernel","LoggingMiddleware","MD5","NoValue","Node","NotFound","Output","OutputListing","OutputPrintable","OutputType","Owner","OwnerRpc","PoolInfo","PrintableCommitment","ProgPow","QueryParams","RandomX","RequestError","ResponseError","ResponseFuture","RouteAlreadyExists","RouteNotFound","Router","Router","RouterError","Solution","Status","TLSConfig","Tip","Transaction","TxHashSet","TxHashSetNode","TxKernelPrintable","Version","add_middleware","add_middleware","add_route","as_fail","as_fail","as_fail","auth","backtrace","backtrace","backtrace","ban_peer","ban_peer","ban_peer","block_header_version","block_height","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","build_server_config","call","call","call","call","cause","cause","cause","certificate","chain","chain","client","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commit","commit","commit","compact_chain","compact_chain","compact_chain","connect","connect","connections","delete","delete","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","edge_bits","eq","eq","equivalent","equivalent","excess","excess_sig","features","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_block","from_compact_block","from_head","from_header","from_header","from_output","from_tip","from_tip_and_peers","from_txkernel","get","get","get","get","get_block","get_block","get_block","get_connected_peers","get_connected_peers","get_connected_peers","get_header","get_header","get_header","get_kernel","get_kernel","get_kernel","get_last_n_kernel","get_last_n_output","get_last_n_rangeproof","get_outputs","get_outputs","get_outputs","get_peers","get_peers","get_peers","get_pmmr_indices","get_pmmr_indices","get_pmmr_indices","get_pool_size","get_pool_size","get_pool_size","get_status","get_status","get_status","get_stempool_size","get_stempool_size","get_stempool_size","get_tip","get_tip","get_tip","get_unconfirmed_transactions","get_unconfirmed_transactions","get_unconfirmed_transactions","get_unspent_outputs","get_unspent_outputs","get_unspent_outputs","get_version","get_version","get_version","handle","handle","hash","hash","hash","head","head","header","header","header","height","height","height","height","height","highest_index","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","json_response","json_response_pretty","just_response","kern_full","kern_ids","kernel_root","kernel_root_hash","kernels","kind","last_block_pushed","last_retrieved_index","lock_height","make_service","merkle_proof","mmr_index","mmr_index","mmr_index","must_get_query","must_get_query","name","name","ne","new","new","new","new","new","new","new_service","node_apis","node_version","nonce","not_found","options","options","out_full","output_root","output_root_hash","output_type","outputs","outputs","outputs","parse_body","parse_param","parse_param","parse_param_no_err","parse_param_no_err","patch","patch","peers","poll_ready","pool_size","post","post","prev_block_to_last","prev_root","previous","previous","private_key","process_multival_param","proof","proof","proof_hash","protocol_version","push_transaction","push_transaction","push_transaction","put","put","range_proof","range_proof_root","range_proof_root_hash","response","result_to_response","right_path_element","right_path_element","secondary_scaling","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","solution","spent","start","stop","sync_info","sync_state","sync_state","sync_status","timestamp","tip","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_vec","total_difficulty","total_difficulty","total_kernel_offset","trace","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_kernel","tx_pool","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unban_peer","unban_peer","unban_peer","user_agent","validate_chain","validate_chain","validate_chain","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w_fut","w_fut","0","0","0","0","0","0","0","0","0","BasicAuthMiddleware","BasicAuthURIMiddleware","EPIC_BASIC_REALM","EPIC_FOREIGN_BASIC_REALM","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","call","call","deref","deref","from","from","from","from","initialize","initialize","into","into","into","into","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ClientResponseFuture","create_post_request","get","get_async","get_no_ret","post","post_async","post_no_ret","post_no_ret_async","send_request"],"q":["epic_apiepic_api::ErrorKind","","","","","epic_api::Solution","","","","epic_api::auth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_api::client","","","","","","","","",""],"d":["HTTP server allowing the registration of ApiEndpoint …","","","","","","","","","Errors that can be returned by an ApiEndpoint …","","Main interface into all node API functions. Node APIs are …","Public definition used to generate Node jsonrpc api.","","","","","","","","","","","","","","Main interface into all node API functions. Node APIs are …","Public definition used to generate Node jsonrpc api.","","","","","","","","","","","","","","","","TLS config","The state of the current fork tip","","TxHashSet","Wrapper around a list of txhashset nodes, so it can be …","","API Version Information","","","","","","","","","","","Networked version of Owner::ban_peer.","Bans a specific peer.","","Block header version","Block height at which the output is found","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","High level JSON/HTTP clienthe output commitment representing the amount","","The homomorphic commitment representing the output’s …","Networked version of Owner::compact_chain.","Trigger a compaction of the chain state to regain storage …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Size of the cuckoo graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a compact block into a printable representation …","A TxHashSet in the context of the api is simply the …","","","","","","","","","","","Networked version of Foreign::get_block.","Gets block details given either a height, a hash or an …","","Networked version of Owner::get_connected_peers.","Retrieves a list of all connected peers.","","Networked version of Foreign::get_header.","Gets block header given either a height, a hash or an …","","Networked version of Foreign::get_kernel.","Returns a <code>LocatedTxKernel</code> based on the kernel excess. The …","","","","","Networked version of Foreign::get_outputs.","Retrieves details about specifics outputs. Supports …","","Networked version of Owner::get_peers.","Retrieves information about stored peers. If <code>None</code> is …","","Networked version of Foreign::get_pmmr_indices.","","Retrieves the PMMR indices based on the provided block …","Networked version of Foreign::get_pool_size.","","Returns the number of transaction in the transaction pool.","Networked version of Owner::get_status.","Returns various information about the node, the network …","","Networked version of Foreign::get_stempool_size.","","Returns the number of transaction in the stem transaction …","Networked version of Foreign::get_tip.","Returns details about the state of the current fork tip.","","Networked version of Foreign::get_unconfirmed_transactions.","Returns the unconfirmed transactions in the transaction …","","Networked version of Foreign::get_unspent_outputs.","UTXO traversal. Retrieves last utxos since a <code>start_index</code> …","","Networked version of Foreign::get_version.","Returns the node version and block header version (used by …","","","","","","","","","The block header","The block header","The block header","Height of the tip (max height of the fork)","Height of the block which contains the output","Height of this block since the genesis block (height 0)","Height of this block since the genesis block (height 0)","","The last available output index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility to serialize a struct into JSON and produce a …","Pretty-printed version of json response as future","Text response as HTTP response","Full kernels, specifically coinbase kernel(s)","Kernels (hex short_ids)","Merklish root of all transaction kernels in the TxHashSet","","A printable version of the transaction kernels","","","The last insertion index retrieved","","","Merkle Proof","MMR Index of output","MMR Position","","","","","","","Create a new API instance with the chain, transaction …","Create a new API instance with the chain, transaction …","Creates a new ApiServer that will serve ApiEndpoint …","","","","","Listener version, providing same API but listening for …","Current node API Version (api crate version)","Nonce increment used to mine this block.","","","","Full outputs, specifically coinbase output(s)","Merklish root of all the commitments in the TxHashSet","Output Root Hash","The type of output Coinbase|Transaction","A printable version of the outputs","A printable version of the outputs","A printable version of the outputs","Parse request body","","","","","","","","","Size of the pool","","","","Root hash of the header MMR at the previous header.","Hash of the block previous to this in the chain.","Hash of the block previous to this in the chain.","","","Rangeproof (as hex string)","Proof choosed","Rangeproof hash (as hex string)","","Networked version of Foreign::push_transaction.","","Push new transaction to our local transaction pool.","","","","Merklish root of all range proofs in the TxHashSet","","Text response as future","Convert Result to ResponseFuture","","","Variable difficulty scaling factor for secondary proof of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nonces of the cuckoo solution","Whether the output has been spent","Starts ApiServer at the provided address. TODO support …","Stops the API server, it panics in case of error","","","","","rfc3339 timestamp at which the block was built.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Total accumulated difficulty since genesis block","Total kernel offset since genesis block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Networked version of Owner::unban_peer.","Unbans a specific peer.","","","Networked version of Owner::validate_chain.","Trigger a validation of the chain state.","","Version of the block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper function to easily issue a HTTP GET request against …","Helper function to easily issue an async HTTP GET request …","Helper function to easily issue a HTTP GET request on a …","Helper function to easily issue a HTTP POST request with …","Helper function to easily issue an async HTTP POST request …","Helper function to easily issue a HTTP POST request with …","Helper function to easily issue an async HTTP POST request …",""],"i":[0,1,0,0,0,0,2,0,3,0,0,0,0,0,0,1,0,0,3,4,0,1,0,0,0,0,0,0,0,0,3,0,3,1,1,0,4,4,0,1,0,0,0,0,0,2,0,0,0,0,5,6,5,7,1,4,0,7,1,4,8,9,9,10,11,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,16,15,32,32,5,7,1,4,16,13,9,0,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,1,1,16,16,4,4,5,5,6,6,10,10,17,17,18,18,19,19,20,20,2,2,21,21,22,22,11,11,23,23,24,24,3,3,25,25,26,26,27,27,28,28,29,29,30,30,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,22,11,21,22,11,8,9,9,32,32,18,32,32,1,4,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,25,1,4,1,4,23,23,23,23,7,7,1,1,4,4,10,17,18,19,20,2,21,22,11,23,24,3,3,25,26,27,28,29,30,12,12,12,12,13,9,14,15,7,7,7,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,26,27,19,24,25,11,17,18,23,12,32,32,5,33,13,13,8,9,9,33,13,13,33,13,13,20,20,20,33,13,13,8,9,9,33,13,13,33,13,13,8,9,9,33,13,13,33,13,13,33,13,13,33,13,13,33,13,13,33,8,20,24,25,32,32,26,27,28,17,21,24,25,30,29,26,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,0,0,0,27,27,25,19,26,7,17,29,23,5,11,21,11,30,0,0,1,4,1,13,9,14,16,5,21,5,0,10,25,0,32,32,27,25,19,11,26,28,29,0,0,0,0,0,32,32,9,5,31,32,32,17,25,24,25,16,12,11,25,11,18,33,13,13,32,32,11,25,19,0,0,0,0,25,1,1,16,16,4,4,5,5,6,6,10,10,17,17,18,18,19,19,20,20,2,2,21,21,22,22,11,11,23,23,24,24,3,3,25,25,26,26,27,27,28,28,29,29,30,30,1,4,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,25,11,14,14,18,13,9,18,25,18,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,7,1,4,3,22,17,25,25,32,32,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,30,13,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,8,9,9,18,8,9,9,25,12,13,9,14,15,7,1,16,4,5,6,10,17,18,19,20,2,21,22,11,23,24,3,25,26,27,28,29,30,31,0,0,34,35,36,37,38,39,40,41,42,0,0,0,0,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,45,46,43,44,45,46,43,44,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["handlerobj",6]]],[[["handlerobj",6]],["node",3]],[[["handlerobj",6],["str",15]],[["routererror",4],["result",4,["node","routererror"]],["node",3]]],[[],["fail",8]],[[],["fail",8]],[[],["fail",8]],null,[[],[["option",4,["backtrace"]],["backtrace",3]]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[["socketaddr",4]],[["errorkind",4],["result",4,["errorkind"]]]],[[["socketaddr",4]],[["error",3],["result",4,["error"]]]],[[["socketaddr",4]],[["errorkind",4],["result",4,["errorkind"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["arc","error"]],["arc",3,["serverconfig"]]]],[[["body",3],["request",3,["body"]],["iterator",8],["box",3,["iterator"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]],["iterator",8],["box",3,["iterator"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]],["iterator",8],["box",3,["iterator"]]],["responsefuture",6]],[[["request",3]]],[[],[["fail",8],["option",4,["fail"]]]],[[],[["fail",8],["option",4,["fail"]]]],[[],[["fail",8],["option",4,["fail"]]]],null,null,null,null,[[],["errorkind",4]],[[],["tlsconfig",3]],[[],["routererror",4]],[[],["router",3]],[[],["node",3]],[[],["version",3]],[[],["tip",3]],[[],["status",3]],[[],["txhashset",3]],[[],["txhashsetnode",3]],[[],["outputtype",4]],[[],["output",3]],[[],["printablecommitment",3]],[[],["outputprintable",3]],[[],["txkernelprintable",3]],[[],["blockheaderinfo",3]],[[],["solution",4]],[[],["blockheaderprintable",3]],[[],["blockprintable",3]],[[],["compactblockprintable",3]],[[],["blockoutputs",3]],[[],["outputlisting",3]],[[],["locatedtxkernel",3]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["global",3],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["nonsyncfeatures",8],["global",3],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["defaultfeatures",8],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commitment",3]],[[],[["commitment",3],["result",4,["commitment","error"]],["error",4]]],null,null,null,[[],[["errorkind",4],["result",4,["errorkind"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["errorkind",4],["result",4,["errorkind"]]]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],null,[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["errorkind",4]],["bool",15]],[[["routererror",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["body",3],["request",3,["body"]]]],[[]],[[["str",15]]],[[["option",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[["errorkind",4]],["error",3]],[[]],[[["routererror",4]],["error",3]],[[["context",3,["errorkind"]],["errorkind",4]],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chain",3],["arc",3,["chain"]],["block",3],["bool",15]],[["error",3],["result",4,["blockprintable","error"]],["blockprintable",3]]],[[["compactblock",3],["chain",3],["arc",3,["chain"]]],[["result",4,["compactblockprintable","error"]],["compactblockprintable",3],["error",3]]],[[["chain",3],["arc",3,["chain"]]],[["error",3],["result",4,["txhashset","error"]],["txhashset",3]]],[[["blockheader",3]],["blockheaderinfo",3]],[[["blockheader",3]],["blockheaderprintable",3]],[[["chain",3],["blockheader",3],["arc",3,["chain"]],["bool",15],["option",4,["blockheader"]],["output",3]],[["outputprintable",3],["result",4,["outputprintable","error"]],["error",3]]],[[["tip",3]],["tip",3]],[[["tip",3],["u32",15],["string",3],["option",4,["value"]],["value",4]],["status",3]],[[["txkernel",3]],["txkernelprintable",3]],[[["str",15]],[["option",4,["string"]],["string",3]]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["str",15]],[["routererror",4],["result",4,["routererror"]]]],[[["u64",15],["string",3],["option",4,["u64"]],["option",4,["string"]]],[["result",4,["blockprintable","errorkind"]],["errorkind",4],["blockprintable",3]]],[[["u64",15],["option",4,["hash"]],["string",3],["option",4,["u64"]],["option",4,["string"]],["hash",3]],[["result",4,["blockprintable","error"]],["error",3],["blockprintable",3]]],[[["u64",15],["string",3],["option",4,["u64"]],["option",4,["string"]]],[["result",4,["blockprintable","errorkind"]],["errorkind",4],["blockprintable",3]]],[[],[["errorkind",4],["result",4,["vec","errorkind"]],["vec",3,["peerinfodisplay"]]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["peerinfodisplay"]]]],[[],[["errorkind",4],["result",4,["vec","errorkind"]],["vec",3,["peerinfodisplay"]]]],[[["u64",15],["string",3],["option",4,["u64"]],["option",4,["string"]]],[["blockheaderprintable",3],["errorkind",4],["result",4,["blockheaderprintable","errorkind"]]]],[[["u64",15],["option",4,["hash"]],["string",3],["option",4,["u64"]],["option",4,["string"]],["hash",3]],[["result",4,["blockheaderprintable","error"]],["error",3],["blockheaderprintable",3]]],[[["u64",15],["string",3],["option",4,["u64"]],["option",4,["string"]]],[["blockheaderprintable",3],["errorkind",4],["result",4,["blockheaderprintable","errorkind"]]]],[[["u64",15],["string",3],["option",4,["u64"]]],[["errorkind",4],["result",4,["locatedtxkernel","errorkind"]],["locatedtxkernel",3]]],[[["u64",15],["string",3],["option",4,["u64"]]],[["error",3],["locatedtxkernel",3],["result",4,["locatedtxkernel","error"]]]],[[["u64",15],["string",3],["option",4,["u64"]]],[["errorkind",4],["result",4,["locatedtxkernel","errorkind"]],["locatedtxkernel",3]]],[[["u64",15],["chain",3],["arc",3,["chain"]]],[["vec",3,["txhashsetnode"]],["txhashsetnode",3]]],[[["u64",15],["chain",3],["arc",3,["chain"]]],[["vec",3,["txhashsetnode"]],["txhashsetnode",3]]],[[["u64",15],["chain",3],["arc",3,["chain"]]],[["vec",3,["txhashsetnode"]],["txhashsetnode",3]]],[[["u64",15],["vec",3,["string"]],["option",4,["u64"]],["option",4,["vec"]],["option",4,["bool"]],["bool",15]],[["errorkind",4],["vec",3,["outputprintable"]],["result",4,["vec","errorkind"]]]],[[["u64",15],["vec",3,["string"]],["option",4,["u64"]],["option",4,["vec"]],["option",4,["bool"]],["bool",15]],[["result",4,["vec","error"]],["vec",3,["outputprintable"]],["error",3]]],[[["u64",15],["vec",3,["string"]],["option",4,["u64"]],["option",4,["vec"]],["option",4,["bool"]],["bool",15]],[["errorkind",4],["vec",3,["outputprintable"]],["result",4,["vec","errorkind"]]]],[[["option",4,["socketaddr"]],["socketaddr",4]],[["errorkind",4],["result",4,["vec","errorkind"]],["vec",3,["peerdata"]]]],[[["option",4,["socketaddr"]],["socketaddr",4]],[["error",3],["result",4,["vec","error"]],["vec",3,["peerdata"]]]],[[["option",4,["socketaddr"]],["socketaddr",4]],[["errorkind",4],["result",4,["vec","errorkind"]],["vec",3,["peerdata"]]]],[[["u64",15],["option",4,["u64"]]],[["errorkind",4],["result",4,["outputlisting","errorkind"]],["outputlisting",3]]],[[["u64",15],["option",4,["u64"]]],[["errorkind",4],["result",4,["outputlisting","errorkind"]],["outputlisting",3]]],[[["u64",15],["option",4,["u64"]]],[["outputlisting",3],["error",3],["result",4,["outputlisting","error"]]]],[[],[["usize",15],["errorkind",4],["result",4,["usize","errorkind"]]]],[[],[["usize",15],["errorkind",4],["result",4,["usize","errorkind"]]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["status",3],["errorkind",4],["result",4,["status","errorkind"]]]],[[],[["status",3],["error",3],["result",4,["status","error"]]]],[[],[["status",3],["errorkind",4],["result",4,["status","errorkind"]]]],[[],[["usize",15],["errorkind",4],["result",4,["usize","errorkind"]]]],[[],[["usize",15],["errorkind",4],["result",4,["usize","errorkind"]]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["errorkind",4],["result",4,["tip","errorkind"]],["tip",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[],[["errorkind",4],["result",4,["tip","errorkind"]],["tip",3]]],[[],[["errorkind",4],["vec",3,["poolentry"]],["result",4,["vec","errorkind"]]]],[[],[["result",4,["vec","error"]],["vec",3,["poolentry"]],["error",3]]],[[],[["errorkind",4],["vec",3,["poolentry"]],["result",4,["vec","errorkind"]]]],[[["u64",15],["bool",15],["option",4,["u64"]],["option",4,["bool"]]],[["errorkind",4],["result",4,["outputlisting","errorkind"]],["outputlisting",3]]],[[["u64",15],["bool",15],["option",4,["u64"]],["option",4,["bool"]]],[["outputlisting",3],["error",3],["result",4,["outputlisting","error"]]]],[[["u64",15],["bool",15],["option",4,["u64"]],["option",4,["bool"]]],[["errorkind",4],["result",4,["outputlisting","errorkind"]],["outputlisting",3]]],[[],[["result",4,["version","errorkind"]],["errorkind",4],["version",3]]],[[],[["error",3],["result",4,["version","error"]],["version",3]]],[[],[["result",4,["version","errorkind"]],["errorkind",4],["version",3]]],[[["str",15],["params",4]],[["result",4,["value","error"]],["value",4],["error",3]]],[[["str",15],["params",4]],[["result",4,["value","error"]],["value",4],["error",3]]],null,null,null,[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["responsefuture",6]],[[],["responsefuture",6]],[[["body",3],["statuscode",3],["debug",8],["into",8,["body"]]],[["body",3],["response",3,["body"]]]],null,null,null,null,null,[[],["errorkind",4]],null,null,null,[[]],null,null,null,null,null,null,[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[["errorkind",4]],["bool",15]],[[["syncstate",3],["weak",3,["chain"]],["chain",3],["rwlock",6,["transactionpool"]],["weak",3,["rwlock"]],["weak",3,["syncstate"]]]],[[["peers",3],["syncstate",3],["weak",3,["chain"]],["chain",3],["weak",3,["syncstate"]],["weak",3,["peers"]]]],[[],["apiserver",3]],[[["string",3]],["tlsconfig",3]],[[],["router",3]],[[["u64",15],["commitment",3]],["output",3]],[[]],[[["tlsconfig",3],["peers",3],["option",4,["tlsconfig"]],["arc",3,["rwlock"]],["str",15],["arc",3,["syncstate"]],["chain",3],["syncstate",3],["arc",3,["chain"]],["rwlock",6,["transactionpool"]],["option",4,["string"]],["arc",3,["peers"]],["string",3]],[["error",3],["result",4,["error"]]]],null,null,[[],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],null,null,null,null,null,null,null,[[["body",3],["request",3,["body"]]],[["box",3,["future"]],["future",8]]],null,null,null,null,[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],null,[[],[["async",4],["result",4,["async"]]]],null,[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],null,null,null,null,null,[[["str",15]]],null,null,null,null,[[["option",4,["bool"]],["transaction",3],["bool",15]],[["errorkind",4],["result",4,["errorkind"]]]],[[["option",4,["bool"]],["transaction",3],["bool",15]],[["errorkind",4],["result",4,["errorkind"]]]],[[["option",4,["bool"]],["transaction",3],["bool",15]],[["error",3],["result",4,["error"]]]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[],[["rangeproof",3],["result",4,["rangeproof","error"]],["error",4]]],null,null,[[["body",3],["statuscode",3],["debug",8],["into",8,["body"]]],["responsefuture",6]],[[["result",4,["error"]],["error",3]],["responsefuture",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["socketaddr",4],["router",3],["tlsconfig",3],["option",4,["tlsconfig"]]],[["error",3],["result",4,["joinhandle","error"]],["joinhandle",3]]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["vec",3,["u8"]],["u8",15]]],null,null,null,[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]]],["responsefuture",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["socketaddr",4]],[["errorkind",4],["result",4,["errorkind"]]]],[[["socketaddr",4]],[["error",3],["result",4,["error"]]]],[[["socketaddr",4]],[["errorkind",4],["result",4,["errorkind"]]]],null,[[],[["errorkind",4],["result",4,["errorkind"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["errorkind",4],["result",4,["errorkind"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["body",3],["request",3,["body"]],["iterator",8],["box",3,["iterator"]]],["responsefuture",6]],[[["body",3],["request",3,["body"]],["iterator",8],["box",3,["iterator"]]],["responsefuture",6]],[[],["headervalue",3]],[[],["headervalue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,["string"]],["string",3],["headervalue",3]],["basicauthmiddleware",3]],[[["string",3],["headervalue",3]],["basicauthurimiddleware",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[["str",15],["option",4,["string"]],["string",3]],[["result",4,["request","error"]],["error",3],["request",3,["body"]]]],[[["str",15],["option",4,["string"]],["string",3]],[["result",4,["error"]],["error",3]]],[[["str",15],["option",4,["string"]],["string",3]],["clientresponsefuture",6]],[[["str",15],["option",4,["string"]],["string",3]],[["error",3],["result",4,["error"]]]],[[["str",15],["option",4,["string"]],["string",3]],[["result",4,["error"]],["error",3]]],[[["str",15],["option",4,["string"]],["string",3]],["clientresponsefuture",6]],[[["str",15],["option",4,["string"]],["string",3]],[["error",3],["result",4,["error"]]]],[[["str",15],["option",4,["string"]],["string",3]],["clientresponsefuture",6]],[[["body",3],["request",3,["body"]]],[["result",4,["string","error"]],["string",3],["error",3]]]],"p":[[4,"ErrorKind"],[4,"OutputType"],[4,"Solution"],[4,"RouterError"],[3,"Router"],[3,"Node"],[3,"Error"],[8,"OwnerRpc"],[3,"Owner"],[3,"Version"],[3,"OutputPrintable"],[3,"QueryParams"],[3,"Foreign"],[3,"ApiServer"],[3,"LoggingMiddleware"],[3,"TLSConfig"],[3,"Tip"],[3,"Status"],[3,"TxHashSet"],[3,"TxHashSetNode"],[3,"Output"],[3,"PrintableCommitment"],[3,"TxKernelPrintable"],[3,"BlockHeaderInfo"],[3,"BlockHeaderPrintable"],[3,"BlockPrintable"],[3,"CompactBlockPrintable"],[3,"BlockOutputs"],[3,"OutputListing"],[3,"LocatedTxKernel"],[3,"PoolInfo"],[8,"Handler"],[8,"ForeignRpc"],[13,"Internal"],[13,"Argument"],[13,"RequestError"],[13,"ResponseError"],[13,"Router"],[13,"Cuckoo"],[13,"MD5"],[13,"RandomX"],[13,"ProgPow"],[3,"BasicAuthMiddleware"],[3,"BasicAuthURIMiddleware"],[3,"EPIC_BASIC_REALM"],[3,"EPIC_FOREIGN_BASIC_REALM"]]},\
"epic_bugreport":{"doc":"","t":[5,5,5,5,5,5],"n":["get_cpuinfo","get_lspci","get_number","get_number_in_range","get_single_number","main"],"q":["epic_bugreport","","","","",""],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[[[],[["result",6,["string"]],["string",3]]],[[],[["result",6,["string"]],["string",3]]],[[["stdin",3]],["u32",15]],[[["stdin",3],["u32",15],["stdout",3]],["u32",15]],[[["stdin",3]],[["result",6,["u32"]],["u32",15]]],[[],["result",6]]],"p":[]},\
"epic_chain":{"doc":"The block chain itself, validates and accepts new blocks, …","tn":["AlreadySpent","Bitmap","Chain","Committed","DifficultyTooHigh","DifficultyTooLow","DuplicateCommitment","Error","ErrorKind","FileReadErr","GenesisBlockRequired","ImmatureCoinbase","InvalidBlockHeight","InvalidBlockProof","InvalidBlockTime","InvalidBlockVersion","InvalidMMRSize","InvalidPow","InvalidRoot","InvalidScaling","InvalidSeed","InvalidSortAlgo","InvalidTxHashSet","Keychain","LowEdgebits","MAX_ORPHAN_SIZE","MerkleProof","OldBlock","Orphan","Other","OutputNotFound","OutputSpent","PolicyIsNotAllowed","RangeproofNotFound","Secp","SerErr","Stopped","StoreErr","SyncError","ThereIsNotPolicy","Transaction","TxHashSetErr","TxKernelNotFound","TxLockHeight","Unfit","WrongTotalDifficulty","as_fail","as_fail","backtrace","backtrace","backtrace","block_exists","block_height_range_to_pmmr_indices","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","bottles_iter","cause","cause","cause","check_txhashset_needed","clean_txhashset_sandbox","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_boxed","clone_boxed","clone_into","compact","difficulty_iter","difficulty_iter_all","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_block","get_block_header","get_block_sums","get_header_by_height","get_header_for_kernel_index","get_header_for_output","get_kernel_height","get_last_n_kernel","get_last_n_output","get_last_n_rangeproof","get_merkle_proof","get_merkle_proof_for_pos","get_output_pos","get_previous_header","get_sync_head","get_tmp_dir","get_tmpfile_pathname","get_unspent_output_at","head","head_header","header_head","header_pmmr","init","into","into","into","is_bad_data","is_on_current_chain","is_orphan","is_unspent","kernel_data_read","kernel_data_write","kind","name","name","ne","orphans_evicted_len","orphans_len","pipe","process_block","process_block_header","rebuild_sync_mmr","reset_sync_head","self_address_mut","self_address_mut","set_txhashset_roots","store","store","sync_block_headers","tail","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","txhashset","txhashset","txhashset_archive_header","txhashset_read","txhashset_write","type_id","type_id","type_id","types","unspent_outputs_by_pmmr_index","validate","validate_tx","verify_coinbase_maturity","verify_tx_lock_height","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","BlockContext","batch","borrow","borrow_mut","borrow_replacement","from","header_pmmr","into","opts","pow_verifier","process_block","process_block_header","rewind_and_apply_fork","rewind_and_apply_header_fork","sync_block_headers","try_from","try_into","txhashset","type_id","vzip","Batch","BottleIter","ChainStore","DifficultyIter","DifficultyIterAll","batch","block_exists","block_exists","blocks_iter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","child","commit","delete","delete_block","delete_output_pos_height","from","from","from","from","from","from","from","from","from_batch","from_batch","from_batch","get_block","get_block","get_block_header","get_block_header","get_block_input_bitmap","get_block_sums","get_block_sums","get_output_pos","get_output_pos","get_output_pos_height","get_output_pos_height","get_previous_header","get_previous_header","get_spent_index","get_sync_head","get_sync_head","head","head","head_header","head_header","header_head","header_head","into","into","into","into","into","into_iter","into_iter","into_iter","is_match_output_pos_key","migrate_block","new","next","next","next","output_pos_iter","reset_header_head","reset_sync_head","save_block","save_block_header","save_block_sums","save_body_head","save_body_tail","save_header_head","save_output_pos_height","save_spent_index","save_sync_head","tail","tail","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_version","BitmapAccumulator","BitmapChunk","Extension","ExtensionPair","HeaderExtension","PMMRHandle","RewindableKernelView","TxHashSet","UTXOView","any","append_chunk","apply","apply_block","apply_header","as_elmt","backend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","chunk_start_idx","clean_txhashset_folder","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","compact","dump","dump_output_pmmr","elmt_size","extending","extending_readonly","extension","find_kernel","fmt","force_rollback","force_rollback","from","from","from","from","from","from","from","from","from","get_block_header","get_header_by_height","get_header_by_height","get_header_hash_by_height","get_output_pos","get_unspent_output_at","hash","hash_with_index","head","head","header_extending","header_extension","highest_output_insertion_index","init","init_output_pos_index","inputs_committed","into","into","into","into","into","into","into","into","into","is_on_current_chain","is_unspent","kernel_data_read","kernels_committed","last_n_kernel","last_n_output","last_n_rangeproof","last_pos","merkle_proof","merkle_proof","new","new","new","new","new","open","outputs_by_pmmr_index","outputs_committed","rangeproofs_by_pmmr_index","read","release_backend_files","rewind","rewind","rewind","rewindable_kernel_view","root","root","roots","roots","self_address_mut","self_address_mut","self_address_mut","self_address_mut","set","short_id","size","sizes","snapshot","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txhashset_replace","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utxo_view","utxo_view","validate","validate_block","validate_kernel_sums","validate_root","validate_root","validate_roots","validate_sizes","validate_tx","verify_coinbase_maturity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","zip_read","zip_write","AwaitingPeers","BlockStatus","BodySync","ChainAdapter","CommitPos","Fork","HeaderSync","Initial","MINE","NONE","Next","NoStatus","NoSync","NoopAdapter","Options","OutputRoots","Reorg","SKIP_POW","SYNC","Shutdown","SyncState","SyncStatus","Tip","TxHashSetRoots","TxHashsetDone","TxHashsetDownload","TxHashsetKernelsValidation","TxHashsetRangeProofsValidation","TxHashsetSave","TxHashsetSetup","TxHashsetWriteStatus","all","bitand","bitand_assign","bitmap_root","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_accepted","block_accepted","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","clear_sync_error","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","deserialize","deserialize","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_header","from_iter","hash","hash","height","height","insert","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","is_syncing","kernel_root","last_block_h","ne","ne","ne","ne","new","not","on_done","on_done","on_done","on_save","on_save","on_save","on_setup","on_setup","on_setup","on_validation_kernels","on_validation_kernels","on_validation_kernels","on_validation_rproofs","on_validation_rproofs","on_validation_rproofs","output_root","output_roots","partial_cmp","pmmr_root","pos","prev_block_h","read","read","remove","root","rproof_root","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","serialize","serialize","set","set_sync_error","short_id","status","sub","sub_assign","sync_error","to_owned","to_owned","to_owned","to_owned","toggle","total_difficulty","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_txhashset_download","validate","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","0","0","current_height","current_height","downloaded_size","highest_height","highest_height","kernels","kernels_total","prev_downloaded_size","prev_update_time","rproofs","rproofs_total","start_time","total_size","update_time"],"q":["epic_chainepic_chain::ErrorKind","","","","","","","","","","","","","","","","","epic_chain::pipe","","","","","","","","","","","","","","","","","","","","epic_chain::store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_chain::txhashsetepic_chain::typesepic_chain::types::BlockStatus","epic_chain::types::SyncStatus","","","","","","","","","","","","","",""],"d":["One of the inputs in the block has already been spent","Internal Roaring Bitmap error","Facade to the blockchain block processing pipeline and …","Error from summing and verifying kernel sums via committed …","","Difficulty is too low either compared to ours or the block …","An output with that commitment already exists (should be …","Error definition","Chain error definitions","Internal issue when trying to save or load data from …","No chain exists and genesis block is required","Attempt to spend a coinbase output before it sufficiently …","Block height is invalid (not previous + 1)","The block doesn’t sum correctly or a tx signature is …","Block time is too old","Invalid block version, either a mistake or outdated …","One of the MMR sizes in the block header is invalid","The proof of work is invalid","One of the root hashes in the block is invalid","Scaling factor between primary and secondary PoW is invalid","","comment here","We’ve been provided a bad txhashset","Error from underlying keychain impl","Block header edge_bits is lower than our min","Orphan pool size is limited by MAX_ORPHAN_SIZE","Error validating a Merkle proof (coinbase output)","Peer abusively sending us an old block we already have","Special case of orphan blocks","Anything else","Output not found","output spent","","Rangeproof not found","Error from underlying secp lib","Error serializing or deserializing a type","We cannot process data once the Epic server has been …","Internal issue when trying to save or load data from store","Error during chain sync","comment here","Error from underlying tx handling","Error with the txhashset","Tx kernel not found","Tx not valid based on lock_height.","The block doesn’t fit anywhere in our chain","Addition of difficulties on all previous block is wrong","","","","get backtrace","","Check whether we have a block without reading it","Return unspent outputs as above, but bounded between a …","","","","","","","","","","Builds an iterator on blocks starting from the current …","","get cause","","Check chain status whether a txhashset downloading is …","Clean the temporary sandbox folder","","","","","","","","","Triggers chain compaction.","Builds an iterator on blocks starting from the current …","Builds an iterator on blocks starting from the current …","","","","","","","","","","","","","","","","","","Gets a block by hash","Gets a block header by hash","Get block_sums by header hash.","Gets the block header at the provided height. Note: Takes …","Gets the block header in which a given kernel mmr index …","Gets the block header in which a given output appears in …","Gets the kernel with a given excess and the block height …","as above, for kernels","returns the last n nodes inserted into the output sum tree","as above, for rangeproofs","Return a Merkle proof for the given commitment from the …","Return a merkle proof valid for the current output pmmr …","Return Commit’s MMR position","Get previous block header.","Get the tip of the current “sync” header chain. This …","Specific tmp dir. Normally it’s ~/.epic/main/tmp for …","Get a tmp file path in above specific tmp dir (create tmp …","Retrieves an unspent output using its PMMR position","Tip (head) of the block chain.","Block header for the chain head","","Return our shared header MMR handle.","Initializes the blockchain and returns a new Chain …","","","","Whether the error is due to a block that was intrinsically …","Verifies the given block header is actually on the current …","Check if hash is for a known orphan.","For the given commitment find the unspent output and …","Provides a reading view into the current kernel state.","Writes kernels provided to us (via a kernel data download).","get kind","","","","Get the OrphanBlockPool accumulated evicted number of …","Orphans pool size","Implementation of the chain block acceptance (or refusal) …","Processes a single block, then checks for orphans, …","Process a block header received during “header first” …","Rebuild the sync MMR based on current header_head. We …","Reset sync_head to current header_head. We do this when we …","","","Sets the txhashset roots on a brand new block by applying …","Implements storage primitives required by the chain","Shared store instance.","Attempt to add new headers to the header chain (or fork). …","Tail of the block chain in this node after compact …","","","","","","","","","","Utility structs to handle the 3 hashtrees (output, range …","Return our shared txhashset instance.","To support the ability to download the txhashset from …","Provides a reading view into the current txhashset state …","Writes a reading view on a txhashset state that’s been …","","","","Base types that the block chain pipeline requires.","outputs by insertion index","Validate the current chain state.","Validate the tx against the current UTXO set.","Verify we are not attempting to spend a coinbase output …","Verify that the tx has a lock_height that is less than or …","","","","","","","","","","","","","","","","","","","","","Contextual information required to process a new block and …","The active batch to use for block processing.","","","","","The active header MMR handle.","","The options","The pow verifier to use when processing a block.","Runs the block processing pipeline, including validation …","Process a block header. Update the header MMR and …","Utility function to handle forks. From the forked block, …","Rewind the header chain and reapply headers on a fork.","Sync a chunk of block headers. This is only used during …","","","The active txhashset (rewindable MMRs) to use for block …","","","An atomic batch in which all changes can be committed all …","","All chain-related database operations","An iterator on blocks, from latest to earliest, …","An iterator on blocks, from latest to earliest, …","Builds a new batch to be used with this store.","Does this full block exist?","Does the block exist?","An iterator to all block in db","","","","","","","","","","","","","","","","Creates a child of this batch. It will be merged with its …","Commits this batch. If it’s a child batch, it will be …","Low level function to delete directly by raw key.","Delete a full block. Does not delete any record associated …","Delete the output_pos index entry for a spent output.","","","Build a new iterator using the provided chain store and …","","Build a new iterator using the provided chain store and …","","","Build a new iterator using the provided chain store and …","Build a new iterator using the provided chain store batch …","Build a new iterator using the provided chain store batch …","Build a new iterator using the provided chain store batch …","Get full block.","get block","Get block header.","Get block header.","Get the block input bitmap based on our spent index. …","Get block_sums for the block hash.","Get block_sums for the block.","Get PMMR pos for the given output commitment.","Get output_pos from index.","Get PMMR pos and block height for the given output …","Get output_pos and block height from index.","Get previous header.","Get the previous header.","Get the “spent index” from the db for the specified …","The “sync” head.","Get “sync” head.","The current chain head.","The head.","Header of the block at the head of the block chain (not …","Header of the block at the head of the block chain (not …","The current header head (may differ from chain head).","The current header head (may differ from chain head).","","","","","","","","","When using the output_pos iterator we have access to the …","Migrate a block stored in the db by serializing it using …","Create new chain store","","","","Iterator over the output_pos index.","Reset header_head to the current head of the body chain.","Reset sync_head to the current head of the header chain.","Save the block to the db. Note: the block header is not …","Save block header to db.","Save block_sums for the block.","Save body head to db.","Save body “tail” to db.","Save header head to db.","Save output_pos and block height to index.","We maintain a “spent” index for each full block to …","Save “sync” head to db.","The current chain “tail” (earliest block in the store).","The tail.","","","","","","","","","","","","","","","","","","","","","Create a new instance of the chain store based on this …","The “bitmap accumulator” allows us to commit to a …","A bitmap “chunk” representing 1024 contiguous bits of …","Allows the application of new blocks on top of the …","An extension “pair” consisting of a txhashet extension …","A header extension to allow the header MMR to extend …","Convenience wrapper around a single prunable MMR backend.","Rewindable (but readonly) view of the kernel set (based on …","An easy to manipulate structure holding the 3 sum trees …","Readonly view of the UTXO set (based on output MMR).","Does this bitmap chunk have any bits set to 1?","Append a new chunk to the BitmapAccumulator. Append parent …","Apply updates to the bitmap accumulator given an iterator …","Apply a new block to the current txhashet extension …","Apply a new header to the header MMR extension. This may …","","The backend storage for the MMR.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find the start of the first “chunk” of 1024 bits from …","Clean the txhashset folder","","","","","","","","","","","","","","","","","Compact the MMR data files and flush the rm logs","Dumps the state of the 3 sum trees to stdout for …","Dumps the output MMR. We use this after compacting for …","","Starts a new unit of work to extend the chain with …","Starts a new unit of work to extend (or rewind) the chain …","The txhashset extension.","Find a kernel with a given excess. Work backwards from …","","Force the rollback of this extension, no matter the result.","Force the rollback of this extension, no matter the result","","","","","","","","","","Convenience function to query the db for a header by its …","Get the header at the specified height based on the …","Get the header at the specified height based on the …","Get the header hash at the specified height based on the …","Return Commit’s MMR position","Retrieves an unspent output using its PMMR position","","","The head representing the furthest extent of the current …","The head representing the furthest extent of the current …","Start a new header MMR unit of work. This MMR can be …","The header extension.","highest output insertion index available","Initialize a bitmap accumulator given the provided idx …","(Re)build the output_pos index to be consistent with the …","","","","","","","","","","","Compares the provided header to the header in the header …","Check if an output is unspent. We look in the index to …","Read the “raw” kernel backend data file (via temp file …","","as above, for kernels","returns the last N nodes inserted into the tree (i.e. the …","as above, for range proofs","The last position accessible via this MMR handle (backend …","build a new merkle proof for the given position.","Build a Merkle proof for the given output and the block …","Build a new readonly kernel view.","Constructor to create a PMMR handle from an existing …","Build a new UTXO view.","Crate a new empty bitmap accumulator.","Create a new bitmap chunk, defaulting all bits in the …","Open an existing or new set of backends for the TxHashSet","returns outputs from the given pmmr index up to the …","","As above, for rangeproofs","Reading is not currently supported, just return an empty …","Close all backend file handles","Rewind this readonly view to a previous block. We …","Rewind the header extension to the specified header. Note …","Rewinds the MMRs to the provided block, rewinding to the …","Rewindable (but still readonly) view on the kernel MMR. …","The root of the header MMR for convenience.","The root hash of the bitmap accumulator MMR.","Get MMR roots.","Current root hashes and sums (if applicable) for the …","","","","","Set a single bit in this chunk. 0-indexed from start of …","Generate a short_id via the following -","The size of the header MMR.","Sizes of each of the sum trees","Saves a snapshot of the output and rangeproof MMRs to disk.","","","","","","","","","","","","","","","","","","","","","Overwrite txhashset folders in “to” folder with “from…","","","","","","","","","","Readonly view on the UTXO set. Based on the current …","Build a view of the current UTXO set based on the output …","Validate the txhashset state against the provided block …","Validate a block against the current UTXO set. Every input …","Validate full kernel sums against the provided header (for …","Special handling to make sure the whole kernel set matches …","Validate the prev_root of the header against the root of …","Validate the MMR (output, rangeproof, kernel) roots …","Validate the header, output and kernel MMR sizes against …","Validate a transaction against the current UTXO set. Every …","Verify we are not attempting to spend any coinbase outputs …","","","","","","","","","","","Packages the txhashset data files into a zip and returns a …","Extract the txhashset data from a zip file and writes the …","Not enough peers to do anything yet, boolean indicates …","Status of an accepted block.","Downloading blocks","Bridge between the chain pipeline and the rest of the …","Minimal struct representing a known MMR position and …","Block does not update the chain head and is a fork.","Downloading block headers","Initial State (we do not yet know if we are/should be …","Block validation on a block we mined ourselves","No flags","Block is the “next” block, updating the chain head.","Do-nothing implementation of TxHashsetWriteStatus","Not syncing","Dummy adapter used as a placeholder for real …","Options for block validation","A helper for the various output roots.","Block updates the chain head via a (potentially …","Runs without checking the Proof of Work, mostly to make …","Adds block while in syncing mode.","","Current sync state. Encapsulates the current SyncStatus.","Various status sync can be in, whether it’s fast sync or …","The tip of a fork. A handle to the fork ancestry from its …","A helper for the various txhashset MMR roots.","State sync finalized","Downloading the various txhashsets","Validating the kernels","Validating the range proofs","Finalizing the new state","Setting up before validation","Inform the caller of the current status of a txhashset …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","The bitmap accumulator root","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","The blockchain pipeline has accepted this block as valid …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clear sync error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Creates a new tip based on provided header.","","","The hash of the underlying block.","Block height","Height of the tip (max height of the fork)","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Whether the current state matches any active syncing …","Kernel root","Last block pushed to the fork","","","","","Return a new SyncState initialize to NoSync","Returns the complement of this set of flags.","Done writing a new txhashset","","","Starting to save the txhashset and related data","","","First setup of the txhashset","","","Starting kernel validation","","","Starting rproof validation","","","Accessor for the output PMMR root (rules here are block …","Output roots","","The output PMMR root","MMR position","Previous block","","","Removes the specified flags in-place.","The root of our output PMMR. The rules here are block …","Range Proof root","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Communicate sync error","Generate a short_id via the following -","Current syncing status","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Get sync error","","","","","Toggles the specified flags in-place.","Total difficulty accumulated on that fork","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the syncing status","Update txhashset downloading progress","Validate roots against the provided block header.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,1,3,3,3,2,1,3,2,1,3,2,1,3,2,2,1,3,3,1,1,1,1,1,1,1,1,3,3,3,1,2,2,1,1,3,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,3,3,3,3,3,2,2,1,1,3,3,0,3,3,3,3,1,1,3,0,3,3,3,1,2,1,3,2,1,3,2,1,0,3,3,3,3,3,2,1,0,3,3,3,3,3,3,2,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,12,0,20,20,20,20,20,20,20,20,20,0,0,0,0,0,20,20,20,20,20,0,0,0,0,0,21,21,22,22,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,22,22,22,22,22,21,22,23,23,24,24,25,25,23,24,25,21,22,21,22,22,21,22,21,22,21,22,21,22,22,21,22,21,22,21,22,21,22,21,22,23,24,25,23,24,25,22,22,21,23,24,25,22,22,22,22,22,22,22,22,22,22,22,22,21,22,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,0,0,0,0,0,0,0,0,0,26,27,27,28,29,26,30,31,30,32,29,33,28,34,27,26,31,30,32,29,33,28,34,27,26,31,30,32,29,33,28,34,27,26,27,0,27,26,27,26,27,26,27,26,27,26,27,27,26,26,27,26,32,28,28,26,0,0,33,32,26,29,28,31,30,32,29,33,28,34,27,26,32,29,34,30,32,34,26,26,29,28,0,33,32,27,32,28,31,30,32,29,33,28,34,27,26,29,32,31,28,32,32,32,30,32,28,31,30,34,27,26,32,32,28,32,26,32,31,29,28,0,29,27,32,28,27,27,26,26,26,26,29,28,28,27,26,31,30,32,29,33,28,34,27,26,31,30,32,29,33,28,34,27,26,0,31,30,32,29,33,28,34,27,26,0,28,28,34,28,31,29,28,28,34,34,31,30,32,29,33,28,34,27,26,26,0,0,35,0,35,0,0,36,35,35,37,37,36,0,35,0,0,0,36,37,37,35,0,0,0,0,35,35,35,35,35,35,0,37,37,37,38,37,37,37,37,37,39,40,41,42,40,37,35,43,38,44,45,36,41,42,40,37,35,43,38,44,45,36,41,42,40,37,35,43,38,44,45,36,41,37,35,45,36,37,35,45,36,37,35,45,36,37,35,45,36,37,35,45,36,37,37,35,35,45,45,36,36,37,35,45,36,37,37,45,35,45,37,37,35,45,36,37,37,37,37,37,37,35,43,38,44,45,36,41,42,40,37,35,43,38,44,45,36,37,37,37,45,37,37,45,44,45,37,37,41,42,40,37,35,43,38,44,45,36,37,37,41,43,45,37,35,45,36,41,37,46,41,42,46,41,42,46,41,42,46,41,42,46,41,42,43,43,37,38,44,45,44,45,37,38,43,37,37,35,35,45,45,36,36,35,45,37,41,45,41,37,37,41,37,35,45,36,37,45,41,42,40,37,35,43,38,44,45,36,41,42,40,37,35,43,38,44,45,36,41,42,40,37,35,43,38,44,45,36,41,41,43,41,42,40,37,35,43,38,44,45,36,44,45,47,48,49,50,51,49,50,52,52,51,51,53,53,51,51,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["u64",15],["option",4,["u64"]]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["bottleiter",3],["error",3],["result",4,["bottleiter","error"]]]],[[],[["option",4,["fail"]],["fail",8]]],[[],[["fail",8],["option",4,["fail"]]]],[[],[["option",4,["fail"]],["fail",8]]],[[["string",3],["option",4]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[]],[[],["errorkind",4]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["difficultyiter","error"]],["difficultyiter",3]]],[[],[["error",3],["result",4,["difficultyiterall","error"]],["difficultyiterall",3]]],[[["errorkind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",4]],["error",3]],[[["error",4]],["error",3]],[[]],[[["error",3]],["error",3]],[[["error",4]],["error",3]],[[["error",4]],["error",3]],[[["error",4]],["error",3]],[[["errorkind",4]],["error",3]],[[["error",4]],["error",3]],[[["context",3,["errorkind"]],["errorkind",4]],["error",3]],[[]],[[["hash",3]],[["result",4,["block","error"]],["error",3],["block",3]]],[[["hash",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["hash",3]],[["result",4,["blocksums","error"]],["error",3],["blocksums",3]]],[[["u64",15]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["outputidentifier",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15],["commitment",3],["option",4,["u64"]]],[["option",4],["error",3],["result",4,["option","error"]]]],[[["u64",15]],["vec",3]],[[["u64",15]],["vec",3]],[[["u64",15]],["vec",3]],[[["outputidentifier",3],["blockheader",3]],[["merkleproof",3],["result",4,["merkleproof","error"]],["error",3]]],[[["commitment",3]],[["merkleproof",3],["result",4,["merkleproof","error"]],["error",3]]],[[["commitment",3]],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["blockheader",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[],["pathbuf",3]],[[["string",3]],["pathbuf",3]],[[["u64",15]],[["error",3],["result",4,["output","error"]],["output",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[],[["arc",3,["rwlock"]],["rwlock",6,["pmmrhandle"]]]],[[["string",3],["arc",3,["chainadapter"]],["bool",15],["block",3],["chainadapter",8]],[["result",4,["chain","error"]],["error",3],["chain",3]]],[[]],[[]],[[]],[[],["bool",15]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["hash",3]],["bool",15]],[[["outputidentifier",3]],[["result",4,["commitpos","error"]],["commitpos",3],["error",3]]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[["read",8]],[["result",4,["error"]],["error",3]]],[[],["errorkind",4]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[["errorkind",4]],["bool",15]],[[],["usize",15]],[[],["usize",15]],null,[[["block",3],["options",3]],[["result",4,["option","error"]],["option",4,["tip"]],["error",3]]],[[["blockheader",3],["options",3]],[["result",4,["error"]],["error",3]]],[[["tip",3]],[["result",4,["error"]],["error",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[]],[[]],[[["block",3]],[["result",4,["error"]],["error",3]]],null,[[],[["arc",3,["chainstore"]],["chainstore",3]]],[[["options",3]],[["result",4,["error"]],["error",3]]],[[],[["result",4,["tip","error"]],["error",3],["tip",3]]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],[["arc",3,["rwlock"]],["rwlock",6,["txhashset"]]]],[[],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["hash",3]],[["result",4,["error"]],["error",3]]],[[["hash",3],["file",3],["txhashsetwritestatus",8]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["u64",15],["option",4,["u64"]]],[["error",3],["result",4,["error"]]]],[[["bool",15]],[["result",4,["error"]],["error",3]]],[[["transaction",3]],[["result",4,["error"]],["error",3]]],[[["transaction",3]],[["result",4,["error"]],["error",3]]],[[["transaction",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[]],null,null,[[["block",3],["blockcontext",3]],[["result",4,["option","error"]],["option",4,["tip"]],["error",3]]],[[["blockcontext",3],["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["extensionpair",3],["blockheader",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["headerextension",3],["blockheader",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["blockcontext",3]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[]],null,null,null,null,null,[[],[["result",4,["batch","error"]],["batch",3],["error",4]]],[[["hash",3]],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[["hash",3]],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["result",4,["seriterator","error"]],["seriterator",3,["block"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["batch","error"]],["batch",3],["error",4]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["hash",3]],[["error",4],["result",4,["error"]]]],[[["commitment",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[["hash",3],["arc",3,["chainstore"]],["chainstore",3]],["difficultyiter",3]],[[]],[[["hash",3],["arc",3,["chainstore"]],["chainstore",3]],["difficultyiterall",3]],[[]],[[]],[[["hash",3],["chainstore",3],["u8",15],["arc",3,["chainstore"]]],["bottleiter",3]],[[["hash",3],["batch",3]],["difficultyiter",3]],[[["hash",3],["batch",3]],["difficultyiterall",3]],[[["hash",3],["batch",3],["u8",15]],["bottleiter",3]],[[["hash",3]],[["result",4,["block","error"]],["block",3],["error",4]]],[[["hash",3]],[["result",4,["block","error"]],["block",3],["error",4]]],[[["hash",3]],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[["hash",3]],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[["hash",3]],[["bitmap",3],["error",4],["result",4,["bitmap","error"]]]],[[["hash",3]],[["error",4],["blocksums",3],["result",4,["blocksums","error"]]]],[[["hash",3]],[["error",4],["blocksums",3],["result",4,["blocksums","error"]]]],[[["commitment",3]],[["u64",15],["error",4],["result",4,["u64","error"]]]],[[["commitment",3]],[["u64",15],["error",4],["result",4,["u64","error"]]]],[[["commitment",3]],[["error",4],["result",4,["error"]]]],[[["commitment",3]],[["error",4],["result",4,["error"]]]],[[["blockheader",3]],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[["blockheader",3]],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[["hash",3]],[["result",4,["vec","error"]],["vec",3,["commitpos"]],["error",4]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[],[["error",4],["result",4,["blockheader","error"]],["blockheader",3]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commitment",3]],["bool",15]],[[["block",3],["protocolversion",3]],[["error",4],["result",4,["error"]]]],[[["str",15]],[["result",4,["chainstore","error"]],["chainstore",3],["error",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["error",4],["result",4,["seriterator","error"]],["seriterator",3]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["block",3]],[["error",4],["result",4,["error"]]]],[[["blockheader",3]],[["error",4],["result",4,["error"]]]],[[["hash",3],["blocksums",3]],[["error",4],["result",4,["error"]]]],[[["tip",3]],[["error",4],["result",4,["error"]]]],[[["tip",3]],[["error",4],["result",4,["error"]]]],[[["tip",3]],[["error",4],["result",4,["error"]]]],[[["u64",15],["commitment",3]],[["error",4],["result",4,["error"]]]],[[["vec",3],["hash",3]],[["error",4],["result",4,["error"]]]],[[["tip",3]],[["error",4],["result",4,["error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["protocolversion",3]],["chainstore",3]],null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[["bitmapchunk",3]],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["u64",15]],[["result",4,["error"]],["error",3]]],[[["block",3],["batch",3]],[["vec",3,["commitpos"]],["error",3],["result",4,["vec","error"]]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["u64",15]],[[["pathbuf",3]]],[[],["bitmapaccumulator",3]],[[],["bitmapchunk",3]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[]],[[]],[[["blockheader",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["bool",15]]],[[]],[[],[["u16",15],["option",4,["u16"]]]],[[["txhashset",3],["pmmrhandle",3],["batch",3]],[["error",3],["result",4,["error"]]]],[[["pmmrhandle",3],["txhashset",3]],[["error",3],["result",4,["error"]]]],null,[[["u64",15],["commitment",3],["option",4,["u64"]]],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hash",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15],["batch",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15],["batch",3]],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15]],[["hash",3],["error",3],["result",4,["hash","error"]]]],[[["commitment",3]],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["u64",15]],[["error",3],["result",4,["output","error"]],["output",3]]],[[],["hash",3]],[[["u64",15]],["hash",3]],[[],["tip",3]],[[],["tip",3]],[[["pmmrhandle",3],["tip",3],["batch",3]],[["error",3],["result",4,["error"]]]],null,[[],["u64",15]],[[["u64",15],["intoiterator",8]],[["result",4,["error"]],["error",3]]],[[["pmmrhandle",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockheader",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["outputidentifier",3]],[["result",4,["commitpos","error"]],["commitpos",3],["error",3]]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[["u64",15]],["vec",3]],[[["u64",15]],["vec",3]],[[["u64",15]],["vec",3]],null,[[["commitment",3]],[["merkleproof",3],["result",4,["merkleproof","error"]],["error",3]]],[[["outputidentifier",3],["batch",3]],[["merkleproof",3],["result",4,["merkleproof","error"]],["error",3]]],[[["pmmrbackend",3,["txkernel"]],["rewindablepmmr",3,["txkernel","pmmrbackend"]],["txkernel",3],["blockheader",3]],["rewindablekernelview",3]],[[["bool",15],["option",4,["blockheader"]],["str",15],["protocolversion",3],["blockheader",3]],[["pmmrhandle",3],["result",4,["pmmrhandle","error"]],["error",3]]],[[["output",3],["pmmrbackend",3,["rangeproof"]],["readonlypmmr",3,["rangeproof","pmmrbackend"]],["pmmrbackend",3,["output"]],["readonlypmmr",3,["output","pmmrbackend"]],["readonlypmmr",3,["blockheader","pmmrbackend"]],["rangeproof",3],["pmmrbackend",3,["blockheader"]],["blockheader",3]],["utxoview",3]],[[],["bitmapaccumulator",3]],[[],["bitmapchunk",3]],[[["string",3],["chainstore",3],["option",4,["blockheader"]],["arc",3,["chainstore"]],["blockheader",3]],[["txhashset",3],["error",3],["result",4,["txhashset","error"]]]],[[["u64",15],["option",4,["u64"]]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[["u64",15],["option",4,["u64"]]]],[[["reader",8]],[["error",4],["result",4,["bitmapchunk","error"]],["bitmapchunk",3]]],[[]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["blockheader",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["txhashset",3]],[["error",3],["result",4,["error"]]]],[[],[["hash",3],["error",3],["result",4,["hash","error"]]]],[[],["hash",3]],[[],["txhashsetroots",3]],[[],[["result",4,["txhashsetroots","error"]],["error",3],["txhashsetroots",3]]],[[]],[[]],[[]],[[]],[[["u64",15],["bool",15]]],[[["u64",15],["hash",3]],["shortid",3]],[[],["u64",15]],[[]],[[["batch",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pathbuf",3]],[["result",4,["error"]],["error",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["pmmrhandle",3],["txhashset",3]],[["error",3],["result",4,["error"]]]],[[["headerextension",3]],["utxoview",3]],[[["bool",15],["blockheader",3],["txhashsetwritestatus",8]],[["error",3],["result",4,["error"]]]],[[["block",3],["batch",3]],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[["batch",3],["transaction",3]],[["result",4,["error"]],["error",3]]],[[["u64",15],["batch",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[["string",3],["blockheader",3]],[["result",4,["file","error"]],["file",3],["error",3]]],[[["blockheader",3],["file",3],["pathbuf",3]],[["result",4,["error"]],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["options",3]],[[["options",3]],["options",3]],[[["options",3]]],null,[[["options",3]],["options",3]],[[["options",3]]],[[],["u32",15]],[[["options",3]],["options",3]],[[["options",3]]],[[["block",3],["blockstatus",4],["options",3]]],[[["block",3],["blockstatus",4],["options",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["options",3]],[[],["syncstatus",4]],[[],["tip",3]],[[],["blockstatus",4]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[]],[[]],[[]],[[]],[[["options",3]],["ordering",4]],[[["options",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["options",3]],[[["options",3]],["bool",15]],[[["syncstatus",4]],["bool",15]],[[["tip",3]],["bool",15]],[[["blockstatus",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["option",4,["options"]],["options",3]]],[[["u32",15]],["options",3]],[[["u32",15]],["options",3]],[[["blockheader",3]],["tip",3]],[[["intoiterator",8]],["options",3]],[[]],[[],["hash",3]],null,null,[[["options",3]]],[[["options",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[["options",3]],["bool",15]],[[["syncstatus",4]],["bool",15]],[[["tip",3]],["bool",15]],[[["blockstatus",4]],["bool",15]],[[],["syncstate",3]],[[],["options",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["blockheader",3]],["hash",3]],null,[[["options",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[["reader",8]],[["error",4],["result",4,["commitpos","error"]],["commitpos",3]]],[[["reader",8]],[["error",4],["tip",3],["result",4,["tip","error"]]]],[[["options",3]]],[[["blockheader",3]],["hash",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["options",3],["bool",15]]],[[["error",3]]],[[["u64",15],["hash",3]],["shortid",3]],[[],["syncstatus",4]],[[["options",3]],["options",3]],[[["options",3]]],[[],[["arc",3,["rwlock"]],["rwlock",6,["option"]]]],[[]],[[]],[[]],[[]],[[["options",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["syncstatus",4]]],[[["syncstatus",4]],["bool",15]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"ErrorKind"],[3,"Error"],[3,"Chain"],[13,"Unfit"],[13,"InvalidBlockProof"],[13,"Keychain"],[13,"Secp"],[13,"AlreadySpent"],[13,"DuplicateCommitment"],[13,"InvalidBlockVersion"],[13,"InvalidTxHashSet"],[13,"StoreErr"],[13,"FileReadErr"],[13,"SerErr"],[13,"TxHashSetErr"],[13,"Transaction"],[13,"Other"],[13,"Committed"],[13,"SyncError"],[3,"BlockContext"],[3,"ChainStore"],[3,"Batch"],[3,"DifficultyIter"],[3,"DifficultyIterAll"],[3,"BottleIter"],[3,"BitmapChunk"],[3,"BitmapAccumulator"],[3,"Extension"],[3,"HeaderExtension"],[3,"PMMRHandle"],[3,"RewindableKernelView"],[3,"TxHashSet"],[3,"ExtensionPair"],[3,"UTXOView"],[4,"SyncStatus"],[4,"BlockStatus"],[3,"Options"],[3,"OutputRoots"],[8,"ChainAdapter"],[3,"NoopAdapter"],[3,"SyncState"],[3,"NoStatus"],[3,"TxHashSetRoots"],[3,"CommitPos"],[3,"Tip"],[8,"TxHashsetWriteStatus"],[13,"Reorg"],[13,"AwaitingPeers"],[13,"HeaderSync"],[13,"BodySync"],[13,"TxHashsetDownload"],[13,"TxHashsetKernelsValidation"],[13,"TxHashsetRangeProofsValidation"]]},\
"epic_config":{"doc":"Crate wrapping up the Epic binary and configuration file","t":[0,0,17,17,5,5,5,4,3,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["config","types","API_SECRET_FILE_NAME","SERVER_CONFIG_FILE_NAME","check_api_secret","init_api_secret","initial_setup_server","ConfigError","ConfigMembers","FileIOError","FileNotFoundError","GlobalConfig","ParseError","SerializationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","config_file_path","default","default","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","for_chain","from","from","from","from","into","into","into","logging","members","ne","ne","new","self_address_mut","self_address_mut","self_address_mut","self_address_mut","ser_config","serialize","serialize","server","stratum_enabled","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_paths","vzip","vzip","vzip","write_to_file","0","0","0","0","1","1"],"q":["epic_config","","epic_config::config","","","","","epic_config::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_config::types::ConfigError","","","","",""],"d":["Configuration file management","Public types for config modules","Node API secret","The default file name to use when trying to derive the …","Check if file contains a secret and nothing else","Create file with api secret","Handles setup and detection of paths for node","Error type wrapping config errors.","Keeping an ‘inner’ structure here, as the top level …","Error with fileIO while reading config file","No file found","Going to hold all of the various configuration types …","Error with parsing of config file","Error serializing config values","","","","","","","","","","","","","","","","","","","","","","","","","","Keep track of the file we’ve read","","","","","","","","","","","Same as GlobalConfig::default() but further tweaks …","","","","","","","","Logging config","Global member config","","","Requires the path to a config file","","","","","Serialize config","","","Server config","Enable mining","","","","","","","","","","","","","Update paths","","","","Write configuration to a file","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,2,3,1,2,3,1,2,3,2,3,2,3,2,3,2,3,2,3,2,2,3,3,2,3,2,2,3,2,3,2,3,1,1,2,3,2,1,1,2,3,1,2,3,3,2,2,3,2,2,2,3,3,2,2,3,3,2,2,3,1,1,2,3,1,2,3,1,2,3,2,1,2,3,2,4,5,6,7,4,5],"f":[null,null,null,null,[[["pathbuf",3]],[["configerror",4],["result",4,["configerror"]]]],[[["pathbuf",3]],[["configerror",4],["result",4,["configerror"]]]],[[["chaintypes",4]],[["configerror",4],["globalconfig",3],["result",4,["globalconfig","configerror"]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["globalconfig",3]],[[],["configmembers",3]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["box",3,["defaultfeatures","global"]],["global",3],["defaultfeatures",8]]],[[]],[[]],null,[[],["globalconfig",3]],[[],["configmembers",3]],[[],["result",4]],[[],["result",4]],[[["globalconfig",3]],["bool",15]],[[["configmembers",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["chaintypes",4]],["globalconfig",3]],[[["error",3]],["configerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["globalconfig",3]],["bool",15]],[[["configmembers",3]],["bool",15]],[[["str",15]],[["configerror",4],["globalconfig",3],["result",4,["globalconfig","configerror"]]]],[[]],[[]],[[]],[[]],[[],[["configerror",4],["string",3],["result",4,["string","configerror"]]]],[[],["result",4]],[[],["result",4]],null,[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["pathbuf",3],["chaintypes",4]]],[[]],[[]],[[]],[[["str",15]],[["configerror",4],["result",4,["configerror"]]]],null,null,null,null,null,null],"p":[[4,"ConfigError"],[3,"GlobalConfig"],[3,"ConfigMembers"],[13,"ParseError"],[13,"FileIOError"],[13,"FileNotFoundError"],[13,"SerializationError"]]},\
"epic_core":{"doc":"Implementation of the MimbleWimble paper. …","t":[0,0,14,0,0,0,0,14,11,0,11,11,0,14,14,14,14,14,14,14,14,14,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,12,5,11,11,5,11,11,11,11,11,11,5,5,12,5,11,5,5,11,5,5,11,11,11,5,5,11,5,12,5,11,11,5,5,5,5,12,5,5,5,5,5,5,12,12,5,11,5,11,11,11,5,4,13,5,5,11,11,0,0,11,11,11,0,0,11,11,0,11,0,0,11,0,11,0,11,0,11,11,11,12,3,3,13,13,13,4,3,3,13,13,13,13,13,13,13,13,13,13,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,6,13,13,3,8,8,4,6,3,13,13,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,5,11,11,5,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,8,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,11,5,11,5,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,5,11,5,11,11,11,11,8,3,3,8,18,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,3,10,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,10,11,11,11,5,5,11,11,11,11,11,10,11,11,11,11,10,11,10,11,10,11,11,11,11,12,5,11,11,11,11,11,11,11,5,5,12,10,11,11,11,10,11,11,11,11,5,10,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,10,11,10,11,12,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,4,13,13,3,13,13,13,4,13,13,13,13,13,3,4,3,13,13,13,13,13,13,3,3,3,4,5,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,5,5,17,17,17,13,3,17,17,4,13,13,13,3,17,17,3,13,3,17,13,17,3,3,17,4,17,17,17,17,17,17,17,17,17,17,17,13,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,5,11,11,5,5,5,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,5,12,12,3,4,13,13,13,13,13,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,5,11,11,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,6,3,11,11,12,5,11,5,5,11,12,5,5,5,11,11,11,5,3,8,3,11,11,11,11,10,11,11,5,11,11,11,11,11,11,11,11,10,11,11,10,11,11,5,10,11,11,11,11,11,11,11,11,5,11,11,5,5,5,5,5,5,0,0,0,0,0,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,3,6,8,8,3,18,13,8,4,13,13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,5,11,11,11,11,11,12,12,10,11,11,5,10,0,12,11,11,0,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,11,11,5,11,11,11,11,11,11,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,5,11,12,11,11,11,11,11,3,3,11,11,11,11,11,11,11,5,12,12,11,11,11,5,12,11,11,11,11,11,11,11,11,11,3,3,17,17,11,11,11,11,11,11,11,12,11,11,11,5,12,11,5,5,5,5,12,11,11,11,11,11,11,11,11,12,8,3,3,13,13,13,16,13,4,8,13,13,13,13,13,3,18,18,13,8,8,3,8,8,4,4,13,3,13,13,8,8,8,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,10,11,11,10,11,11,5,10,11,11,10,11,11,10,11,11,10,11,11,11,11,5,10,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["consensus","core","filter_map_vec","genesis","global","libtx","macros","map_vec","number","pow","read","search","ser","ser_multiread","ser_multiwrite","tee","to_edge","to_u32","to_u64","to_usize","try_iter_map_vec","try_map_vec","write","AR_SCALE_DAMP_FACTOR","AUTOMATEDTEST_FOUNDATION_HEIGHT","BASE_EDGE_BITS","BASE_REWARD_ERA_6_ONWARDS","BLOCK_DIFF_FACTOR_PROGPOW","BLOCK_DIFF_FACTOR_RANDOMX","BLOCK_ERA_1","BLOCK_ERA_2","BLOCK_ERA_3","BLOCK_ERA_4","BLOCK_ERA_5","BLOCK_ERA_6_ONWARDS","BLOCK_INPUT_WEIGHT","BLOCK_KERNEL_WEIGHT","BLOCK_OUTPUT_WEIGHT","BLOCK_TIME_SEC","BLOCK_TIME_WINDOW","CLAMP_FACTOR","COINBASE_MATURITY","CUT_THROUGH_HORIZON","DAY_HEIGHT","DEFAULT_MIN_EDGE_BITS","DIFFICULTY_ADJUST_WINDOW","DIFFICULTY_DAMP_FACTOR","EPIC_BASE","FLOONET_BLOCK_ERA_1","FLOONET_DIFFICULTY_ERA","FLOONET_FIRST_HARD_FORK","FLOONET_FOUNDATION_HEIGHT","FOUNDATION_LEVY","FOUNDATION_LEVY_ERA_1","FOUNDATION_LEVY_ERA_2_ONWARDS","FOUNDATION_LEVY_RATIO","FREEMAN","HOUR_HEIGHT","HeaderInfo","INITIAL_DIFFICULTY","MAINNET_DIFFICULTY_ERA","MAINNET_FIRST_HARD_FORK","MAINNET_FOUNDATION_HEIGHT","MAX_BLOCK_WEIGHT","MICRO_EPIC","MILLI_EPIC","MIN_AR_SCALE","MIN_DIFFICULTY","MIN_DIFFICULTY_PROGPOW","MIN_DIFFICULTY_RANDOMX","OLD_MIN_DIFFICULTY_PROGPOW","OLD_MIN_DIFFICULTY_RANDOMX","PP_CLAMP_FACTOR","PP_DIFFICULTY_DAMP_FACTOR","PROOFSIZE","RX_CLAMP_FACTOR","RX_DIFFICULTY_DAMP_FACTOR","SECOND_POW_EDGE_BITS","STATE_SYNC_THRESHOLD","TESTING_DIFFICULTY_ERA","TESTING_FIRST_HARD_FORK","UNIT_DIFFICULTY","WEEK_HEIGHT","YEAR_HEIGHT","add_reward_foundation","ar_count","block_hash","block_total_reward_at_height","borrow","borrow_mut","clamp","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","cumulative_reward_foundation","damp","difficulty","difficultyfix_height","eq","first_fork_height","floonet_block_total_reward_at_height","fmt","foundation_height","foundation_index","from","from_diff_scaling","from_ts_diff","graph_weight","header_version","into","is_foundation_height","is_secondary","mainnet_block_total_reward_at_height","ne","new","next_difficulty","next_difficulty_era1","next_hash_difficulty","next_policy","prev_timespan","reward","reward_at_height","reward_foundation","reward_foundation_at_height","secondary_pow_ratio","secondary_pow_scaling","secondary_scaling","timestamp","timestamp_median","to_owned","total_overage_at_height","try_from","try_into","type_id","valid_header_version","Error","InvalidAmountString","amount_from_hr_string","amount_to_hr_string","as_fail","backtrace","block","block_sums","borrow","borrow_mut","cause","committed","compact_block","fmt","fmt","foundation","from","hash","id","into","merkle_proof","name","pmmr","to_string","transaction","try_from","try_into","type_id","0","Block","BlockHeader","CoinbaseSumMismatch","Committed","CutThrough","Error","HeaderEntry","HeaderVersion","InvalidFoundationOutput","InvalidTotalKernelSum","KernelLockHeight","KernelSumMismatch","Keychain","MerkleProof","Other","Secp","Serialization","TooHeavy","Transaction","UntrustedBlock","UntrustedBlockHeader","WeightExceeded","as_elmt","as_fail","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottles","cause","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","clone_into","cut_through","default","default","default","elmt_size","eq","eq","eq","feijoada","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_coinbases","from_reward","hash","hash","hash","hash_with_index","header","height","hydrate_from","inputs","inputs_committed","inputs_mut","into","into","into","into","into","into","into","kernel_mmr_size","kernel_root","kernels","kernels_committed","kernels_mut","name","ne","ne","ne","new","new","output_mmr_size","output_root","outputs","outputs_committed","outputs_mut","overage","partial_cmp","policy","pow","pre_pow","pre_pow_hash","prev_hash","prev_root","range_proof_root","read","read","read","read","read","read","serialize","serialize","serialize","short_id","short_id","short_id","timestamp","to_owned","to_owned","to_owned","to_owned","to_string","total_difficulty","total_fees","total_kernel_offset","total_kernel_offset","total_overage","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate_read","verify_coinbase","version","with_coinbase","with_header","with_reward","write","write","write","write","write_pre_pow","0","0","0","0","0","0","0","AllowPolicy","AllowedPolicy","Cuckaroo","Cuckatoo","Deterministic","Feijoada","FuzzySearch","PoWType","Policy","PolicyConfig","ProgPow","RandomX","allowed_policies","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","choose_algo","choose_algo","clone","clone","clone","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","cmp","count_beans","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","get_bottles_default","hash","height","into","into","into","into","is_allowed_policy","ne","ne","next_block_bottles","partial_cmp","policies","search","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","BlockSums","borrow","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","default","fmt","from","into","kernel_sum","read","to_owned","try_from","try_into","type_id","utxo_sum","write","Committed","Error","InvalidValue","KernelSumMismatch","Keychain","Secp","as_fail","backtrace","borrow","borrow_mut","cause","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","deserialize","eq","fmt","fmt","from","from","from","inputs_committed","into","kernels_committed","name","ne","outputs_committed","serialize","sum_commitments","sum_commits","sum_kernel_excesses","sum_kernel_offsets","to_owned","to_string","try_from","try_into","type_id","verify_kernel_sums","0","0","CompactBlock","CompactBlockBody","UntrustedCompactBlock","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","fmt","fmt","from","from","from","from","from","hash","hash_with_index","header","into","into","into","into","kern_full","kern_full","kern_ids","kern_ids","nonce","out_full","out_full","read","read","read","short_id","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","CbData","FOUNDATION_COINBASE_SIZE_1","borrow","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","deserialize","fmt","from","into","kernel","key_id","load_foundation_output","output","save_in_disk","serialize","serialize_foundation","to_owned","try_from","try_into","type_id","DefaultHashable","Hash","HashWriter","Hashed","LEN","ZERO_HASH","add","as_bytes","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","cmp","default","default","deserialize","eq","finalize","fmt","fmt","from","from","from_hex","from_vec","hash","hash","hash","hash_with_index","index","index","index","index","index","into","into","into_hash","len","ne","partial_cmp","protocol_version","read","serialization_mode","serialize","short_id","to_hex","to_owned","to_string","to_u64","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","write","write_fixed_bytes","SHORT_ID_SIZE","ShortId","ShortIdentifiable","borrow","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","cmp","deserialize","eq","fmt","from","from_bytes","from_hex","hash","hash","hash_with_index","into","partial_cmp","read","serialize","short_id","short_id","to_hex","to_owned","try_from","try_into","type_id","write","zero","MerkleProof","MerkleProofError","RootMismatch","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","cmp","default","deserialize","empty","eq","eq","fmt","fmt","from","from","from_hex","into","into","mmr_size","ne","partial_cmp","path","read","serialize","to_hex","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","write","Backend","PMMR","ReadonlyPMMR","RewindablePMMR","VecBackend","append","append","at","at","at","backend","bag_the_rhs","bintree_leftmost","bintree_postorder_height","bintree_rightmost","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","data","data_as_temp_file","data_as_temp_file","dump","dump_from_file","dump_stats","dump_stats","dump_stats","elements_from_pmmr_index","family","family_branch","fmt","from","from","from","from","get_data","get_data","get_data","get_data","get_data","get_data_from_file","get_data_from_file","get_from_file","get_from_file","get_hash","get_hash","get_hash","get_hash","get_last_n_insertions","hashes","insertion_to_pmmr_index","into","into","into","into","is_empty","is_empty","is_empty","is_leaf","is_left_sibling","last_pos","leaf_idx_iter","leaf_idx_iter","leaf_idx_iter","leaf_idx_iter","leaf_pos_iter","leaf_pos_iter","leaf_pos_iter","leaf_pos_iter","merkle_proof","n_leaves","n_unpruned_leaves","n_unpruned_leaves","n_unpruned_leaves","new","new","new","new","new_hash_only","path","peak_map_height","peak_sizes_height","peaks","peaks","peaks","peaks","prune","push","readonly_pmmr","release_files","release_files","remove","remove","removed","rewind","rewind","rewind","rewind","root","root","root","size","snapshot","snapshot","snapshot","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unpruned_size","unpruned_size","unpruned_size","validate","AggregationError","AsBlock","AsLimitedTransaction","AsTransaction","Coinbase","Coinbase","Committed","CutThrough","Error","HeightLocked","IncorrectSignature","Input","InvalidKernelFeatures","InvalidOutputFeatures","InvalidProofMessage","KernelFeatures","KernelSumMismatch","Keychain","LockHeight","MerkleProof","NoLimit","Output","OutputFeatures","OutputIdentifier","Plain","Plain","RangeProof","Secp","Serialization","TooHeavy","Transaction","TransactionBody","TxKernel","Weighting","aggregate","as_elmt","as_elmt","as_fail","as_string","as_u8","batch_sig_verify","batch_verify_proofs","body","body_weight","body_weight_as_block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","commit","commit","commit","commitment","commitment","commitment","cut_through","deaggregate","default","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","elmt_size","elmt_size","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","excess","excess","excess_sig","features","features","features","features","fee","fee","fee_to_weight","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_input","from_output","from_u64","hash","hash","hash","hash","hash","hash","hash","hash","hash_with_index","hash_with_index","hash_with_index","hash_with_index","hash_with_index","init","inputs","inputs","inputs_committed","inputs_committed","inputs_mut","into","into","into","into","into","into","into","into","into","into","into","into_output","is_coinbase","is_coinbase","is_coinbase","is_coinbase","is_coinbase","is_height_locked","is_height_locked","is_plain","is_plain","is_plain","is_plain","is_plain","kernel_sig_msg","kernels","kernels","kernels_committed","kernels_committed","kernels_mut","lock_height","lock_height","msg_to_sign","ne","ne","ne","new","new","new","offset","outputs","outputs","outputs_committed","outputs_committed","outputs_mut","overage","partial_cmp","partial_cmp","partial_cmp","proof","proof","read","read","read","read","read","read","read","read","replace_kernel","replace_kernel","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","short_id","short_id","short_id","short_id","short_id","sort","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_weight","tx_weight_as_block","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","validate_read","validate_read","verify","verify_features","verify_proof","weight","weight","weight_as_block","with_features","with_input","with_input","with_kernel","with_kernel","with_offset","with_output","with_output","write","write","write","write","write","write","write","write","0","0","0","0","0","fee","fee","lock_height","0","genesis_dev","genesis_floo","genesis_main","AUTOMATED_TESTING_COINBASE_MATURITY","AUTOMATED_TESTING_MIN_EDGE_BITS","AUTOMATED_TESTING_PROOF_SIZE","AutomatedTesting","CHAIN_TYPE","COMPACTION_CHECK","CURRENT_HEADER_VERSION","ChainTypes","Cuckaroo","Cuckatoo","Cuckoo","EPIC_VERSION","FLOONET_COINBASE_MATURITY","FLOONET_FOUNDATION_JSON_SHA256","FOUNDATION_FILE","Floonet","HEADER_SYNC_TIMEOUT","MAINNET_FOUNDATION_JSON_SHA256","Mainnet","PEER_EXPIRATION_REMOVE_TIME","POLICY_CONFIG","POW_CONTEXT_TYPE","PROTOCOL_VERSION","PoWContextTypes","STUCK_PEER_KICK_TIME","TESTING_CUT_THROUGH_HORIZON","TESTING_INITIAL_DIFFICULTY","TESTING_INITIAL_GRAPH_WEIGHT","TESTING_MAX_BLOCK_WEIGHT","TESTING_STATE_SYNC_THRESHOLD","TESTING_TXHASHSET_ARCHIVE_INTERVAL","TXHASHSET_ARCHIVE_INTERVAL","USER_TESTING_COINBASE_MATURITY","USER_TESTING_MIN_EDGE_BITS","USER_TESTING_PROOF_SIZE","UserTesting","Version","add_allowed_policy","base_edge_bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_shortname","clone","clone","clone","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","coinbase_maturity","create_pow_context","cut_through_horizon","default","deref","deref","deref","deref","deref","deref","deserialize","deserialize","difficulty_data_to_vector","eq","eq","fmt","fmt","fmt","foundation_json_sha256","from","from","from","from","from","from","from","from","from","get_allowed_policies","get_emitted_policy","get_epic_version","get_file_sha256","get_foundation_path","get_genesis_nonce","get_header_sync_timeout","get_policies","get_policy_config","initial_block_difficulty","initial_graph_weight","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","is_automated_testing_mode","is_floonet","is_mainnet","is_production_mode","is_user_testing_mode","max_block_weight","min_edge_bits","new","proofsize","serialize","serialize","set_epic_version","set_foundation_path","set_header_sync_timeout","set_mining_mode","set_policy_config","shortname","state_sync_threshold","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ts_data_to_vector","txhashset_archive_interval","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_alternative_path","version_major","version_minor","Error","ErrorKind","Keychain","RangeProof","Secp","Signature","Transaction","aggsig","as_fail","as_fail","backtrace","backtrace","borrow","borrow","borrow_mut","borrow_mut","build","cause","cause","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","kind","name","ne","proof","reward","secp_ser","serialize","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","tx_fee","type_id","type_id","0","0","0","0","0","add_signatures","calculate_partial_sig","create_secnonce","sign_from_key_id","sign_single","sign_with_blinding","verify_completed_sig","verify_partial_sig","verify_single","verify_single_from_commit","Append","Context","borrow","borrow_mut","builder","coinbase_input","from","initial_tx","input","into","keychain","output","partial_transaction","transaction","try_from","try_into","type_id","with_excess","LegacyProofBuilder","ProofBuild","ProofBuilder","borrow","borrow","borrow_mut","borrow_mut","check_output","check_output","check_output","create","drop","drop","from","from","into","into","new","new","private_nonce","private_nonce","private_nonce","proof_message","proof_message","proof_message","rewind","rewind_nonce","rewind_nonce","rewind_nonce","try_from","try_from","try_into","try_into","type_id","type_id","verify","zeroize","zeroize","output","output_foundation","output_foundation_proof","as_hex","blind_from_hex","commitment_from_hex","opt_string_or_u64","option_commitment_serde","option_seckey_serde","option_sig_serde","pubkey_serde","rangeproof_from_hex","sig_serde","string_or_u64","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","Cuckaroo","Cuckatoo","CuckooProof","Difficulty","DifficultyNumber","DifficultyNumberBasic","EdgeType","Error","LEN","MD5Proof","PoWContext","PoWType","ProgPow","ProgPowProof","Proof","ProofOfWork","RandomX","RandomXProof","add","as_fail","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","cmp","cuckaroo","cuckatoo","default","deserialize","div","edge_bits","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_dic_number","from_num","hash","hash_with_index","into","into","into","into","is_primary","is_secondary","kind","lean","md5","min","mine_genesis_block","mul","ne","ne","ne","new","nonce","num","number","partial_cmp","partial_cmp","pow_size","pow_solve","progpow","proof","proof_size","random","randomx","read","read","read","secondary_scaling","seed","serialize","serialize","serialize","set_header_nonce","short_id","sub","sub","to_difficulty","to_num","to_owned","to_owned","to_owned","to_string","to_string","total_difficulty","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","verify","verify_size","write","write","write","write","write_pre_pow","zero","zero","edge_bits","edge_bits","hash","mix","nonces","proof","CuckarooContext","borrow","borrow_mut","from","into","new_cuckaroo_ctx","pow_solve","set_header_nonce","try_from","try_into","type_id","verify","CuckatooContext","borrow","borrow_mut","byte_count","find_cycles_iter","from","into","new_cuckatoo_ctx","new_impl","pow_solve","set_header_nonce","set_header_nonce_impl","sipkey_hex","sipnode","try_from","try_into","type_id","verify","verify_impl","Lean","borrow","borrow_mut","find_cycles","from","into","new","set_header_nonce","trim","try_from","try_into","type_id","MD5Context","borrow","borrow_mut","edge_bits","from","into","max_sols","new_md5_ctx","pow_solve","proof_size","set_header_nonce","try_from","try_into","type_id","verify","PP_CPU","ProgPowContext","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","get_progpow_value","header","height","initialize","into","into","new_progpow_ctx","nonce","pow_solve","set_header_nonce","try_from","try_from","try_into","try_into","type_id","type_id","verify","RXContext","RX_STATE","SEEDHASH_EPOCH_BLOCKS","SEEDHASH_EPOCH_LAG","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","header","initialize","into","into","new_randomx_ctx","nonce","pow_solve","rx_current_seed_height","rx_epoch_end","rx_epoch_start","rx_next_seed_height","seed","set_header_nonce","try_from","try_from","try_into","try_into","type_id","type_id","verify","0","AsFixedBytes","BinReader","BinWriter","CorruptedData","CountError","DuplicateError","E","Err","Error","FixedLength","Full","Hash","HexError","IOErr","InvalidBlockVersion","IteratingReader","LEN","MAX","Ok","PMMRIndexHashable","PMMRable","ProtocolVersion","Readable","Reader","Result","SerializationMode","SortError","StreamingReader","TooLargeReadErr","UnexpectedData","VerifySortedAndUnique","Writeable","Writer","and","and_then","as_deref","as_deref_mut","as_elmt","as_fail","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","cause","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_from","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","compat","compat","contains","contains_err","context","context","context","copied","copied","decode","decode","default","description","deserialize","deserialize","deserialize","deserialize","deserialize_default","elmt_size","encode","encode_to","eq","eq","eq","eq","err","expect","expect_err","expect_u8","expect_u8","expect_u8","flatten","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_output","from_residual","hash","hash_with_index","into","into","into","into","into","into","into","into","into_err","into_iter","into_iter","into_ok","into_ok_or_err","is_err","is_ok","iter","iter_mut","len","local","local_db","map","map_err","map_or","map_or_else","ne","ne","ne","new","new","new","new","next","ok","or","or_else","partial_cmp","partial_cmp","product","protocol_version","protocol_version","protocol_version","protocol_version","protocol_version","read","read","read_bytes_len_prefix","read_bytes_len_prefix","read_bytes_len_prefix","read_fixed_bytes","read_fixed_bytes","read_fixed_bytes","read_i32","read_i32","read_i32","read_i64","read_i64","read_i64","read_multi","read_u16","read_u16","read_u16","read_u32","read_u32","read_u32","read_u64","read_u64","read_u64","read_u8","read_u8","read_u8","report","report","ser_vec","serialization_mode","serialization_mode","serialize","serialize","serialize","serialize","serialize_default","sum","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_string","to_string","total_bytes_read","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","value","verify_sorted_and_unique","with_context","with_context","write","write","write_bytes","write_fixed_bytes","write_fixed_bytes","write_i32","write_i64","write_u16","write_u32","write_u64","write_u8","0","0","1","expected","received","0","0"],"q":["epic_core","","","","","","","","","","","","","","","","","","","","","","","epic_core::consensus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::block::Error","","","","","","","epic_core::core::block::feijoada","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::block_sums","","","","","","","","","","","","","","","","","","","","","epic_core::core::committed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::committed::Error","","epic_core::core::compact_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::foundation","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::merkle_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::pmmr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::core::transactionepic_core::core::transaction::Error","","","","","epic_core::core::transaction::KernelFeatures","","","epic_core::core::transaction::Weighting","epic_core::genesis","","","epic_core::globalepic_core::libtx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::libtx::ErrorKind","","","","","epic_core::libtx::aggsig","","","","","","","","","","epic_core::libtx::build","","","","","","","","","","","","","","","","","","epic_core::libtx::proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::libtx::reward","","","epic_core::libtx::secp_ser","","","","","","","","","","","epic_core::libtx::secp_ser::opt_string_or_u64","","epic_core::libtx::secp_ser::option_commitment_serde","","epic_core::libtx::secp_ser::option_seckey_serde","","epic_core::libtx::secp_ser::option_sig_serde","","epic_core::libtx::secp_ser::pubkey_serde","","epic_core::libtx::secp_ser::sig_serde","","epic_core::libtx::secp_ser::string_or_u64","","epic_core::pow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::pow::Proof","","","","","","epic_core::pow::cuckaroo","","","","","","","","","","","","epic_core::pow::cuckatoo","","","","","","","","","","","","","","","","","","","epic_core::pow::lean","","","","","","","","","","","","epic_core::pow::md5","","","","","","","","","","","","","","","epic_core::pow::progpow","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::pow::randomx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_core::serepic_core::ser::Error","","","","","epic_core::ser::Result",""],"d":["All the rules required for a cryptocurrency to have reach …","Core types","Eliminates some of the verbosity in having iter and collect","Definition of the genesis block. Placeholder for now. #![…","Values that should be shared across all modules, without …","Library containing lower-level transaction building …","Generic macros used here and there to simplify and make …","Eliminates some of the verbosity in having iter and collect","","The proof of work needs to strike a balance between fast …","","","Serialization and deserialization layer specialized for …","Eliminate some of the boilerplate of deserialization …","Eliminate some of the boilerplate of serialization …","Allows the conversion of an expression that doesn’t …","Macro to clean up casting to edge type TODO: this macro …","Macro to clean up u64 unwrapping as u32","Macro to clean up u64 unwrapping","Macro to clean up u64 unwrapping as usize","Same as try_map_vec when thing is an iterator","Same as map_vec when the map closure returns Results. …","","Dampening factor to use for AR scale calculation.","Set the height (and its multiples) where the foundation …","Original reference edge_bits to compute difficulty factors …","Block Reward that will be assigned after we change from …","Progpow Minimum difficulty (used for saturation)","RandomX Minimum difficulty (used for saturation)","Height of the first epic block emission era (1440*334) = …","Height of the second epic block emission era (480960 + …","Height of the third epic block emission era (1157760 + …","Height of the fourth epic block emission era","Height of the fifth epic block emission era","After the epic block emission era 6, each era will last 4 …","Weight of an input when counted against the max block …","Weight of a kernel when counted against the max block …","Weight of an output when counted against the max block …","Block interval, in seconds, the network will tune its …","Average time span of the difficulty adjustment window","Clamp factor to use for difficulty adjustment Limit value …","Number of blocks before a coinbase matures and can be spent","Default number of blocks in the past when cross-block …","A day is 1440 blocks","Default Cuckatoo Cycle edge_bits, used for mining and …","Number of blocks used to calculate difficulty adjustments","Dampening factor to use for difficulty adjustment","A epic is divisible to 10^8 like bitcoin","Floonet: Height of the first epic block emission era","defines the block height at wich the difficulty adjustment …","Floonet first hard fork height","Set the height (and its multiples) where the foundation …","","Duration in height of the first foundation levy era …","After the first foundation levy era, we decrease the …","The foundation levy in each era","Freeman, smallest unit, takes a hundred million to make a …","Nominal height for standard time intervals, hour is 60 …","Minimal header information required for the Difficulty …","The initial difficulty at launch. This should be …","defines the block height at wich the difficulty adjustment …","Mainnet first hard fork height, set to happen around …","Set the height (and its multiples) where the foundation …","Total maximum block weight. At current sizes, this means a …","Microepic, a thousand of a milliepic","Milliepic, a thousand of a epic","Minimum scaling factor for AR pow, enforced in diff …","Minimum difficulty, enforced in diff retargetting avoids …","Progpow Minimum difficulty (used for saturation)","RandomX Minimum difficulty (used for saturation)","Progpow Minimum difficulty until fork (used for saturation)","RandomX Minimum difficulty until fork (used for saturation)","Clamp factor to use for difficulty adjustment Limit value …","Dampening factor to use for difficulty adjustment","Cuckoo-cycle proof size (cycle length)","Clamp factor to use for difficulty adjustment Limit value …","Dampening factor to use for difficulty adjustment","Cuckaroo proof-of-work edge_bits, meant to be ASIC …","Default number of blocks in the past to determine the …","defines the block height at wich the difficulty adjustment …","AutomatedTesting and UserTesting first hard fork height.","unit difficulty, equal to …","A week is 10_080 blocks","A year is 524_160 blocks","Check if the current height is a foundation height, if it…","Count, in units of 1/100 (a percent), the number of “…","Block hash, ZERO_HASH when this is a sythetic entry.","Compute the total reward generated by each block in a …","","","limit value to be within some factor from a goal","","","","","","","Sum all the foundation reward, to send one","Move value linearly toward a goal","Network difficulty or next difficulty to use","Get the height where the difficulty patch will be added.","","Get the height of the first epic hard fork","Floonet: Compute the total reward generated by each block …","","Get the height where the foundation coinbase will be added …","Get the current position of the foundation coinbase in the …","","Constructor from a difficulty and secondary factor, …","Constructor from a timestamp and difficulty, setting a …","Compute weight of a graph as number of siphash bits …","Compute possible block version at a given height","","Check if the given height is a foundation height. A …","Whether the header is a secondary proof of work","Mainnet: Compute the total reward generated by each block …","","Default constructor","Computes the proof-of-work difficulty that the next block …","changes the header info with new difficulty era1 for the …","calculates the next difficulty level for progpow and …","","timespan of the previous block of the same algorithm type","Get the total mining reward (with fee) based on the height","Get the mining reward at current height","Get the current value of the mining reward + foundation …","Compute the foundation levy for each block.","Ratio the secondary proof of work should take over the …","Factor by which the secondary proof of work difficulty …","Network secondary PoW factor or factor to use","Timestamp of the header, 1 when not used (returned info)","returns the median timestamp from last 6 mined blocks","","The total overage at a given height. Variable due to …","","","","Check whether the block version is valid at a given …","Common errors","Human readable represenation of amount is invalid","Common method for parsing an amount from human-readable, …","Common method for converting an amount to a human-readable …","","","Blocks and blockheaders","BlockSums per-block running totals for utxo_sum and …","","","","The Committed trait and associated errors.","Compact Blocks.","","","","","Hash Function","short ids for compact blocks","","Merkle Proofs","","Persistent and prunable Merkle Mountain Range …","","Transactions","","","","","A block as expressed in the MimbleWimble protocol. The …","Block header, fairly standard compared to other …","Same as above but for the coinbase part of a block, …","Error when verifying kernel sums via committed trait.","Validation error relating to cut-through. Specifically the …","Errors thrown by Block validation","Header entry for storing in the header MMR. Note: we hash …","Some type safety around header versioning.","","The total kernel sum on the block header is wrong","Kernel not valid due to lock_height exceeding block header …","The sum of output minus input commitments does not match …","Underlying keychain related error","Underlying Merkle proof error","Other unspecified error condition","Underlying Secp256k1 error (signature validation or …","Underlying serialization error.","Restrict block total weight.","Underlying tx related error","Block which does lightweight validation as part of …","Block header which does lightweight validation as part of …","Block weight (based on inputs|outputs|kernels) exceeded.","","","","","","","","","","","","","","","","","","The bottles used in the feijoada algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","Matches any output with a potential spending input, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a new block ready to mine from the header of the …","Builds a new block ready to mine from the header of the …","The hash of the underlying block.","","The hash of the underlying block.","","The header with metadata and commitments to the rest of …","Height of this block since the genesis block (height 0)","Hydrate a block from a compact block. Note: caller must …","Get inputs","","Get inputs mutable","","","","","","","","Total size of the kernel MMR after applying this block","Merklish root of all transaction kernels in the TxHashSet","Get kernels","","Get kernels mut","","","","","Constructor taking the provided version.","Builds a new block from the header of the previous block, …","Total size of the output MMR after applying this block","Merklish root of all the commitments in the TxHashSet","Get outputs","","Get outputs mutable","","","The policy that generated this block","Proof of work and related","Return the pre-pow, unhashed Let the cuck(at)oo …","","Hash of the block previous to this in the chain.","Root hash of the header MMR at the previous header.","Merklish root of all range proofs in the TxHashSet","","","","","","","","","","Generate a short_id via the following -","Generate a short_id via the following -","Generate a short_id via the following -","Timestamp at which the block was built.","","","","","","Total difficulty accumulated by the proof of work on this …","Sum of all fees (inputs less outputs) in the block","Total kernel offset for the chain state up to and …","Total accumulated sum of kernel offsets since genesis …","The “total overage” to use when verifying the kernel …","","","","","","","","","","","","","","","","","","","","","","Validates all the elements in a block that can be checked …","“Lightweight” validation that we can perform quickly …","Validate the coinbase.body.outputs generated by miners. …","Version of the block","Consumes this block and returns a new block with the …","Build a new empty block from a specified header","Consumes this block and returns a new block with the …","","","","","Write the pre-hash portion of the header","","","","","","","","","","","","","","","","The ideal proportion each block should have according to …","The configuration for the policy on accepted blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The output_sum and kernel_sum for a given block. This is …","","","","","","","","","","","","","The sum of all kernels.","","","","","","The sum of the unspent outputs.","","Implemented by types that hold inputs and outputs (and …","Errors from summing and verifying kernel excesses via …","Committed overage (fee or reward) is invalid","Kernel sums do not equal output sums.","Keychain related error.","Secp related error.","","","","","","","","","","","","","","","","","","","Vector of input commitments to verify.","","Vector of kernel excesses to verify.","","","Vector of output commitments to verify.","","Gathers commitments and sum them.","Utility to sum positive and negative commitments, …","Gather the kernel excesses and sum them.","Utility function to take sets of positive and negative …","","","","","","Verify the sum of the kernel excesses equals the sum of …","","","Compact representation of a full block. Each …","Container for full (full) outputs and kernels and kern_ids …","Compackt block which does lightweight validation as part …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The header with metadata and commitments to the rest of …","","","","","Get full (coinbase) kernels","List of full kernels - specifically the coinbase kernel(s)","Get kern_ids","List of transaction kernels, excluding those in the full …","Nonce for connection specific short_ids","Get full (coinbase) outputs","List of full outputs - specifically the coinbase output(s)","","","","Generate a short_id via the following -","","","","","","","","","","","","","","Response to build a coinbase output.","Size in bytes of each foundation coinbase (Output + Kernel)","","","","","","","","","","","","","Kernel","Key Id","Load the foundation coinbase relative to the height of the …","Output","Save the serialization of the foundation coinbases in the …","","Serialize a vector of foundation coinbases in a series of …","","","","","Implementing this trait enables the default hash …","A hash to uniquely (or close enough) identify one of the …","Serializer that outputs a hash of the serialized object","A trait for types that have a canonical hash","A hash is 32 bytes.","A hash consisting of all zeroes, used as a sentinel. No …","","Returns a byte slice of the hash contents.","","","","","","","","","","","","","","","","","Consume the <code>HashWriter</code>, outputting its current hash into a …","","","","","Convert hex string back to hash.","Builds a Hash from a byte vector. If the vector is too …","Obtain the hash of the object","","","","","","","","","","","Consume the <code>HashWriter</code>, outputting a <code>Hash</code> corresponding to …","","","","","","","","Generate a short_id via the following -","Convert a hash to hex string format.","","","Most significant 64 bits","Converts the hash to a byte vector","","","","","","","","","The size of a short id used to identify …","Short id for identifying inputs/outputs/kernels","A trait for types that have a short_id …","","","","","","","","","","","","","","Build a new short_id from a byte slice","Reconstructs a switch commit hash from a hex string.","","","","","","","","The short_id of a kernel uses a hash built from the …","Generate a short_id via the following -","Hex string representation of a short_id","","","","","","The zero short_id, convenient for generating a short_id …","A Merkle proof that proves a particular element exists in …","Merkle proof errors.","Merkle proof root hash does not match when attempting to …","","","","","","","","","","","","","","","","","","","","The “empty” Merkle proof.","","","","","","","Convert hex string representation back to a Merkle proof …","","","The size of the MMR at the time the proof was created.","","","The sibling path from the leaf up to the final sibling …","","","Serialize the Merkle proof as a hex string (for api json …","","","","","","","","","Verifies the Merkle proof against the provided root hash, …","","Storage backend for the MMR, just needs to be indexed by …","Prunable Merkle Mountain Range implementation. All …","Readonly view of a PMMR.","Rewindable (but still readonly) view of a PMMR.","Simple/minimal/naive MMR backend implementation backed by …","Append the provided Hashes to the backend storage, and …","","Build a new prunable Merkle Mountain Range pre-initialized …","Build a new readonly PMMR pre-initialized to last_pos with …","Build a new readonly PMMR pre-initialized to last_pos with …","Reference to the underlying storage backend.","Takes a single peak position and hashes together all the …","Gets the position of the rightmost node (i.e. leaf) …","The height of a node in a full binary tree from its …","Gets the position of the rightmost node (i.e. leaf) …","","","","","","","","","","","","","","","Backend elements (optional, possible to just store hashes).","Creates a temp file containing the contents of the …","","Debugging utility to print information about the MMRs. …","Debugging utility to print information about the MMRs. …","For debugging purposes so we can see how compaction is …","Prints PMMR statistics to the logs, used for debugging.","","Helper function which returns un-pruned nodes from the …","Calculates the positions of the parent and sibling of the …","For a given starting position calculate the parent and …","","","","","","Get underlying data by insertion position.","Get the data element at provided position in the MMR.","Get the data element at provided position in the MMR.","Get the data element at provided position in the MMR.","","Get a Data Element by original insertion position …","","Get a Hash  by original insertion position (ignoring the …","","Get a Hash by insertion position.","Get the hash at provided position in the MMR.","Get the hash at provided position in the MMR.","","Helper function to get the last N nodes inserted, i.e. the …","Vec of hashes for the PMMR (both leaves and parents).","Returns the pmmr index of the nth inserted element","","","","","Is the MMR empty?","Is the MMR empty?","Is the MMR empty?","Is this position a leaf in the MMR? We know the positions …","Is the node at this pos the “left” sibling of its …","The last position in the PMMR","Iterator over current (unpruned, unremoved) leaf insertion …","Iterator over current (unpruned, unremoved) leaf insertion …","Iterator over current (unpruned, unremoved) leaf insertion …","","Iterator over current (unpruned, unremoved) leaf positions.","Iterator over current (unpruned, unremoved) leaf positions.","Iterator over current (unpruned, unremoved) leaf positions.","","Build a Merkle proof for the element at the given position.","The number of leaves in a MMR of the provided size.","Number of leaves","Number of leafs in the MMR","Number of leaves in the MMR","Build a new prunable Merkle Mountain Range using the …","Build a new readonly PMMR.","Build a new readonly PMMR.","Instantiates a new empty vec backend.","Instantiate a new empty “hash only” vec backend.","Returns the path from the specified position up to its …","return (peak_map, pos_height) of given 0-based node pos …","sizes of peaks and height of next node in mmr of given size","Gets the postorder traversal index of all peaks in a MMR …","Returns a vec of the peaks of this MMR.","Returns a vec of the peaks of this MMR.","Returns a vec of the peaks of this MMR.","Prunes (removes) the leaf from the MMR at the specified …","Push a new element into the MMR. Computes new related …","Build a “readonly” view of this PMMR.","Release underlying datafiles and locks","","Remove Hash by insertion position. An index is also …","","Positions of removed elements (is this applicable if we do …","Rewind the backend state to a previous position, as if all …","Rewind the PMMR to a previous position, as if all push …","Note: We only rewind the last_pos, we do not rewind the …","","Computes the root of the MMR. Find all the peaks in the …","Computes the root of the MMR. Find all the peaks in the …","Computes the root of the MMR. Find all the peaks in the …","Size of this vec backend in hashes.","Saves a snapshot of the rewound utxo file with the block …","Saves a snapshot of the MMR tagged with the block hash. …","","","","","","","","","","","","","","","Total size of the tree, including intermediary nodes and …","Total size of the tree, including intermediary nodes and …","Total size of the tree, including intermediary nodes and …","Walks all unpruned nodes in the MMR and revalidate all …","Error when sums do not verify correctly during tx …","Tx represents a block (max block weight).","Tx representing a tx with artificially limited max_weight. …","Tx represents a tx (max block weight, accounting for …","A coinbase kernel.","A coinbase output.","Error when verifying kernel sums via committed trait.","Validation error relating to cut-through (tx is spending …","Errors thrown by Transaction validation","A kernel with an explicit lock height (and fee).","Signature verification error.","A transaction input.","Validation error relating to kernel features. It is …","Validation error relating to output features. It is …","Returns if the value hidden within the a RangeProof …","Various tx kernel variants.","The sum of output minus input commitments does not match …","Underlying keychain related error","Error originating from an invalid lock-height","Error originating from an invalid Merkle proof","No max weight limit (skip the weight check).","Output for a transaction, defining the new ownership of …","Various flavors of tx kernel.","An output_identifier can be build from either an input <em>or</em> …","Plain kernel (the default for Epic txs).","Plain output (the default for Epic txs).","Range proof validation error","Underlying Secp256k1 error (signature validation or …","Underlying serialization error.","Restrict tx total weight.","A transaction","TransactionBody is a common abstraction for transaction …","A proof that a transaction sums to zero. Includes both the …","Enum of possible tx weight verification options -","Aggregate a vec of txs into a multi-kernel tx with …","","","","Conversion for backward compatibility.","Underlying (u8) value representing this kernel variant. …","Batch signature verification.","Batch validates the range proofs using the commitments","The transaction body - inputs/outputs/kernels","Calculate transaction weight","Calculate weight of transaction using block weighing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The commit referencing the output being spent.","The homomorphic commitment representing the output amount","Output commitment","The input commitment which <em>partially</em> identifies the output …","Commitment for the output","Our commitment.","Matches any output with a potential spending input, …","Attempt to deaggregate a multi-kernel transaction based on …","","","","","","","","","","","","","","","Build an empty tx kernel with zero values.","Creates a new empty transaction (no inputs or outputs, …","Creates a new empty transaction (no inputs or outputs, …","","","","","","","","","","Return the excess commitment for this tx_kernel.","Remainder of the sum of all transaction commitments. If …","The signature proving the excess is a valid public key, …","Options for a kernel’s structure or use","The features of the output being spent. We will check …","Options for an output’s structure or use","Output features (coinbase vs. regular transaction output) …","Total fee for a TransactionBody is the sum of fees of all …","Total fee for a transaction is the sum of fees of all …","Can be used to compare txs by their fee/weight ratio. Don…","","","","","","","","","","","","","","","","","","","","","","","","","","","Build an output_identifier from an existing input.","Build an output_identifier from an existing output.","","","","","","","","","","","","","","","Creates a new transaction body initialized with the …","Get inputs","List of inputs spent by the transaction.","","","Get inputs mutable","","","","","","","","","","","","Converts this identifier to a full output, provided a …","Is this a coinbase kernel?","Is this a coinbase kernel?","Is this a coinbase input?","Is this a coinbase output?","Is this a coinbase kernel?","Is this a height locked kernel?","Is this a height locked kernel?","Is this a plain kernel?","Is this a plain kernel?","Is this a plain input?","Is this a plain output?","Is this a plain kernel?","msg = hash(features)                       for coinbase …","Get kernels","List of kernels that make up this transaction (usually a …","","","Get kernels mut","Lock height of a body is the max lock height of the …","Lock height of a transaction is the max lock height of the …","The msg signed as part of the tx kernel. Based on kernel …","","","","Creates a new transaction initialized with the provided …","Build a new input from the data required to identify and …","Build a new output_identifier.","The kernel “offset” k2 excess is k1G after splitting …","Get outputs","List of outputs the transaction produces.","","","Get outputs mutable","Total overage across all kernels.","","","","Range proof for the output","A proof that the commitment is in the right range","","","","","","","","","Builds a new TransactionBody replacing any existing …","Builds a new transaction replacing any existing kernels …","","","","","","","","","","Generate a short_id via the following -","Generate a short_id via the following -","Generate a short_id via the following -","Generate a short_id via the following -","Generate a short_id via the following -","Sort the inputs|outputs|kernels.","convert an output_identifier to hex string format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate transaction weight","Calculate transaction weight as a block","","","","","","","","","","","Validates all relevant parts of a transaction body. Checks …","Validates all relevant parts of a fully built transaction. …","“Lightweight” validation that we can perform quickly …","“Lightweight” validation that we can perform quickly …","Verify the transaction proof validity. Entails handling …","Verify we have no invalid outputs or kernels in the …","Validates the range proof using the commitment","Calculate transaction weight from transaction details. …","Calculate transaction weight from transaction details","Calculate transaction weight using block weighing from …","Build an empty tx kernel with the provided kernel features.","Builds a new body with the provided inputs added. Existing …","Builds a new transaction with the provided inputs added. …","Builds a new TransactionBody with the provided kernel …","Builds a new transaction with the provided kernel added. …","Creates a new transaction using this transaction as a …","Builds a new TransactionBody with the provided output …","Builds a new transaction with the provided output added. …","Protocol version may increment rapidly for other unrelated …","","","","","","","","","","","","","Plain kernels have fees.","Height locked kernels have fees.","Height locked kernels have lock heights.","","Genesis block definition for development networks. The …","Placeholder for floonet genesis block, will definitely …","Placeholder for mainnet genesis block, will definitely …","Automated testing coinbase maturity","Automated testing edge_bits","Automated testing proof size","For CI testing","The mining parameter mode","Trigger compaction check on average every day for all …","","Types of chain a server can run with, dictates the genesis …","ASIC-resistant Cuckaroo","ASIC-friendly Cuckatoo","Classic Cuckoo","Store the current epic version being executed","Foonet coinbase maturity","","The path to the file that contains the foundation","Protocol testing network","Store the timeout for the header sync","","Main production network","Constant that expresses defunct peer timeout in seconds to …","The policy parameters","PoW context type to instantiate","Define these here, as they should be developer-set, not …","PoW test mining and verifier context","If a peer’s last updated difficulty is 2 hours ago and …","Testing cut through horizon in blocks","Testing initial block difficulty","Testing initial graph weight","Testing max_block_weight (artifically low, just enough to …","Testing state sync threshold in blocks","Number of blocks to reuse a txhashset zip for (automated …","Number of blocks to reuse a txhashset zip for.","User testing coinbase maturity","User testing edge_bits","User testing proof size","For User testing","Strcut that store the major and minor release versions","","Reference edge_bits used to compute factor on higher …","","","","","","","","","","","","","","","","","","","Short name representing the current chain type (“floo”…","","","","","","","","","","","","","","","","","","","Coinbase maturity for coinbases to be spent","Return either a cuckoo context or a cuckatoo context …","Horizon at which we can cut-through and do full local …","","","","","","","","","","Converts an iterator of block difficulty data to more a …","","","","","","","","","","","","","","","","","","Get the version of the current epic executable","","Get the current path to the foundation.json file (file …","Helper function to get a nonce known to create a valid POW …","Get the current Timeout without the verification of the …","","Get the policy configuration that is being used by the …","Initial mining difficulty","Initial mining secondary scale","","","","","","","","","","","","","","","","Are we in automated testing mode?","Are we in floonet? Note: We do not have a corresponding …","Are we for real?","Are we in production mode? Production defined as a live …","Are we in user testing mode?","Maximum allowed block weight.","The minimum acceptable edge_bits","Create a new Version Struct","The proofsize","","","Set the version of the current epic executable","Set the path to the foundation.json file (file with the …","Set the current Timeout without the verification of the …","Set the mining mode","Set the policy configuration that will be used by the …","Short name representing the chain type (“floo”, “main…","Threshold at which we can request a txhashset (and full …","","","","","","","","","","","","","","","","","","","","","","","Number of blocks to reuse a txhashset zip for.","","","","","","","","","","Check if the foundation.json exists in the directory …","Store the major release number of an application","Store the minor release number of an application","Lib tx error definition","Libwallet error types","Keychain error","Rangeproof error","SECP error","Signature error","Transaction error","Aggregated Signature functions used in the creation of …","","","","","","","","","Utility functions to build Epic transactions. Handles the …","","","","","","","","","","","","","","","","","","","","","","","","Return errorkind","","","Rangeproof library functions","Builds the blinded output and related signature proof for …","Sane serialization &amp; deserialization of cryptographic …","","","","","","","","","Transaction fee calculation","","","","","","","","Adds signatures","Calculates a partial signature given the signer’s secure …","Creates a new secure nonce (as a SecretKey), guaranteed to …","Creates a single-signer aggsig signature from a key id. …","Just a simple sig, creates its own nonce if not provided","Just a simple sig, creates its own nonce, etc","Verifies a completed (summed) signature, which must …","Verifies a partial signature from a public key. All nonce …","Verifies an aggsig signature","Simple verification a single signature from a commitment. …","Function type returned by the transaction combinators. …","Context information available to transaction combinators.","","","The bulletproof builder","Adds a coinbase input spending a coinbase output.","","Sets an initial transaction to add to when building a new …","Adds an input with the provided value and blinding key to …","","The keychain used for key derivation","Adds an output with the provided value and key identifier …","Takes an existing transaction and partially builds on it.","Builds a complete transaction.","","","","Adds a known excess value on the transaction being built. …","The legacy proof builder, used before the first hard fork","Used for building proofs and checking if the output …","The new, more flexible proof builder","","","","","Check if the output belongs to this keychain","","","Create a bulletproof","","","","","","","Creates a new instance of this proof builder","Creates a new instance of this proof builder","Create a BP nonce that blinds the private key","","","Create a BP message","Message bytes: 0: reserved for future use 1: wallet type …","Message bytes: 0-3: 0 4-19: derivation path All outputs …","Rewind a rangeproof to retrieve the amount, derivation …","Create a BP nonce that will allow to rewind the derivation …","","","","","","","","","Verify a proof","","","output a reward output","","","Seralizes a byte string into hex","Creates a BlindingFactor from a hex string","Creates a Pedersen Commitment from a hex string","As above, for Options","Serializes an Optionsecp::Commitment to and from hex","Serializes an Optionsecp::SecretKey to and from hex","Serializes an Optionsecp::Signature to and from hex","Serializes a secp PublicKey to and from hex","Creates a RangeProof from a hex string","Serializes a secp::Signature to and from hex","Used to ensure u64s are serialised in json as strings by …","deser from ‘null’, literal or string","serialize into string or none","","","","","","","","","","","deserialize from either literal or string","serialize into a string","","","A Cuck(at)oo Cycle proof of work, consisting of the …","The difficulty is defined as the maximum target divided by …","","","Operations needed for edge type (going to be u32 or u64)","Cuckatoo solver or validation error","Difficulty is 8 bytes.","","Generic trait for a solver/verifier providing common …","","","","A proof of work","Block header information pertaining to the proof of work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of Cuckaroo Cycle, based on Cuckoo Cycle …","Implementation of Cuckatoo Cycle designed by John Tromp.","","","","The edge_bits used for the cuckoo cycle size on this proof","","","","","","","","","","","","","","","","","","Convert a <code>u32</code> into a <code>Difficulty</code>","","","","","","","Whether this proof of work is for the primary algorithm …","Whether this proof of work is for the secondary algorithm …","Return errorkind","Lean miner for Cuckatoo Cycle","Implementation of MD5 by Yuri Albuquerque","Difficulty of MIN_DIFFICULTY","Mines a genesis block using the internal miner","","","","","Builds a proof with provided nonces at default edge_bits","Nonce increment used to mine this block.","","","","","Runs a proof of work computation over the provided block …","find solutions using the stored parameters and header","","Proof of work data.","Returns the proof size","Builds a proof with random POW data, needed so that tests …","","","","","Variable difficulty scaling factor fo secondary proof of …","Randomx seed.","","","","Sets the header along with an optional nonce at the end …","Generate a short_id via the following -","","","Maximum difficulty this proof of work can achieve","Converts the difficulty into a u64","","","","","","Total accumulated difficulty since genesis block","","","","","","","","","","","","","Difficulty unit, which is the graph weight of minimal graph","Verify a solution with the stored parameters","Validates the proof of work of a given header, and that …","","","Write implementation, can’t define as trait impl as we …","","Write the pre-hash portion of the header","Difficulty of zero, which is invalid (no target can be …","Builds a proof with all bytes zeroed out","Power of 2 used for the size of the cuckoo graph","","","","The nonces","","Cuckatoo cycle context. Only includes the verifier for now.","","","","","Instantiate a new CuckarooContext as a PowContext. Note …","","","","","","","Cuckatoo solver context","","","Return number of bytes used by the graph","Simple implementation of algorithm","","","Instantiate a new CuckatooContext as a PowContext. Note …","New Solver context","","","Set the header and optional nonce in the last part of the …","Get a siphash key as a hex string (for display convenience)","Return siphash masked for type","","","","","Verify that given edges are ascending and form a cycle in …","Lean miner implementation aiming to be as short and simple …","","","Finds the Cuckatoo Cycles on the remaining edges. …","","","Instantiates a new lean miner based on some Cuckatoo …","Sets the header and nonce to seed the graph","Trim edges in the Cuckatoo graph. This applies multiple …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Useful marker trait on types that can be sized byte slices","Utility to read from a binary source","Utility wrapper for an underlying byte Writer. Defines …","Data wasn’t in a consumable format","Incorrect number of elements (when deserializing a vec via …","Inputs/outputs/kernels must be unique.","The type of element actually stored in the MMR data file. …","Contains the error value","Possible errors deriving from serializing or deserializing.","Trait for types that serialize to a known fixed length.","Serialize everything sufficiently to fully reconstruct the …","Serialize the data that defines the object","Error from from_hex deserialization","Wraps an io error produced when reading or writing","Block header version (hard-fork schedule).","Reader that exposes an Iterator interface.","The length in bytes","The max protocol version supported.","Contains the success value","Generic trait to ensure PMMR elements can be hashed with …","Trait for types that can be added to a PMMR.","Protocol version for serialization/deserialization. Note: …","Trait that every type that can be deserialized from binary …","Implementations defined how different numbers and binary …","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Signal to a serializable object how much of its data …","Inputs/outputs/kernels must be sorted lexicographically.","A reader that reads straight off a stream. Tracks total …","When asked to read too much data","Expected a given value that wasn’t found","Collections of items must be sorted lexicographically and …","Trait that every type that can be serialized as binary …","Implementations defined how different numbers and binary …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","Convert the pmmrable into the element to be stored in the …","","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","","","","Returns <code>true</code> if the result is an <code>Ok</code> value containing the …","Returns <code>true</code> if the result is an <code>Err</code> value containing the …","","","","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","","","Constructor for BinWriter with default “local” …","","Deserializes a Readable from any std::io::Read …","","","","Deserialize a Readable based on our default “local” …","Size of each element if “fixed” size. Elements are “…","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Consumes a byte from the reader, producing an error if it …","","","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","","","","","","","","","","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","Hash with a given index","","","","","","","","","Returns the contained <code>Err</code> value, but never panics.","","Returns a consuming iterator over the possibly contained …","Returns the contained <code>Ok</code> value, but never panics.","Returns the <code>Ok</code> value if <code>self</code> is <code>Ok</code>, and the <code>Err</code> value if …","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Ok</code>.","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","The length in bytes","Our default “local” protocol version. This protocol …","We need to specify a protocol version for our local …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying a fallback function …","","","","Constructor to create a new iterating reader for the …","Constructor for a new BinReader for the provided source …","Create a new streaming reader with the provided underlying …","Wraps a standard Write in a new BinWriter","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Protocol version for version specific serialization rules.","Access to underlying protocol version to support version …","","","","Reads the data necessary to this Readable from the …","","Read a u64 len prefix followed by that number of exact …","Read a variable size vector from the underlying Read. …","Read a variable size vector from the underlying stream. …","Read a fixed number of bytes from the underlying reader.","Read a fixed number of bytes.","Read a fixed number of bytes.","Read a i32 from the underlying Read","","","Read a i64 from the underlying Read","","","Reads multiple serialized items into a Vec.","Read a u16 from the underlying Read","","","Read a u32 from the underlying Read","","","Read a u64 from the underlying Read","","","Read a u8 from the underlying Read","","","","","Utility function to serialize a writeable directly in …","The mode this serializer is writing in","","Serializes a Writeable into any std::io::Write …","","","","Serialize a Writeable according to our default “local” …","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","","","","Returns the total bytes read via this streaming reader.","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","","","","","","","","","","","","","","","","","","","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","Protocol version as u32 to allow for convenient exhaustive …","Verify a collection of items is sorted and all unique.","","","Write the data held by this Writeable to the provided …","","Writes a variable number of bytes. The length is encoded …","Writes a fixed number of bytes from something that can …","","Writes a u32 as bytes","Writes a i64 as bytes","Writes a u16 as bytes","Writes a u32 as bytes","Writes a u64 as bytes","Writes a u8 as bytes","","","","What we wanted","What we got","",""],"i":[0,0,0,0,0,0,0,0,1,0,2,3,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,4,0,4,4,4,4,4,4,0,0,4,0,4,0,0,4,0,0,4,4,4,0,0,4,0,4,0,4,4,0,0,0,0,4,0,0,0,0,0,0,4,4,0,4,0,4,4,4,0,0,5,0,0,5,5,0,0,5,5,5,0,0,5,5,0,5,0,0,5,0,5,0,5,0,5,5,5,6,0,0,7,7,7,0,0,0,7,7,7,7,7,7,7,7,7,7,7,0,0,7,8,7,7,9,10,7,11,6,8,12,9,10,7,11,6,8,12,8,7,7,6,8,12,7,6,8,12,7,6,8,12,7,6,8,12,7,6,8,12,7,6,8,12,12,6,8,12,8,7,6,8,0,7,7,11,6,8,12,9,10,7,7,7,7,7,7,11,6,8,8,12,12,12,12,11,8,12,8,12,8,12,12,12,12,9,10,7,11,6,8,12,8,8,12,12,12,7,7,6,8,6,12,8,8,12,12,12,8,6,8,8,8,8,8,8,8,9,10,11,6,8,12,6,8,12,11,8,12,8,7,6,8,12,7,8,12,8,8,8,9,10,7,11,6,8,12,9,10,7,11,6,8,12,9,10,7,11,6,8,12,12,12,12,8,12,12,12,11,6,8,12,8,13,14,15,16,17,18,19,0,0,20,20,0,0,0,0,0,0,20,20,21,22,23,21,20,22,23,21,20,24,22,23,21,20,23,21,20,23,21,20,23,21,20,23,21,20,23,21,20,20,0,21,23,21,20,23,21,20,23,21,20,22,23,21,20,20,0,20,23,22,23,21,20,0,23,21,0,20,21,25,23,21,20,23,21,20,20,22,23,21,20,20,22,23,21,20,22,23,21,20,23,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,27,28,27,27,28,27,28,0,28,0,27,27,27,27,27,28,29,30,0,0,0,31,32,33,31,32,33,32,33,32,33,32,33,32,33,32,33,32,33,32,33,31,32,33,33,33,33,33,33,31,32,33,33,33,32,33,32,33,33,32,31,32,33,33,32,33,31,32,33,31,32,33,31,32,33,32,33,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,0,34,0,34,34,34,34,0,0,0,0,35,0,35,35,35,36,35,36,35,35,35,35,35,35,35,35,36,35,35,35,36,35,35,36,35,35,35,37,35,35,35,35,35,35,35,35,36,35,36,35,35,35,36,35,36,35,35,35,35,35,35,35,36,35,36,35,36,35,35,36,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,38,38,38,38,38,38,38,38,0,0,40,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,41,41,41,41,40,41,40,41,40,41,41,40,41,41,41,41,41,41,41,41,40,41,40,41,40,41,40,41,41,41,0,0,0,0,0,42,43,44,45,46,46,44,0,0,0,44,45,46,43,44,45,46,43,43,43,43,43,43,43,43,42,43,44,44,42,44,43,45,0,0,43,44,45,46,43,42,44,45,46,43,42,43,42,43,42,44,45,43,45,43,0,44,45,46,43,44,45,46,0,0,44,42,44,45,43,42,44,45,43,44,0,42,44,43,44,45,46,43,43,0,0,0,0,44,45,46,44,44,44,42,43,42,43,43,42,44,46,43,44,45,46,43,42,44,43,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,44,47,48,48,48,49,50,47,47,0,49,47,0,47,47,47,0,47,47,47,47,48,0,0,0,49,50,47,47,47,47,0,0,0,0,0,51,52,47,49,49,51,52,53,54,54,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,51,55,52,55,52,56,55,52,56,0,0,54,53,47,49,47,51,54,53,55,50,52,56,51,52,51,54,53,49,47,51,54,53,55,50,52,56,51,51,51,51,55,52,56,54,53,53,49,47,47,51,54,53,55,50,52,56,49,47,47,47,47,47,51,48,54,53,55,50,52,56,56,50,56,56,50,51,51,53,55,55,52,52,56,51,53,55,52,56,54,53,54,54,53,53,49,47,51,48,54,53,53,55,50,52,56,56,49,51,55,50,52,49,51,49,51,55,50,52,49,53,54,54,53,53,54,53,51,49,47,56,53,55,56,53,53,54,54,53,53,53,51,55,52,52,52,49,51,54,53,55,50,52,56,54,53,49,47,51,54,53,55,50,52,56,51,53,55,52,56,54,56,49,47,51,48,54,53,55,50,52,56,47,49,47,51,48,54,53,55,50,52,56,49,47,51,48,54,53,55,50,52,56,53,53,49,47,51,48,54,53,55,50,52,56,54,53,54,53,51,54,52,54,53,54,51,54,53,54,53,53,54,53,49,51,54,53,55,50,52,56,57,58,59,60,61,62,63,63,64,0,0,0,0,0,0,65,0,0,0,0,66,66,66,0,0,0,0,65,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,66,67,68,69,70,71,72,73,65,66,67,68,69,70,71,72,73,0,65,66,73,65,66,73,65,66,73,65,66,73,65,66,73,65,66,73,0,0,0,65,67,68,69,70,71,72,65,66,0,65,66,65,66,73,0,65,66,67,68,69,70,71,72,73,0,0,0,0,0,0,0,0,0,0,0,67,68,69,70,71,72,65,66,67,68,69,70,71,72,73,0,0,0,0,0,0,0,73,0,65,66,0,0,0,0,0,65,0,65,66,73,65,66,67,68,69,70,71,72,73,65,66,67,68,69,70,71,72,73,0,0,65,66,67,68,69,70,71,72,73,0,73,73,0,0,74,74,74,74,74,0,75,74,75,74,75,74,75,74,0,75,74,74,74,74,74,74,74,74,74,75,75,74,74,75,75,75,75,75,75,74,75,74,75,74,74,0,0,0,74,74,75,74,75,74,75,74,0,75,74,76,77,78,79,80,0,0,0,0,0,0,0,0,0,0,0,0,81,81,81,0,81,0,0,81,81,0,0,0,81,81,81,0,0,0,0,82,83,82,83,84,82,83,0,82,83,82,83,82,83,82,83,84,82,83,84,82,83,0,84,82,83,82,83,82,83,82,83,0,82,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,85,0,0,0,0,0,86,85,0,0,20,85,0,0,20,85,86,87,87,87,86,88,85,87,86,88,85,87,86,88,85,86,88,85,86,88,85,86,88,85,86,88,85,86,88,85,86,0,0,88,86,86,88,86,88,85,87,87,86,86,88,85,87,87,87,87,86,88,85,86,86,85,85,87,86,88,85,88,88,87,0,0,86,0,86,86,88,85,85,88,86,89,86,85,0,90,0,88,85,85,0,86,88,85,88,88,86,88,85,90,85,86,86,88,86,86,88,85,87,86,88,87,86,88,85,87,86,88,85,87,86,88,85,86,90,0,86,88,88,85,88,86,85,91,92,93,94,91,92,0,95,95,95,95,0,95,95,95,95,95,95,0,96,96,96,96,96,96,0,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,0,98,98,98,98,98,98,98,0,0,99,100,99,100,100,99,100,0,99,99,100,99,100,0,99,99,99,99,100,99,100,99,100,99,0,0,0,0,101,102,101,102,102,101,102,101,102,101,102,0,101,101,0,0,0,0,101,101,101,102,101,102,101,102,101,103,0,0,0,104,104,104,105,106,0,0,107,107,104,104,104,0,108,103,106,0,0,0,0,0,0,0,104,0,104,104,0,0,0,106,106,106,106,105,104,106,106,109,110,111,112,104,107,103,106,109,110,111,112,104,107,103,106,106,104,104,107,103,106,104,107,103,106,104,107,103,106,104,107,103,106,104,107,103,106,106,104,107,103,106,106,106,103,106,106,106,106,106,106,106,106,106,106,106,106,112,104,0,104,103,106,0,105,106,106,104,107,103,106,106,106,106,113,110,111,106,104,104,103,103,106,109,110,111,112,104,104,107,103,106,106,106,106,106,106,106,114,109,110,111,112,104,107,103,106,106,109,106,106,106,106,106,106,106,115,103,103,106,106,106,106,104,103,106,109,110,111,112,109,106,106,106,103,106,106,116,113,110,111,112,117,103,113,110,111,113,110,111,113,110,111,113,110,111,0,113,110,111,113,110,111,113,110,111,113,110,111,106,106,0,116,112,0,104,103,106,0,106,106,104,107,103,106,104,103,111,106,109,110,111,112,104,107,103,106,109,110,111,112,104,107,103,106,109,110,111,112,104,107,103,106,106,106,106,106,106,106,106,103,118,106,106,119,103,116,116,112,116,116,116,116,116,116,120,121,120,122,122,123,124],"f":[null,null,null,null,null,null,null,null,[[["u64",15]],["difficultynumber",6]],null,[[["reader",8]],[["policy",6],["error",4],["result",4,["policy","error"]]]],[[["u64",15]],[["option",4,["u64"]],["u64",15]]],null,null,null,null,null,null,null,null,null,null,[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],null,[[["u64",15]],["u64",15]],[[]],[[]],[[["u64",15]],["u64",15]],[[],["headerinfo",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],null,[[],["u64",15]],[[["headerinfo",3]],["bool",15]],[[],["u64",15]],[[["u64",15]],["u64",15]],[[["formatter",3]],["result",6]],[[],["u64",15]],[[["u64",15]],["u64",15]],[[]],[[["difficulty",3],["u32",15]],["headerinfo",3]],[[["u64",15],["difficulty",3]],["headerinfo",3]],[[["u64",15],["u8",15]],["u64",15]],[[["u64",15]],["headerversion",3]],[[]],[[["u64",15]],["bool",15]],null,[[["u64",15]],["u64",15]],[[["headerinfo",3]],["bool",15]],[[["u64",15],["difficulty",3],["u32",15],["bool",15],["hash",3]],["headerinfo",3]],[[["u64",15],["powtype",4]],["headerinfo",3]],[[["u64",15],["powtype",4]],["headerinfo",3]],[[["powtype",4],["vec",3]],["u64",15]],[[["u8",15]]],null,[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u32",15]],null,null,[[["u64",15],["powtype",4]],["u64",15]],[[]],[[["u64",15],["bool",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u64",15],["headerversion",3]],["bool",15]],null,null,[[["str",15]],[["u64",15],["result",4,["u64","error"]],["error",4]]],[[["u64",15],["bool",15]],["string",3]],[[],["fail",8]],[[],[["option",4,["backtrace"]],["backtrace",3]]],null,null,[[]],[[]],[[],[["option",4,["fail"]],["fail",8]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],null,null,[[]],null,[[],[["option",4,["str"]],["str",15]]],null,[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["fail",8]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["option",4,["fail"]],["fail",8]]],[[],["error",4]],[[],["headerversion",3]],[[],["blockheader",3]],[[],["block",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[]],[[]],[[],[["result",4,["block","error"]],["block",3],["error",4]]],[[],["headerversion",3]],[[],["blockheader",3]],[[],["block",3]],[[],[["u16",15],["option",4,["u16"]]]],[[["error",4]],["bool",15]],[[["headerversion",3]],["bool",15]],[[["blockheader",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[]],[[]],[[]],[[["untrustedblockheader",3]]],[[]],[[]],[[["untrustedblock",3]]],[[["transaction",3],["blockheader",3],["vec",3,["transaction"]],["difficulty",3]],[["result",4,["block","error"]],["block",3],["error",4]]],[[["transaction",3],["blockheader",3],["vec",3,["transaction"]],["output",3],["txkernel",3],["difficulty",3]],[["result",4,["block","error"]],["block",3],["error",4]]],[[],["hash",3]],[[],["hash",3]],[[],["hash",3]],[[["u64",15]],["hash",3]],null,null,[[["compactblock",3],["transaction",3],["vec",3,["transaction"]]],[["result",4,["block","error"]],["block",3],["error",4]]],[[],["vec",3]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["vec",3]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[],[["option",4,["str"]],["str",15]]],[[["error",4]],["bool",15]],[[["headerversion",3]],["bool",15]],[[["blockheader",3]],["bool",15]],[[["u16",15]],["headerversion",3]],[[["transaction",3],["blockheader",3],["vec",3,["transaction"]],["difficulty",3]],[["result",4,["block","error"]],["block",3],["error",4]]],null,null,[[],["vec",3]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[],["i64",15]],[[["headerversion",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,[[],[["vec",3,["u8"]],["u8",15]]],[[]],null,null,null,[[["reader",8]],[["result",4,["untrustedblockheader","error"]],["untrustedblockheader",3],["error",4]]],[[["reader",8]],[["result",4,["untrustedblock","error"]],["untrustedblock",3],["error",4]]],[[["reader",8]],[["headerentry",3],["error",4],["result",4,["headerentry","error"]]]],[[["reader",8]],[["result",4,["headerversion","error"]],["error",4],["headerversion",3]]],[[["reader",8]],[["blockheader",3],["error",4],["result",4,["blockheader","error"]]]],[[["reader",8]],[["result",4,["block","error"]],["block",3],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["difficulty",3]],[[],["u64",15]],[[],["blindingfactor",3]],null,[[["bool",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["blindingfactor",3]],[["result",4,["commitment","error"]],["error",4],["commitment",3]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],null,[[],["block",3]],[[["blockheader",3]],["block",3]],[[["txkernel",3],["output",3]],["block",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["policy",6]],["powtype",4]],[[["policy",6]],["powtype",4]],[[],["allowpolicy",3]],[[],["policyconfig",3]],[[],["powtype",4]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[]],[[["powtype",4]],["ordering",4]],[[["policy",6]],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["allowpolicy",3]],["bool",15]],[[["policyconfig",3]],["bool",15]],[[["powtype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["proof",4]],["powtype",4]],[[],["policy",6]],[[]],null,[[]],[[]],[[]],[[]],[[["u64",15],["allowedpolicy",6],["u8",15]],["bool",15]],[[["allowpolicy",3]],["bool",15]],[[["policyconfig",3]],["bool",15]],[[["powtype",4],["policy",6]],["policy",6]],[[["powtype",4]],[["option",4,["ordering"]],["ordering",4]]],null,[[["u64",15]],[["option",4,["u64"]],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["blocksums",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[],["blocksums",3]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["reader",8]],[["error",4],["blocksums",3],["result",4,["blocksums","error"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,[[],["fail",8]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[],[["option",4,["fail"]],["fail",8]]],[[],["error",4]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[],["result",4]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["error",4]],[[]],[[["error",4]],["error",4]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],[["option",4,["str"]],["str",15]]],[[["error",4]],["bool",15]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["result",4]],[[["i64",15]],[["result",4,["commitment","error"]],["error",4],["commitment",3]]],[[["vec",3,["commitment"]],["commitment",3]],[["result",4,["commitment","error"]],["error",4],["commitment",3]]],[[["blindingfactor",3]],[["result",4,["error"]],["error",4]]],[[["vec",3,["blindingfactor"]],["blindingfactor",3]],[["error",4],["result",4,["blindingfactor","error"]],["blindingfactor",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["blindingfactor",3],["i64",15]],[["result",4,["error"]],["error",4]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["compactblockbody",3]],[[],["compactblock",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["untrustedcompactblock",3]]],[[["block",3]]],[[]],[[],["hash",3]],[[["u64",15]],["hash",3]],null,[[]],[[]],[[]],[[],["compactblockbody",3]],[[],["vec",3]],null,[[],["vec",3]],null,null,[[],["vec",3]],null,[[["reader",8]],[["error",4],["result",4,["untrustedcompactblock","error"]],["untrustedcompactblock",3]]],[[["reader",8]],[["error",4],["compactblockbody",3],["result",4,["compactblockbody","error"]]]],[[["reader",8]],[["result",4,["compactblock","error"]],["compactblock",3],["error",4]]],[[["u64",15],["hash",3]],["shortid",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],null,null,[[]],[[]],[[],["cbdata",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[["u64",15]],["cbdata",3]],null,[[["string",3],["path",3]]],[[],["result",4]],[[["vec",3,["cbdata"]],["cbdata",3]],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["hash",3]],["hash",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hash",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[["hash",3]],["ordering",4]],[[],["hashwriter",3]],[[],["hash",3]],[[],["result",4]],[[["hash",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["hash",3],["result",4,["hash","error"]],["error",4]]],[[],["hash",3]],[[],["hash",3]],[[]],[[],["hash",3]],[[["u64",15]],["hash",3]],[[["usize",15],["rangefrom",3,["usize"]]]],[[["rangefull",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["rangeto",3,["usize"]]]],[[]],[[]],[[],["hash",3]],[[],["usize",15]],[[["hash",3]],["bool",15]],[[["hash",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["protocolversion",3]],[[["reader",8]],[["hash",3],["result",4,["hash","error"]],["error",4]]],[[],["serializationmode",4]],[[],["result",4]],[[["u64",15],["hash",3]],["shortid",3]],[[],["string",3]],[[]],[[],["string",3]],[[],["u64",15]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["error"]],["error",4]]],[[],[["error",4],["result",4,["error"]]]],null,null,null,[[]],[[]],[[],["shortid",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[["shortid",3]],["ordering",4]],[[],["result",4]],[[["shortid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["shortid",3]],[[["str",15]],[["result",4,["shortid","error"]],["shortid",3],["error",4]]],[[]],[[],["hash",3]],[[["u64",15]],["hash",3]],[[]],[[["shortid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["reader",8]],[["result",4,["shortid","error"]],["shortid",3],["error",4]]],[[],["result",4]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["error",4],["result",4,["error"]]]],[[],["shortid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["merkleprooferror",4]],[[],["merkleproof",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[["merkleproof",3]],["ordering",4]],[[],["merkleproof",3]],[[],["result",4]],[[],["merkleproof",3]],[[["merkleprooferror",4]],["bool",15]],[[["merkleproof",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["string",3],["merkleproof",3],["result",4,["merkleproof","string"]]]],[[]],[[]],null,[[["merkleproof",3]],["bool",15]],[[["merkleproof",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[["reader",8]],[["result",4,["merkleproof","error"]],["merkleproof",3],["error",4]]],[[],["result",4]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["hash",3],["pmmrindexhashable",8],["u64",15]],[["result",4,["merkleprooferror"]],["merkleprooferror",4]]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,[[["hash",3],["vec",3,["hash"]]],[["string",3],["result",4,["string"]]]],[[["hash",3],["vec",3,["hash"]]],[["string",3],["result",4,["string"]]]],[[["u64",15]],["pmmr",3]],[[["u64",15]],["readonlypmmr",3]],[[["u64",15]],["rewindablepmmr",3]],[[],["backend",8]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vecbackend",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],null,[[],[["result",4,["file","string"]],["string",3],["file",3]]],[[],[["result",4,["file","string"]],["string",3],["file",3]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[["u64",15],["option",4,["u64"]]]],[[["u64",15]]],[[["u64",15]],["vec",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],[["hash",3],["option",4,["hash"]]]],[[["u64",15]],["vec",3]],null,[[["u64",15]],["u64",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],null,[[["u64",15]],[["box",3,["iterator"]],["iterator",8]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],[["box",3,["iterator"]],["iterator",8]]],[[],[["box",3,["iterator"]],["iterator",8]]],[[]],[[]],[[],[["box",3,["iterator"]],["iterator",8]]],[[["u64",15]],[["string",3],["merkleproof",3],["result",4,["merkleproof","string"]]]],[[["u64",15]],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["pmmr",3]],[[],["readonlypmmr",3]],[[],["rewindablepmmr",3]],[[],["vecbackend",3]],[[],["vecbackend",3]],[[["u64",15]],[["vec",3,["u64"]],["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],[["vec",3,["u64"]],["u64",15]]],[[],[["hash",3],["vec",3,["hash"]]]],[[],[["hash",3],["vec",3,["hash"]]]],[[],[["hash",3],["vec",3,["hash"]]]],[[["u64",15]],[["result",4,["bool","string"]],["string",3],["bool",15]]],[[],[["result",4,["u64","string"]],["u64",15],["string",3]]],[[],["readonlypmmr",3]],[[]],[[]],[[["u64",15]],[["string",3],["result",4,["string"]]]],[[["u64",15]],[["string",3],["result",4,["string"]]]],null,[[["u64",15],["bitmap",3]],[["string",3],["result",4,["string"]]]],[[["u64",15],["bitmap",3]],[["string",3],["result",4,["string"]]]],[[["u64",15]],[["string",3],["result",4,["string"]]]],[[["u64",15],["bitmap",3]],[["string",3],["result",4,["string"]]]],[[],[["result",4,["hash","string"]],["hash",3],["string",3]]],[[],["hash",3]],[[],[["result",4,["hash","string"]],["hash",3],["string",3]]],[[],["u64",15]],[[["blockheader",3]],[["string",3],["result",4,["string"]]]],[[["blockheader",3]],[["string",3],["result",4,["string"]]]],[[["blockheader",3]],[["string",3],["result",4,["string"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],[["string",3],["result",4,["string"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["transaction",3],["vec",3,["transaction"]]],[["error",4],["transaction",3],["result",4,["transaction","error"]]]],[[]],[[],["outputidentifier",3]],[[],["fail",8]],[[],["string",3]],[[],["u8",15]],[[["vec",3]],[["error",4],["result",4,["error"]]]],[[["vec",3],["vec",3]],[["error",4],["result",4,["error"]]]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["kernelfeatures",4]],[[],["error",4]],[[],["txkernel",3]],[[],["weighting",4]],[[],["transactionbody",3]],[[],["transaction",3]],[[],["input",3]],[[],["outputfeatures",4]],[[],["output",3]],[[],["outputidentifier",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["txkernel",3]],["ordering",4]],[[["input",3]],["ordering",4]],[[["output",3]],["ordering",4]],null,null,null,[[],["commitment",3]],[[],["commitment",3]],[[],["commitment",3]],[[["vec",3],["vec",3]],[["error",4],["result",4,["error"]]]],[[["transaction",3],["vec",3,["transaction"]]],[["error",4],["transaction",3],["result",4,["transaction","error"]]]],[[],["transactionbody",3]],[[],["transaction",3]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u16",15],["option",4,["u16"]]]],[[],[["u16",15],["option",4,["u16"]]]],[[],["txkernel",3]],[[],["transactionbody",3]],[[],["transaction",3]],[[["kernelfeatures",4]],["bool",15]],[[["error",4]],["bool",15]],[[["txkernel",3]],["bool",15]],[[["transactionbody",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["input",3]],["bool",15]],[[["outputfeatures",4]],["bool",15]],[[["output",3]],["bool",15]],[[["outputidentifier",3]],["bool",15]],[[],["commitment",3]],null,null,null,null,null,null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["output",3]]],[[]],[[["i64",15]],["option",4]],[[["input",3]],["outputidentifier",3]],[[["output",3]],["outputidentifier",3]],[[["u64",15]],["option",4]],[[],["hash",3]],[[]],[[],["hash",3]],[[]],[[],["hash",3]],[[]],[[],["hash",3]],[[],["hash",3]],[[["u64",15]],["hash",3]],[[["u64",15]],["hash",3]],[[["u64",15]],["hash",3]],[[["u64",15]],["hash",3]],[[["u64",15]],["hash",3]],[[["bool",15],["input",3],["vec",3,["output"]],["vec",3,["input"]],["output",3],["txkernel",3],["vec",3,["txkernel"]]],[["error",4],["result",4,["transactionbody","error"]],["transactionbody",3]]],[[],["vec",3]],null,[[],[["vec",3,["commitment"]],["commitment",3]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[],["transactionbody",3]],[[]],[[]],[[]],[[]],[[]],[[["rangeproof",3]],["output",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["error",4],["message",3],["result",4,["message","error"]]]],[[],["vec",3]],null,[[],[["vec",3,["commitment"]],["commitment",3]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[],["u64",15]],[[],["u64",15]],[[],[["error",4],["message",3],["result",4,["message","error"]]]],[[["kernelfeatures",4]],["bool",15]],[[["error",4]],["bool",15]],[[["outputidentifier",3]],["bool",15]],[[["input",3],["vec",3,["output"]],["vec",3,["input"]],["output",3],["txkernel",3],["vec",3,["txkernel"]]],["transaction",3]],[[["outputfeatures",4],["commitment",3]],["input",3]],[[["commitment",3],["outputfeatures",4]],["outputidentifier",3]],null,[[],["vec",3]],null,[[],[["vec",3,["commitment"]],["commitment",3]]],[[],[["vec",3,["commitment"]],["commitment",3]]],[[],["vec",3]],[[],["i64",15]],[[["txkernel",3]],[["option",4,["ordering"]],["ordering",4]]],[[["input",3]],[["option",4,["ordering"]],["ordering",4]]],[[["output",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["rangeproof",3]],null,[[["reader",8]],[["error",4],["result",4,["kernelfeatures","error"]],["kernelfeatures",4]]],[[["reader",8]],[["txkernel",3],["error",4],["result",4,["txkernel","error"]]]],[[["reader",8]],[["error",4],["transactionbody",3],["result",4,["transactionbody","error"]]]],[[["reader",8]],[["transaction",3],["error",4],["result",4,["transaction","error"]]]],[[["reader",8]],[["result",4,["input","error"]],["input",3],["error",4]]],[[["reader",8]],[["outputfeatures",4],["error",4],["result",4,["outputfeatures","error"]]]],[[["reader",8]],[["result",4,["output","error"]],["error",4],["output",3]]],[[["reader",8]],[["result",4,["outputidentifier","error"]],["outputidentifier",3],["error",4]]],[[["txkernel",3]],["transactionbody",3]],[[["txkernel",3]],["transaction",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[["u64",15],["hash",3]],["shortid",3]],[[]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["weighting",4]],[["error",4],["result",4,["error"]]]],[[["weighting",4]],[["error",4],["result",4,["error"]]]],[[["weighting",4]],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["kernelfeatures",4]],["txkernel",3]],[[["input",3]],["transactionbody",3]],[[["input",3]],["transaction",3]],[[["txkernel",3]],["transactionbody",3]],[[["txkernel",3]],["transaction",3]],[[["blindingfactor",3]],["transaction",3]],[[["output",3]],["transactionbody",3]],[[["output",3]],["transaction",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,[[],["block",3]],[[],["block",3]],[[],["block",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["chaintypes",4]],[[],["powcontexttypes",4]],[[],["version",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[]],[[],["u64",15]],[[["u64",15],["u8",15],["usize",15],["u32",15]],[["error",3],["box",3,["powcontext"]],["result",4,["box","error"]]]],[[],["u32",15]],[[],["chaintypes",4]],[[],["rwlock",6]],[[],["rwlock",6]],[[],["rwlock",6]],[[],["rwlock",6]],[[],["rwlock",6]],[[],["rwlock",6]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["vec",3,["headerinfo"]],["headerinfo",3]]],[[["chaintypes",4]],["bool",15]],[[["powcontexttypes",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["allowpolicy"]],["allowpolicy",3]]],[[["u64",15]],["u8",15]],[[],[["version",3],["option",4,["version"]]]],[[["str",15]],["string",3]],[[],[["string",3],["option",4,["string"]]]],[[],["u64",15]],[[],["i64",15]],[[["u8",15]],[["option",4,["policy"]],["policy",6]]],[[],["policyconfig",3]],[[],["u64",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["u8",15]],[[["u32",15]],["version",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[["string",3]]],[[["string",3]]],[[["i64",15]]],[[["chaintypes",4]]],[[["policyconfig",3]]],[[],["string",3]],[[],["u32",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["vec",3,["headerinfo"]],["headerinfo",3]]],[[],["u64",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["string",3]],["string",3]],null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[]],[[]],null,[[],[["option",4,["fail"]],["fail",8]]],[[],[["option",4,["fail"]],["fail",8]]],[[],["errorkind",4]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[],["result",4]],[[["errorkind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["error",3]],[[["context",3,["errorkind"]],["errorkind",4]],["error",3]],[[["errorkind",4]],["error",3]],[[["error",4]],["error",3]],[[]],[[["error",4]],["error",3]],[[]],[[]],[[]],[[],["errorkind",4]],[[],[["option",4,["str"]],["str",15]]],[[["errorkind",4]],["bool",15]],null,null,null,[[],["result",4]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["option",4,["u64"]],["u64",15]],["u64",15]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["vec",3,["signature"]],["publickey",3],["secp256k1",3],["signature",3]],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[["option",4,["publickey"]],["publickey",3],["secretkey",3],["secp256k1",3],["message",3]],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["message",3],["u64",15],["publickey",3],["secretkey",3],["secp256k1",3],["option",4,["publickey"]],["option",4,["secretkey"]],["identifier",3]],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[["message",3],["option",4,["publickey"]],["publickey",3],["secretkey",3],["secp256k1",3],["option",4,["secretkey"]]],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[["message",3],["option",4,["publickey"]],["publickey",3],["secp256k1",3],["blindingfactor",3]],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[["option",4,["publickey"]],["publickey",3],["secp256k1",3],["signature",3],["message",3]],[["result",4,["error"]],["error",3]]],[[["option",4,["publickey"]],["publickey",3],["secp256k1",3],["signature",3],["message",3]],[["result",4,["error"]],["error",3]]],[[["message",3],["option",4,["publickey"]],["publickey",3],["bool",15],["secp256k1",3],["signature",3]],["bool",15]],[[["message",3],["commitment",3],["secp256k1",3],["signature",3]],[["result",4,["error"]],["error",3]]],null,null,[[]],[[]],null,[[["u64",15],["identifier",3]],[["append",6],["box",3,["append"]]]],[[]],[[["transaction",3]],[["append",6],["box",3,["append"]]]],[[["u64",15],["identifier",3]],[["append",6],["box",3,["append"]]]],[[]],null,[[["u64",15],["identifier",3]],[["append",6],["box",3,["append"]]]],[[["vec",3,["box"]],["transaction",3],["box",3,["append"]]],[["result",4,["error"]],["error",3]]],[[["vec",3,["box"]],["box",3,["append"]],["kernelfeatures",4]],[["result",4,["transaction","error"]],["transaction",3],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["blindingfactor",3]],[["append",6],["box",3,["append"]]]],null,null,null,[[]],[[]],[[]],[[]],[[["commitment",3],["u64",15],["proofmessage",3],["secp256k1",3]],[["option",4],["error",3],["result",4,["option","error"]]]],[[["commitment",3],["u64",15],["proofmessage",3],["secp256k1",3]],[["option",4],["error",3],["result",4,["option","error"]]]],[[["commitment",3],["u64",15],["proofmessage",3],["secp256k1",3]],[["option",4],["error",3],["result",4,["option","error"]]]],[[["u64",15],["commitment",3],["option",4,["vec"]],["vec",3,["u8"]],["switchcommitmenttype",4],["identifier",3]],[["result",4,["rangeproof","error"]],["rangeproof",3],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["secp256k1",3],["switchcommitmenttype",4],["identifier",3]],[["proofmessage",3],["error",3],["result",4,["proofmessage","error"]]]],[[["secp256k1",3],["switchcommitmenttype",4],["identifier",3]],[["proofmessage",3],["error",3],["result",4,["proofmessage","error"]]]],[[["secp256k1",3],["switchcommitmenttype",4],["identifier",3]],[["proofmessage",3],["error",3],["result",4,["proofmessage","error"]]]],[[["option",4,["vec"]],["rangeproof",3],["vec",3,["u8"]],["secp256k1",3],["commitment",3]],[["result",4,["option","error"]],["error",3],["option",4]]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[["commitment",3],["secp256k1",3]],[["result",4,["secretkey","error"]],["error",3],["secretkey",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4,["vec"]],["rangeproof",3],["vec",3,["u8"]],["secp256k1",3],["commitment",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[["u64",15],["bool",15],["identifier",3]],[["error",3],["result",4,["error"]]]],[[["bool",15],["u64",15],["identifier",3]],[["error",3],["result",4,["error"]]]],[[["bool",15],["u64",15],["identifier",3]],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[],[["result",4,["blindingfactor"]],["blindingfactor",3]]],[[],[["result",4,["commitment"]],["commitment",3]]],null,null,null,null,null,[[],[["result",4,["rangeproof"]],["rangeproof",3]]],null,null,[[],[["option",4,["u64"]],["result",4,["option"]]]],[[["option",4]],["result",4]],[[],[["option",4,["commitment"]],["result",4,["option"]]]],[[["option",4]],["result",4]],[[],[["option",4,["secretkey"]],["result",4,["option"]]]],[[["option",4]],["result",4]],[[],[["option",4,["signature"]],["result",4,["option"]]]],[[["option",4]],["result",4]],[[],[["result",4,["publickey"]],["publickey",3]]],[[["publickey",3]],["result",4]],[[],[["signature",3],["result",4,["signature"]]]],[[["signature",3]],["result",4]],[[],[["u64",15],["result",4,["u64"]]]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["difficulty",3]],["difficulty",3]],[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["fail"]],["fail",8]]],[[],["difficulty",3]],[[],["proofofwork",3]],[[],["proof",4]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[]],[[],["ordering",4]],null,null,[[],["proofofwork",3]],[[],[["difficulty",3],["result",4,["difficulty"]]]],[[["difficulty",3]],["difficulty",3]],[[],["u8",15]],[[["difficulty",3]],["bool",15]],[[["proofofwork",3]],["bool",15]],[[["proof",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["context",3,["errorkind"]],["errorkind",4]],["error",3]],[[["error",3]],["error",3]],[[["error",3]],["error",3]],[[]],[[]],[[]],[[]],[[["difficultynumber",6]],["difficulty",3]],[[["u64",15]],["difficulty",3]],[[],["hash",3]],[[["u64",15]],["hash",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["errorkind",4]],null,null,[[],["difficulty",3]],[[],[["result",4,["block","error"]],["block",3],["error",3]]],[[["difficulty",3]],["difficulty",3]],[[["difficulty",3]],["bool",15]],[[["proofofwork",3]],["bool",15]],[[["proof",4]],["bool",15]],[[["vec",3,["u64"]],["u64",15]],["proof",4]],null,null,[[["u64",15]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["proof",4]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15],["blockheader",3],["difficulty",3],["u8",15]],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],null,null,[[],["usize",15]],[[["usize",15]],["proof",4]],null,[[["reader",8]],[["result",4,["difficulty","error"]],["difficulty",3],["error",4]]],[[["reader",8]],[["result",4,["proofofwork","error"]],["proofofwork",3],["error",4]]],[[["reader",8]],[["result",4,["proof","error"]],["error",4],["proof",4]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["u64",15],["hash",3]],["shortid",3]],[[["difficultynumber",6]],["difficulty",3]],[[["difficulty",3]],["difficulty",3]],[[["u64",15]],["difficulty",3]],[[["powtype",4]],["u64",15]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["difficulty",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],[[["blockheader",3]],[["result",4,["error"]],["error",3]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],["difficulty",3]],[[["usize",15]],["proof",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15],["u8",15]],[["box",3,["powcontext"]],["result",4,["box","error"]],["error",3]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],null,[[]],[[]],[[],[["result",4,["u64","error"]],["u64",15],["error",3]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[]],[[]],[[["usize",15],["u8",15],["u32",15]],[["box",3,["powcontext"]],["result",4,["box","error"]],["error",3]]],[[["usize",15],["u8",15],["u32",15]],[["cuckatoocontext",3],["result",4,["cuckatoocontext","error"]],["error",3]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["usize",15]],[["string",3],["result",4,["string","error"]],["error",3]]],[[["u64",15]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],[[["proof",4]],[["result",4,["error"]],["error",3]]],null,[[]],[[]],[[["cuckatoocontext",3,["u32"]],["u32",15]],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[]],[[]],[[["u8",15]],["lean",3]],[[["vec",3,["u8"]],["u8",15],["u32",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],null,[[["usize",15],["u8",15],["u32",15]],[["box",3,["powcontext"]],["result",4,["box","error"]],["error",3]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],null,[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],null,null,[[]],[[]],[[]],[[]],[[],["rwlock",6]],[[]],[[]],[[["u64",15]]],null,null,[[]],[[]],[[]],[[],[["box",3,["powcontext"]],["result",4,["box","error"]],["error",3]]],null,[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["rwlock",6]],[[]],[[]],null,[[]],[[]],[[]],[[],[["box",3,["powcontext"]],["result",4,["box","error"]],["error",3]]],null,[[],[["error",3],["result",4,["vec","error"]],["vec",3,["proof"]]]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],[["option",4,["u64"]],["u64",15]]],null,[[["u64",15],["u8",15],["bool",15],["vec",3,["u8"]],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["proof",4]],[["result",4,["error"]],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["result",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["fail",8]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],[[],[["error",8],["option",4,["error"]]]],[[],["error",4]],[[],["serializationmode",4]],[[],["protocolversion",3]],[[],["result",4]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[["result",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["protocolversion",3]],["ordering",4]],[[["result",4]],["ordering",4]],[[],[["result",4,["compat"]],["compat",3,["error"]]]],[[],[["result",4,["compat"]],["compat",3]]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4,["context"]],["context",3]]],[[],[["context",3],["result",4,["context"]]]],[[],[["context",3],["result",4,["context"]]]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["result"]],["result",4]]],[[],[["option",4,["result"]],["result",4]]],[[["write",8]],["binwriter",3]],[[],["str",15]],[[["protocolversion",3],["read",8]],[["readable",8],["error",4],["result",4,["error"]]]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["result"]],["result",4]]],[[["read",8]],[["readable",8],["error",4],["result",4,["error"]]]],[[],[["u16",15],["option",4,["u16"]]]],[[],["result",4]],[[]],[[["error",4]],["bool",15]],[[["serializationmode",4]],["bool",15]],[[["protocolversion",3]],["bool",15]],[[["result",4]],["bool",15]],[[],["option",4]],[[["str",15]]],[[["str",15]]],[[["u8",15]],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[["u8",15]],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[["u8",15]],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["error",3]],["error",4]],[[]],[[]],[[]],[[]],[[["streamresult",3]],[["mzerror",4],["result",4,["mzstatus","mzerror"]],["mzstatus",4]]],[[["streamresult",3]],[["mzerror",4],["result",4,["mzstatus","mzerror"]],["mzstatus",4]]],[[],["result",4]],[[],["result",4]],[[["infallible",4],["result",4,["infallible"]]],["result",4]],[[]],[[["u64",15]],["hash",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["protocolversion",3]],[[],["protocolversion",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["error",4]],["bool",15]],[[["protocolversion",3]],["bool",15]],[[["result",4]],["bool",15]],[[["u64",15],["reader",8]],["iteratingreader",3]],[[["protocolversion",3],["read",8]],["binreader",3]],[[["protocolversion",3],["read",8]],["streamingreader",3]],[[["protocolversion",3],["write",8]],["binwriter",3]],[[],["option",4]],[[],["option",4]],[[["result",4]],["result",4]],[[],["result",4]],[[["protocolversion",3]],[["option",4,["ordering"]],["ordering",4]]],[[["result",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["protocolversion",3]],[[],["protocolversion",3]],[[],["protocolversion",3]],[[],["protocolversion",3]],[[],["protocolversion",3]],[[["reader",8]],[["result",4,["error"]],["error",4]]],[[["reader",8]],[["error",4],["protocolversion",3],["result",4,["protocolversion","error"]]]],[[],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[["usize",15]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[["usize",15]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[["usize",15]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[],[["i32",15],["result",4,["i32","error"]],["error",4]]],[[],[["i32",15],["result",4,["i32","error"]],["error",4]]],[[],[["i32",15],["result",4,["i32","error"]],["error",4]]],[[],[["result",4,["i64","error"]],["error",4],["i64",15]]],[[],[["result",4,["i64","error"]],["error",4],["i64",15]]],[[],[["result",4,["i64","error"]],["error",4],["i64",15]]],[[["u64",15],["reader",8]],[["vec",3],["result",4,["vec","error"]],["error",4]]],[[],[["u16",15],["error",4],["result",4,["u16","error"]]]],[[],[["u16",15],["error",4],["result",4,["u16","error"]]]],[[],[["u16",15],["error",4],["result",4,["u16","error"]]]],[[],[["error",4],["result",4,["u32","error"]],["u32",15]]],[[],[["error",4],["result",4,["u32","error"]],["u32",15]]],[[],[["error",4],["result",4,["u32","error"]],["u32",15]]],[[],[["u64",15],["error",4],["result",4,["u64","error"]]]],[[],[["u64",15],["error",4],["result",4,["u64","error"]]]],[[],[["u64",15],["error",4],["result",4,["u64","error"]]]],[[],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[],[["u8",15],["result",4,["u8","error"]],["error",4]]],[[],["i32",15]],[[],["i32",15]],[[["protocolversion",3]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[],["serializationmode",4]],[[],["serializationmode",4]],[[["protocolversion",3],["write",8]],[["result",4,["error"]],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["write",8]],[["result",4,["error"]],["error",4]]],[[],["result",4]],[[],[["global",3],["vec",3,["u8","global"]],["u8",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["u64",15]],[[],[["option",4,["result"]],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],[["result",4,["error"]],["error",4]]],[[],[["context",3],["result",4,["context"]]]],[[],[["context",3],["result",4,["context"]]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[["i32",15]],[["result",4,["error"]],["error",4]]],[[["i64",15]],[["result",4,["error"]],["error",4]]],[[["u16",15]],[["result",4,["error"]],["error",4]]],[[["u32",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]],[["result",4,["error"]],["error",4]]],[[["u8",15]],[["result",4,["error"]],["error",4]]],null,null,null,null,null,null,null],"p":[[6,"DifficultyNumber"],[6,"Policy"],[6,"AllowedPolicy"],[3,"HeaderInfo"],[4,"Error"],[3,"HeaderVersion"],[4,"Error"],[3,"BlockHeader"],[3,"UntrustedBlockHeader"],[3,"UntrustedBlock"],[3,"HeaderEntry"],[3,"Block"],[13,"KernelLockHeight"],[13,"Transaction"],[13,"Secp"],[13,"Keychain"],[13,"Committed"],[13,"Serialization"],[13,"Other"],[4,"PoWType"],[3,"PolicyConfig"],[3,"Deterministic"],[3,"AllowPolicy"],[8,"Feijoada"],[8,"FuzzySearch"],[3,"BlockSums"],[4,"Error"],[8,"Committed"],[13,"Keychain"],[13,"Secp"],[3,"UntrustedCompactBlock"],[3,"CompactBlockBody"],[3,"CompactBlock"],[3,"CbData"],[3,"Hash"],[3,"HashWriter"],[8,"Hashed"],[3,"ShortId"],[8,"ShortIdentifiable"],[4,"MerkleProofError"],[3,"MerkleProof"],[8,"Backend"],[3,"VecBackend"],[3,"PMMR"],[3,"ReadonlyPMMR"],[3,"RewindablePMMR"],[4,"Error"],[4,"Weighting"],[4,"KernelFeatures"],[4,"OutputFeatures"],[3,"TxKernel"],[3,"Output"],[3,"Transaction"],[3,"TransactionBody"],[3,"Input"],[3,"OutputIdentifier"],[13,"Secp"],[13,"Keychain"],[13,"LockHeight"],[13,"Committed"],[13,"Serialization"],[13,"Plain"],[13,"HeightLocked"],[13,"AsLimitedTransaction"],[4,"ChainTypes"],[4,"PoWContextTypes"],[3,"CHAIN_TYPE"],[3,"POW_CONTEXT_TYPE"],[3,"POLICY_CONFIG"],[3,"FOUNDATION_FILE"],[3,"EPIC_VERSION"],[3,"HEADER_SYNC_TIMEOUT"],[3,"Version"],[4,"ErrorKind"],[3,"Error"],[13,"Secp"],[13,"Keychain"],[13,"Transaction"],[13,"Signature"],[13,"RangeProof"],[3,"Context"],[3,"ProofBuilder"],[3,"LegacyProofBuilder"],[8,"ProofBuild"],[4,"Proof"],[3,"Difficulty"],[3,"Error"],[3,"ProofOfWork"],[8,"DifficultyNumberBasic"],[8,"PoWContext"],[13,"CuckooProof"],[13,"MD5Proof"],[13,"RandomXProof"],[13,"ProgPowProof"],[3,"CuckarooContext"],[3,"CuckatooContext"],[3,"Lean"],[3,"MD5Context"],[3,"ProgPowContext"],[3,"PP_CPU"],[3,"RXContext"],[3,"RX_STATE"],[3,"ProtocolVersion"],[4,"Error"],[8,"PMMRable"],[4,"Result"],[4,"SerializationMode"],[8,"FixedLength"],[3,"IteratingReader"],[3,"BinReader"],[3,"StreamingReader"],[3,"BinWriter"],[8,"Reader"],[8,"PMMRIndexHashable"],[8,"AsFixedBytes"],[8,"Writer"],[8,"Readable"],[8,"VerifySortedAndUnique"],[8,"Writeable"],[13,"IOErr"],[13,"HexError"],[13,"UnexpectedData"],[13,"Ok"],[13,"Err"]]},\
"epic_keychain":{"doc":"Library module for the key holder functionalities provided …","t":[3,3,4,3,17,3,13,8,13,13,13,13,13,4,13,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,0,11,10,0,11,11,11,11,11,12,12,11,11,11,11,12,12,12,10,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,12,12,12,3,8,13,3,4,13,4,3,3,3,13,13,13,13,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,10,11,10,11,11,11,12,12,11,11,12,10,11,10,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,13,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,11,12,12,12,12,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11],"n":["BlindSum","BlindingFactor","Error","ExtKeychainPath","IDENTIFIER_SIZE","Identifier","KeyDerivation","Keychain","None","RangeProof","Regular","Secp","SwitchCommitment","SwitchCommitmentType","Transaction","add","add_blinding_factor","add_key_id","as_ref","as_ref","blind_sum","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","default","depth","derive_key","derive_key_id","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","eq","eq","extkey_bip32","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_hex","from_hex","from_identifier","from_mnemonic","from_path","from_pubkey","from_random_seed","from_secret_key","from_secret_key","from_seed","from_serialized_path","from_slice","hash","into","into","into","into","into","into","keychain","last_path_index","mask_master_key","mnemonic","ne","ne","ne","ne","ne","negative_blinding_factors","negative_key_ids","new","new","parent_path","partial_cmp","path","positive_blinding_factors","positive_key_ids","public_root_key","root_key_id","secp","secret_key","serialize","serialize","serialize","serialize","serialize_path","sign","sign_with_blinding","split","sub_blinding_factor","sub_key_id","to_bip_32_string","to_bytes","to_hex","to_hex","to_identifier","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path","to_string","to_string","to_value_path","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","view_key","zero","zero","zeroize","0","0","0","0","BIP32GrinHasher","BIP32Hasher","CannotDeriveFromHardenedKey","ChainCode","ChildNumber","Ecdsa","Error","ExtendedPrivKey","ExtendedPubKey","Fingerprint","Hardened","InvalidChildNumber","MnemonicError","Normal","RngError","append_sha512","append_sha512","as_bytes","as_bytes","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","chain_code","chain_code","child_number","child_number","ckd_priv","ckd_pub","ckd_pub_tweak","clone","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","depth","depth","derive_priv","derive_pub","description","deserialize","deserialize","eq","eq","eq","eq","eq","eq","fingerprint","fingerprint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_hardened_idx","from_mnemonic","from_normal_idx","from_private","from_str","from_str","hash","hash","hash_slice","hash_slice","identifier","identifier","index","index","index","index","index","index","index","index","index","index","init_sha512","init_sha512","into","into","into","into","into","into","into","into_bytes","into_bytes","is_empty","is_empty","is_hardened","is_normal","len","len","master_seed","master_seed","ne","ne","ne","ne","network","network","network_priv","network_priv","network_pub","network_pub","new","new_master","parent_fingerprint","parent_fingerprint","partial_cmp","partial_cmp","public_key","result_sha512","result_sha512","ripemd_160","ripemd_160","secret_key","serialize","serialize","sha_256","sha_256","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","index","index","0","0","0","0","ExtKeychain","blind_sum","borrow","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","commit","derive_key","derive_key_id","fmt","from","from_mnemonic","from_random_seed","from_seed","hasher","into","mask_master_key","master","pub_root_key","public_root_key","root_key_id","secp","sign","sign_with_blinding","to_owned","try_from","try_into","type_id","BadChecksum","BadWord","Error","InvalidLength","WORDS","borrow","borrow","borrow_mut","borrow_mut","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","deref","deserialize","eq","fmt","fmt","from","from","from_entropy","initialize","into","into","ne","search","serialize","to_entropy","to_owned","to_seed","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","1","ViewKey","borrow","borrow_mut","child_number","ckd_pub","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","commit","create","depth","eq","fmt","from","into","is_floo","ne","rewind_hash","to_owned","try_from","try_into","type_id"],"q":["epic_keychain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_keychain::Error","","","","epic_keychain::extkey_bipepic_keychain::extkey_bip32::ChildNumber","","epic_keychain::extkey_bip32::Error","","","","epic_keychain::keychain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_keychain::mnemonic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_keychain::mnemonic::Error","","","","epic_keychain::view_key","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Accumulator to compute the sum of blinding factors. Keeps …","","","Encapsulates a max 4-level deep BIP32 path, which is the …","","","","","","","","","","","","","Adds the provided key to the sum of blinding factors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derives a key id from the depth of the keychain and the …","","","","","","","","","","","","","","Implementation of BIP32 hierarchical deterministic …","","","","","","","","","","","","","","","","","","","","from an Indentifier [manual deserialization]","Generates a keychain from a list of space-separated …","","","Generates a keychain from a randomly generated seed. …","Return the identifier of the secret key which is the …","","Generates a keychain from a raw binary seed (which has …","restore from a serialized path","","","","","","","","","","Last part of the path (for last n_child)","XOR masks the keychain’s master key against another key","BIP39 Implementation","","","","","","","","Creates a new blinding factor sum.","Return a new chain path with given derivation and depth","Return the parent path","","","","","The public root key","Root identifier for that keychain","","","","","","","output the path itself, for insertion into bulletproof …","","","Split a blinding_factor (aka secret_key) into a pair of …","Subtracts the provided key to the sum of blinding factors.","","","","","","to an Identifier [manual serialization]","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of the above that uses the standard BIP32 …","Allow different implementations of hash functions used in …","A pk-&gt;pk derivation was attempted on a hardened key","A chain code","A child number for a derived key","A secp256k1 error occured","A BIP32 error","Extended private key","Extended public key","A fingerprint","Hardened key","A child number was provided that was out of range","Error converting mnemonic to seed","Non-hardened key","Error creating a master seed — for application use","","","Returns the underlying bytes.","Returns the underlying bytes.","Converts the object to a mutable raw pointer","Converts the object to a mutable raw pointer","Converts the object to a raw pointer","Converts the object to a raw pointer","","","","","","","","","","","","","","","","Chain code","Chain code","Child number of the key used to derive from parent (0 for …","Child number of the key used to derive from parent (0 for …","Private-&gt;Private child key derivation","Public-&gt;Public child key derivation","Compute the scalar tweak added to this key to get a child …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How many derivations this key is from the master (which is …","How many derivations this key is from the master (which is …","Attempts to derive an extended private key from a path.","Attempts to derive an extended public key from a path.","","","","","","","","","","Returns the first four bytes of the identifier","Returns the first four bytes of the identifier","","","","","","","","","","","","","","","","","","","","","","","Create a <code>Hardened</code> from an index, panics if the index is …","Construct a new master key from a mnemonic and a passphrase","Create a <code>Normal</code> from an index, panics if the index is not …","Derives a public key from a private key","","","","","","","Returns the HASH160 of the chaincode","Returns the HASH160 of the chaincode","","","","","","","","","","","","","","","","","","","","Returns the underlying bytes.","Returns the underlying bytes.","Returns whether the object, as an array, is empty. Always …","Returns whether the object, as an array, is empty. Always …","Returns <code>true</code> if the child number is a <code>Hardened</code> value.","Returns <code>true</code> if the child number is a <code>Normal</code> value.","Returns the length of the object as an array","Returns the length of the object as an array","","","","","","","The network this key is to be used on","The network this key is to be used on","","","","","New empty hasher","Construct a new master key from a seed value","Fingerprint of the parent key (0 for master)","Fingerprint of the parent key","","","Public key","","","","","Secret key","","","","","Returns the underlying bytes.","Returns the underlying bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Key index, within [0, 2^31 - 1]","Key index, within [0, 2^31 - 1]","","","","","","","","","","","","","","","","","","","","","For testing - probably not a good idea to use outside of …","","","","","","","","","","","","","","","","Checksum was not correct (expected, actual)","Invalid word encountered","An error that might occur during mnemonic decoding","The number of words/bytes was invalid","List of bip39 words","","","","","","","","","","","","","","","","","","Converts entropy to a mnemonic","","","","","Returns the index of a word in the wordlist","","Converts a mnemonic to entropy","","Converts a nemonic and a passphrase into a seed","","","","","","","","","","","","Key that can be used to scan the chain for owned outputs …","","","Child number of the key used to derive from parent (0 for …","","","","","","","","","","How many derivations this key is from the master (which is …","","","","","Whether this view key is meant for floonet or not","","Hash used to generate rewind nonce","","","",""],"i":[0,0,0,0,0,0,1,0,2,1,2,1,1,0,1,3,4,4,5,3,6,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,1,5,3,4,7,2,5,6,3,7,6,6,1,1,5,3,7,2,3,1,5,3,4,7,2,0,1,1,5,5,3,4,7,2,1,1,1,5,3,4,7,2,5,5,3,7,6,5,5,6,5,3,6,5,3,5,1,5,3,4,7,2,0,7,6,0,1,5,3,4,7,4,4,4,7,5,5,7,4,4,6,6,6,3,1,5,3,2,5,6,6,3,4,4,5,5,5,3,7,1,5,3,4,7,2,5,1,5,5,1,5,3,4,7,2,2,1,5,3,4,7,2,1,5,3,4,7,2,0,5,3,3,8,9,10,11,0,0,12,0,0,12,0,0,0,0,13,12,12,13,12,14,15,16,17,16,17,16,17,16,17,15,18,19,13,12,16,17,15,18,19,13,12,12,18,19,18,19,18,19,19,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,17,18,19,18,19,12,13,12,16,17,18,19,13,12,18,19,16,17,15,18,18,19,19,13,13,12,12,16,16,17,17,15,18,19,13,13,12,12,13,18,13,19,18,19,16,17,16,17,18,19,16,16,16,16,16,17,17,17,17,17,14,15,16,17,15,18,19,13,12,16,17,16,17,13,13,16,17,14,15,18,19,13,12,18,19,14,15,14,15,15,18,18,19,16,17,19,14,15,14,15,18,13,12,14,15,16,17,16,17,15,18,19,13,12,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,16,17,15,18,19,13,12,20,21,22,23,24,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,0,27,0,28,27,28,27,27,27,27,27,27,27,28,27,27,27,27,28,27,0,28,28,27,27,0,27,0,27,0,27,28,27,28,27,28,27,29,30,31,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["blindingfactor",3]]],[[["blindingfactor",3]],["blindsum",3]],[[["valueextkeychainpath",3]],["blindsum",3]],[[]],[[]],[[["blindsum",3]],[["blindingfactor",3],["result",4,["blindingfactor","error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",4]],[[],["identifier",3]],[[],["blindingfactor",3]],[[],["blindsum",3]],[[],["extkeychainpath",3]],[[],["switchcommitmenttype",4]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["identifier",3]],["ordering",4]],[[["u64",15],["identifier",3],["switchcommitmenttype",4]],[["result",4,["commitment","error"]],["error",4],["commitment",3]]],[[],["blindingfactor",3]],null,[[["u64",15],["identifier",3],["switchcommitmenttype",4]],[["secretkey",3],["error",4],["result",4,["secretkey","error"]]]],[[["u8",15],["u32",15]],["identifier",3]],[[],["str",15]],[[],["result",4]],[[],[["identifier",3],["result",4,["identifier"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["error",4]],["bool",15]],[[["identifier",3]],["bool",15]],[[["blindingfactor",3]],["bool",15]],[[["blindsum",3]],["bool",15]],[[["extkeychainpath",3]],["bool",15]],[[["switchcommitmenttype",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["identifier",3]],[[["str",15]],[["error",4],["result",4,["identifier","error"]],["identifier",3]]],[[["str",15]],[["blindingfactor",3],["result",4,["blindingfactor","error"]],["error",4]]],[[["identifier",3]],["extkeychainpath",3]],[[["str",15],["bool",15]],[["result",4,["error"]],["error",4]]],[[["extkeychainpath",3]],["identifier",3]],[[["secp256k1",3],["publickey",3]],["identifier",3]],[[["bool",15]],[["result",4,["error"]],["error",4]]],[[["secretkey",3],["secp256k1",3]],[["error",4],["result",4,["identifier","error"]],["identifier",3]]],[[["secretkey",3]],["blindingfactor",3]],[[["bool",15]],[["result",4,["error"]],["error",4]]],[[["u8",15]],["identifier",3]],[[],["blindingfactor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[["secretkey",3]],[["result",4,["error"]],["error",4]]],null,[[["error",4]],["bool",15]],[[["identifier",3]],["bool",15]],[[["blindingfactor",3]],["bool",15]],[[["blindsum",3]],["bool",15]],[[["extkeychainpath",3]],["bool",15]],null,null,[[],["blindsum",3]],[[["u8",15],["u32",15]],["extkeychainpath",3]],[[],["identifier",3]],[[["identifier",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[],["publickey",3]],[[],["identifier",3]],[[],["secp256k1",3]],[[["secp256k1",3]],[["result",4,["secretkey","error"]],["secretkey",3],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["u64",15],["identifier",3],["message",3],["switchcommitmenttype",4]],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[["message",3],["blindingfactor",3]],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[["secp256k1",3]],[["result",4,["splitblindingfactor","error"]],["error",4],["splitblindingfactor",3]]],[[["blindingfactor",3]],["blindsum",3]],[[["valueextkeychainpath",3]],["blindsum",3]],[[],["string",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["identifier",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extkeychainpath",3]],[[],["string",3]],[[],["string",3]],[[["u64",15]],["valueextkeychainpath",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["identifier",3]],[[],["blindingfactor",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],null,null,null,null,[[["childnumber",4],["secp256k1",3]],[["extendedprivkey",3],["error",4],["result",4,["extendedprivkey","error"]]]],[[["childnumber",4],["secp256k1",3]],[["result",4,["extendedpubkey","error"]],["extendedpubkey",3],["error",4]]],[[["childnumber",4],["secp256k1",3]],[["result",4,["error"]],["error",4]]],[[],["chaincode",3]],[[],["fingerprint",3]],[[],["bip32grinhasher",3]],[[],["extendedprivkey",3]],[[],["extendedpubkey",3]],[[],["childnumber",4]],[[],["error",4]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chaincode",3]],["ordering",4]],[[["fingerprint",3]],["ordering",4]],[[],["fingerprint",3]],null,null,[[["secp256k1",3]],[["extendedprivkey",3],["error",4],["result",4,["extendedprivkey","error"]]]],[[["secp256k1",3]],[["result",4,["extendedpubkey","error"]],["extendedpubkey",3],["error",4]]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[["chaincode",3]],["bool",15]],[[["fingerprint",3]],["bool",15]],[[["extendedprivkey",3]],["bool",15]],[[["extendedpubkey",3]],["bool",15]],[[["childnumber",4]],["bool",15]],[[["error",4]],["bool",15]],[[],["fingerprint",3]],[[["secp256k1",3]],["fingerprint",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["chaincode",3]],[[]],[[],["fingerprint",3]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[["error",4]],["error",4]],[[["u32",15]]],[[["secp256k1",3],["str",15],["bool",15]],[["extendedprivkey",3],["error",4],["result",4,["extendedprivkey","error"]]]],[[["u32",15]]],[[["secp256k1",3],["extendedprivkey",3]],["extendedpubkey",3]],[[["str",15]],[["result",4,["extendedprivkey","error"]],["error",4],["extendedprivkey",3]]],[[["str",15]],[["result",4,["extendedpubkey","error"]],["extendedpubkey",3],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[["secp256k1",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["rangeto",3,["usize"]]]],[[["usize",15],["rangefrom",3,["usize"]]]],[[["rangefull",3]]],[[["rangefull",3]]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["rangefrom",3,["usize"]]]],[[["usize",15],["rangeto",3,["usize"]]]],[[["usize",15]],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["extendedprivkey",3]],["bool",15]],[[["extendedpubkey",3]],["bool",15]],[[["childnumber",4]],["bool",15]],[[["error",4]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[["bool",15]],["bip32grinhasher",3]],[[["secp256k1",3]],[["extendedprivkey",3],["error",4],["result",4,["extendedprivkey","error"]]]],null,null,[[["chaincode",3]],[["ordering",4],["option",4,["ordering"]]]],[[["fingerprint",3]],[["ordering",4],["option",4,["ordering"]]]],null,[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["blindsum",3]],[["blindingfactor",3],["result",4,["blindingfactor","error"]],["error",4]]],[[]],[[]],[[],["extkeychain",3]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[]],[[["u64",15],["identifier",3],["switchcommitmenttype",4]],[["result",4,["commitment","error"]],["error",4],["commitment",3]]],[[["u64",15],["identifier",3],["switchcommitmenttype",4]],[["secretkey",3],["error",4],["result",4,["secretkey","error"]]]],[[["u8",15],["u32",15]],["identifier",3]],[[["formatter",3]],["result",6]],[[]],[[["str",15],["bool",15]],[["result",4,["error"]],["error",4]]],[[["bool",15]],[["result",4,["extkeychain","error"]],["extkeychain",3],["error",4]]],[[["bool",15]],[["result",4,["extkeychain","error"]],["extkeychain",3],["error",4]]],[[],["bip32grinhasher",3]],[[]],[[["secretkey",3]],[["result",4,["error"]],["error",4]]],null,[[],["extendedpubkey",3]],[[],["publickey",3]],[[],["identifier",3]],[[],["secp256k1",3]],[[["u64",15],["identifier",3],["message",3],["switchcommitmenttype",4]],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[["message",3],["blindingfactor",3]],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["error",4]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[]],[[],["vec",3]],[[],["result",4]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vec",3]],[["result",4,["string","error"]],["string",3],["error",4]]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["str",15]],[["result",4,["u16","error"]],["u16",15],["error",4]]],[[],["result",4]],[[["str",15]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[]],[[["str",15]],[["error",4],["result",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],null,[[["childnumber",4],["secp256k1",3]],[["result",4,["error"]],["error",4]]],[[],["viewkey",3]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[]],[[["u64",15],["secp256k1",3],["switchcommitmenttype",4]],[["publickey",3],["error",4],["result",4,["publickey","error"]]]],[[["bool",15],["extendedprivkey",3]],[["result",4,["error"]],["error",4]]],null,[[["viewkey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["viewkey",3]],["bool",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Error"],[4,"SwitchCommitmentType"],[3,"BlindingFactor"],[3,"BlindSum"],[3,"Identifier"],[8,"Keychain"],[3,"ExtKeychainPath"],[13,"Secp"],[13,"KeyDerivation"],[13,"Transaction"],[13,"RangeProof"],[4,"Error"],[4,"ChildNumber"],[8,"BIP32Hasher"],[3,"BIP32GrinHasher"],[3,"ChainCode"],[3,"Fingerprint"],[3,"ExtendedPrivKey"],[3,"ExtendedPubKey"],[13,"Normal"],[13,"Hardened"],[13,"Ecdsa"],[13,"InvalidChildNumber"],[13,"RngError"],[13,"MnemonicError"],[3,"ExtKeychain"],[4,"Error"],[3,"WORDS"],[13,"BadWord"],[13,"BadChecksum"],[13,"InvalidLength"],[3,"ViewKey"]]},\
"epic_p2p":{"doc":"Networking code to connect to other peers and exchange …","t":[13,13,3,13,3,3,3,17,3,4,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,3,11,12,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,13,13,13,13,3,13,13,3,13,13,3,13,3,13,3,13,13,3,3,3,4,3,13,3,3,13,3,13,3,13,13,13,13,3,13,3,13,4,17,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,12,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,13,13,13,13,13,13,13,3,13,8,13,13,13,4,4,18,13,13,18,13,13,13,17,17,17,17,13,13,8,13,13,13,13,3,18,3,13,3,3,3,13,13,13,13,4,4,13,13,13,18,18,13,3,18,12,12,11,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,10,10,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,12,11,12,12,11,12,10,11,11,11,11,12,11,10,10,11,12,11,12,11,12,11,12,12,12,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["Banned","Defunct","DummyAdapter","Healthy","Peer","PeerData","Peers","SEND_CHANNEL_CAP","Server","State","accept","adapter","add_banned","add_connected","addr","all_peers","ban_peer","ban_reason","block_received","block_received","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","broadcast_compact_block","broadcast_header","broadcast_transaction","capabilities","check_all","clean_peers","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","compact_block_received","compact_block_received","config","connect","connect","connected_peers","deserialize","deserialize","disconnect_peer","enough_outbound_peers","eq","exists_peer","find_peer_addrs","find_peer_addrs","find_peers","flags","fmt","fmt","fmt","from","from","from","from","from","from","from_i64","from_u64","get_block","get_block","get_connected_peer","get_peer","get_tmp_dir","get_tmp_dir","get_tmpfile_pathname","get_tmpfile_pathname","get_transaction","get_transaction","handshake","header_received","header_received","headers_received","headers_received","incoming_connected_peers","info","into","into","into","into","into","into","is_abusive","is_banned","is_banned","is_banned","is_banned","is_connected","is_denied","is_known","is_stuck","kernel_data_read","kernel_data_read","kernel_data_write","kernel_data_write","last_banned","last_connected","last_min_message_counts","last_min_received_bytes","last_min_sent_bytes","listen","local_timestamp","locate_headers","locate_headers","more_or_same_work_peers","more_work_peer","more_work_peers","most_work_peer","most_work_peers","msg","new","new","outgoing_connected_peers","pause","peer_addrs_received","peer_addrs_received","peer_count","peer_difficulty","peer_difficulty","peer_inbound_count","peer_outbound_count","peers","read","remove_expired","save_peer","self_address_mut","self_address_mut","self_address_mut","self_address_mut","send_ban_reason","send_block","send_block_request","send_compact_block","send_compact_block_request","send_header","send_header_request","send_kernel_data_request","send_peer_request","send_ping","send_stem_transaction","send_transaction","send_tx_kernel_hash","send_tx_request","send_txhashset_request","serialize","serialize","set_banned","stop","stop","stop","to_owned","to_owned","total_difficulty","total_difficulty","total_height","total_height","transaction_received","transaction_received","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_kernel_received","tx_kernel_received","txhashset_archive_header","txhashset_archive_header","txhashset_download_update","txhashset_download_update","txhashset_read","txhashset_read","txhashset_receive_ready","txhashset_receive_ready","txhashset_write","txhashset_write","type_id","type_id","type_id","type_id","type_id","type_id","types","unban_peer","update_state","user_agent","vzip","vzip","vzip","vzip","vzip","vzip","wait","write","Handshake","accept","addrs","borrow","borrow_mut","borrow_replacement","from","initiate","into","new","try_from","try_into","type_id","vzip","BanReason","BanReason","Block","CompactBlock","Error","GetBlock","GetCompactBlock","GetHeaders","GetPeerAddrs","GetPeerAddrs","GetTransaction","Hand","Hand","Header","Headers","Headers","KernelDataRequest","KernelDataRequest","KernelDataResponse","KernelDataResponse","Known","Locator","Msg","MsgHeader","MsgHeaderWrapper","PeerAddrs","PeerAddrs","PeerError","Ping","Ping","Pong","Pong","Shake","Shake","StemTransaction","Transaction","TransactionKernel","TxHashSetArchive","TxHashSetArchive","TxHashSetRequest","TxHashSetRequest","Type","USER_AGENT","Unknown","add_attachment","ban_reason","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","bytes","bytes","capabilities","capabilities","capabilities","clone","clone","clone","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","code","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","genesis","genesis","hash","hash","hashes","headers","height","height","height","height","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","local_timestamp","local_timestamp","message","msg_len","msg_type","new","new","nonce","peers","read","read","read","read","read","read","read","read","read","read","read","read","read","read_body","read_discard","read_header","read_item","read_message","receiver_addr","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","sender_addr","to_owned","to_owned","to_owned","total_difficulty","total_difficulty","total_difficulty","total_difficulty","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_agent","user_agent","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write_message","0","0","1","0","BadBlock","BadBlockHeader","BadCompactBlock","BadHandshake","BadMessage","BadTxHashSet","Banned","Capabilities","Chain","ChainAdapter","Connection","ConnectionClose","DNSSeed","Direction","Error","FULL_NODE","FraudHeight","GenesisMismatch","HEADER_HIST","Inbound","Internal","List","MAX_BLOCK_BODIES","MAX_BLOCK_HEADERS","MAX_LOCATORS","MAX_PEER_ADDRS","ManualBan","MsgLen","NetAdapter","NoDandelionRelay","None","None","Outbound","P2PConfig","PEER_LIST","PeerAddr","PeerException","PeerInfo","PeerInfoDisplay","PeerLiveInfo","PeerNotBanned","PeerNotFound","PeerWithSelf","Programmatic","ReasonForBan","Seeding","Send","Serialization","Store","TXHASHSET_HIST","TX_KERNEL_HASH","Timeout","TxHashSetRead","UNKNOWN","addr","addr","all","as_key","ban_window","ban_window","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_received","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","capabilities","capabilities","capabilities","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compact_block_received","contains","dandelion_peer","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direction","direction","empty","eq","eq","eq","eq","eq","eq","extend","find_peer_addrs","first_seen","first_seen","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_i64","from_i64","from_ip","from_iter","from_u64","from_u64","get_block","get_tmp_dir","get_tmpfile_pathname","get_transaction","hash","hash","header_received","headers_received","height","height","height","host","insert","intersects","into","into","into","into","into","into","into","into","into","into","into","is_all","is_banned","is_empty","is_inbound","is_outbound","kernel_data_read","kernel_data_write","kernel_index","last_seen","last_seen","live_info","local_timestamp","local_timestamp","locate_headers","ne","ne","new","not","output_index","partial_cmp","peer_addrs_received","peer_difficulty","peer_listener_buffer_count","peer_listener_buffer_count","peer_max_inbound_count","peer_max_inbound_count","peer_max_outbound_count","peer_max_outbound_count","peer_min_preferred_outbound_count","peer_min_preferred_outbound_count","peers_allow","peers_deny","peers_preferred","port","read","reader","remove","seeding_type","seeds","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","stuck_detector","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","total_difficulty","total_difficulty","total_difficulty","total_difficulty","total_height","transaction_received","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_kernel_received","txhashset_archive_header","txhashset_download_update","txhashset_read","txhashset_receive_ready","txhashset_write","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","user_agent","user_agent","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","0","0","0","0","0","peer","us"],"q":["epic_p2pepic_p2p::handshake","","","","","","","","","","","","","","epic_p2p::msgepic_p2p::msg::MsgHeaderWrapper","","","epic_p2p::typesepic_p2p::types::Error","","","","","",""],"d":["","","A no-op network adapter used for testing.","","","Data stored for any given peer we’ve encountered.","","","P2P server implementation, handling bootstrapping to find …","","","","Add a peer as banned to block future connections, usually …","Adds the peer to our internal peer mapping. Note that the …","Network address of the peer.","All peer information we have in storage","Ban a peer, disconnecting it if we’re currently connected","The reason for the ban","","","","","","","","","","","","","","","","","","","","","Broadcast a compact block to all our connected peers. This …","Broadcast a block header to all our connected peers. A …","Broadcasts the provided transaction to all our connected …","What capabilities the peer advertises. Unknown until a …","Ping all our connected peers. Always automatically expects …","Iterate over the peer list and prune all peers we have …","","","","","","","","","","","","","","","","","","","","","Asks the server to connect to a new peer. Directly returns …","Get vec of peers we are currently connected to.","","","Ban a peer, disconnecting it if we’re currently connected","We have enough outbound connected peers","","Whether we’ve already seen a peer with the provided …","Find good peers we know with the provided capability and …","","Find peers in store (not necessarily connected) and return …","State the peer has been detected with.","","","","","","","","","","","","","","Get a peer we’re connected to by address.","Get peer in store by address","","","","","","","","","","","","Get vec of peers we currently have an incoming connection …","","","","","","","","Whether the peer is considered abusive, mostly for spammy …","Whether this peer has been banned.","","","","Whether this peer is currently connected.","","Check if this peer address is already known (are we …","Whether this peer is stuck on sync.","","","","","The time the peer was last banned","Time when we last connected to this peer.","","Number of bytes received from the peer","Number of bytes sent to the peer","Starts a new TCP server and listen to incoming …","Local utc from peer","","","","Returns single random peer with more work than us.","","Returns single random peer with the most worked branch, …","Return vec of connected peers that currently have the most …","Message types that transit over the network and related …","","Creates a new idle p2p server with no peers","Get vec of peers we currently have an outgoing connection …","Pause means: stop all the current peers connection, only …","A list of peers has been received from one of our peers.","","Number of peers currently connected to.","","","Number of inbound peers currently connected to.","Number of outbound peers currently connected to.","","","Removes those peers that seem to have expired","Saves updated information about a peer","","","","","Send the ban reason before banning","Sends the provided block to the remote peer. The request …","Sends a request for a specific block by hash. Takes opts …","","Sends a request for a specific compact block by hash","","Sends a request for block headers from the provided block …","","","Send a ping to the remote peer, providing our local …","Sends the provided stem transaction to the remote peer. …","Sends the provided transaction to the remote peer. The …","","","","","","Set this peer status to banned","Stops the peer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unban a peer, checks if it exists and banned then unban","Updates the state of a peer in store","The peer user agent.","","","","","","","Waits until the peer’s thread exit","","Handles the handshake negotiation when two peers connect …","","Ring buffer of self addr(s) collected from PeerWithSelf …","","","","","","","Creates a new handshake handler","","","","","","","","","","","","","Ask for other peers addresses, required for network …","","","First part of a handshake, sender advertises its version …","","","Serializable wrapper for a list of block headers.","","","","","","A “known” msg type with deserialized msg header.","Serializable wrapper for the block locator.","","Header of any protocol message, used to identify incoming …","A wrapper around a message header. If the header is for an …","Peer addresses we know of that are fresh enough, in …","","We found some issue in the communication, sending an error …","","","","","Second part of a handshake, receiver of the first part …","","","","","Response to a txhashset archive request, must include a …","","Request to get an archive of the full txhashset store, …","","","Epic’s user agent with current version","An unknown msg type with corresponding msg size in bytes.","","the reason for the ban","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Size in bytes of the archive","Size in bytes of the attached kernel data file.","capabilities of the sender","sender capabilities","Filters on the capabilities we’d like the peers to have","","","","","","","","","","","","","","","","","","","","","","","","","error code","","","","","","","","","","","","","","","","","","","","","","","","","","genesis block of our chain, only connect to peers on the …","genesis block of our chain, only connect to peers on the …","Hash of the block for which the txhashset should be …","Hash of the block for which the txhashset are provided","","","total height","height accumulated by sender","Height of the corresponding block","Height of the corresponding block","","","","","","","","","","","","","","","","","","","local time","local time","slightly more user friendly message","Total length of the message in bytes.","Type of the message.","","Creates a new message header.","randomly generated for each handshake, helps detect self","","","","","","","","","","","","","","","Read a message body from the provided stream, always …","Read (an unknown) message from the provided stream and …","Read a header from the provided stream without blocking if …","Read a single item from the provided stream, always …","Reads a full message from the underlying stream.","network address of the receiver","","","","","","","network address of the sender","","","","total difficulty accumulated by the sender, used to check …","total difficulty accumulated by the sender, used to check …","total difficulty accumulated by the sender, used to check …","total difficulty accumulated by the sender, used to check …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","name of version of the software","name of version of the software","protocol version of the sender","sender version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Header type does not match the expected message type","","","Options for what type of interaction a peer supports","","Bridge between the networking layer and the rest of the …","","","Automatically get a list of seeds from multiple DNS","","","All nodes right now are “full nodes”. Some nodes …","","","Can provide full history of headers back to genesis (for …","","","A list of seed addresses provided to the server","Maximum number of block bodies a peer should ever ask for …","Maximum number of block headers a peer should ever send","Maximum number of block header hashes to send as part of a …","Maximum number of peer addresses a peer should ever send","","","Additional methods required by the protocol that don’t …","","No seeding, mostly for tests that programmatically connect","","","Configuration for the peer-to-peer server.","Can provide a list of healthy peers","","","General information about a connected peer that’s useful …","Flatten out a PeerInfo and nested PeerLiveInfo (taking a …","","","","","Mostly for tests, where connections are initiated …","","Type of seeding the server will use to find other peers on …","","","","Can provide block headers and the TxHashSet for some …","Can broadcast and request txs by kernel hash.","","The full txhashset data along with indexes required for a …","We don’t know (yet) what the peer can do.","","","Returns the set containing all flags.","If the ip is loopback then our key is “ip:port” …","return ban window","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","A block has been received from one of our peers. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Capabilities expose by this node, also conditions which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","Returns an empty set of flags","If loopback address then we care about ip and port. If …","","","","","","","Find good peers we know with the provided capability and …","Time of first_seen for this peer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Convenient way of constructing a new peer_addr from an …","","","","Gets a full block by its hash.","Get the Epic specific tmp dir","Get a tmp file path in above specific tmp dir (create tmp …","","If loopback address then we care about ip and port. If …","","","A set of block header has been received, typically in …","The current height of the peer.","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Is this peer currently banned?","Returns <code>true</code> if no flags are currently stored.","","","","","Kernel tree index the receiver should rewind to","Time of last_seen for this peer (via ping/pong).","","","Local Time of this peer.","","Finds a list of block headers based on the provided …","","","","Returns the complement of this set of flags.","Output tree index the receiver should rewind to","","A list of peers has been received from one of our peers.","Heard total_difficulty from a connected peer (via …","return peer buffer count for listener","","return maximum inbound peer connections count","","return maximum outbound peer connections count","","return minimum preferred outbound peer count","","","","The list of preferred peers that we will try to connect to","","","Binary stream for the txhashset zipped data","Removes the specified flags in-place.","Method used to get the list of seed nodes for initial …","The list of seed nodes, if using Seeding as a seed type","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","","","Toggles the specified flags in-place.","Current total difficulty on our chain","The current total_difficulty of the peer.","","","Current total height","A valid transaction has been received from one of our peers","","","","","","","","","","","","","","","","","","","","","","","","Header of the txhashset archive currently being served to …","Update txhashset downloading progress","Provides a reading view into the current txhashset state …","Whether the node is ready to accept a new txhashset. If …","Writes a reading view on a txhashset state that’s been …","","","","","","","","","","","","Update the total_difficulty, height and last_seen of the …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,0,0,0,0,0,0,2,3,3,3,4,3,3,4,3,5,2,3,6,5,1,4,2,3,6,5,1,4,2,3,6,5,1,4,3,3,3,4,3,3,1,4,1,4,1,4,1,4,1,4,1,1,4,4,1,4,3,5,6,2,6,3,1,4,3,3,1,3,3,5,3,4,2,1,4,2,3,6,5,1,4,1,1,3,5,3,3,3,5,3,5,3,5,0,3,5,3,5,3,2,2,3,6,5,1,4,2,2,3,3,5,2,2,3,2,3,5,3,5,4,4,2,2,2,6,4,3,5,3,3,3,3,3,0,3,6,3,6,3,5,3,3,5,3,3,6,4,3,3,1,1,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,2,2,3,6,1,4,3,5,3,5,3,5,2,3,6,5,1,4,2,3,6,5,1,4,3,5,3,5,3,5,3,5,3,5,3,5,2,3,6,5,1,4,0,3,3,4,2,3,6,5,1,4,2,4,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,0,8,8,0,8,8,0,8,0,8,0,8,9,0,0,0,0,0,8,0,0,8,0,8,0,8,8,8,8,0,8,0,8,0,0,9,10,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,20,22,12,13,14,8,9,23,8,9,23,8,9,23,8,9,23,8,9,23,8,8,9,9,23,23,8,9,23,15,8,8,24,25,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,8,8,12,13,19,20,25,16,17,18,19,20,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,17,18,15,23,23,10,23,12,24,12,13,14,15,17,18,19,20,22,9,24,25,11,0,0,0,0,0,12,8,8,9,9,23,23,12,8,9,23,12,13,17,18,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,12,13,12,13,10,12,13,14,15,16,17,18,19,20,21,22,8,9,23,24,25,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,11,0,26,27,27,28,29,29,29,29,30,29,30,0,30,0,30,30,31,0,0,32,29,30,32,33,30,31,0,0,0,0,29,30,0,30,31,29,33,0,32,0,30,0,0,0,30,30,30,31,0,0,30,30,30,32,32,30,0,32,34,35,32,28,36,36,32,32,32,32,32,32,32,37,38,30,28,36,31,32,33,29,39,34,35,38,30,28,36,31,32,33,29,39,34,35,38,30,28,36,31,32,33,29,39,34,35,36,34,35,28,36,31,32,33,29,39,34,35,28,36,31,32,33,29,39,34,35,28,36,31,32,33,29,39,34,35,28,36,31,32,33,29,39,34,35,28,36,31,32,33,29,39,34,35,28,28,36,36,31,31,32,32,33,33,29,29,39,39,34,34,35,35,28,36,31,32,33,29,39,34,35,32,37,32,36,36,31,28,36,31,32,33,29,35,34,35,32,28,36,31,32,33,29,32,40,34,39,30,28,28,36,31,32,32,32,32,32,33,29,39,34,35,38,30,30,30,30,30,28,36,31,32,33,29,39,34,35,35,32,32,32,33,29,28,32,33,29,37,37,37,37,28,32,37,37,34,39,35,36,32,32,38,30,28,36,31,32,33,29,39,34,35,32,40,32,34,34,37,37,38,34,39,34,34,39,37,36,32,39,32,38,32,40,40,36,36,36,36,36,36,36,36,36,36,36,36,28,38,32,36,36,28,28,36,36,31,31,32,32,33,33,29,29,39,39,34,34,35,35,28,36,31,32,33,29,35,32,39,32,32,28,36,31,32,33,29,39,34,35,28,32,37,34,39,35,37,37,38,30,28,36,31,32,33,29,39,34,35,38,30,28,36,31,32,33,29,39,34,35,37,37,37,37,37,37,38,30,28,36,31,32,33,29,39,34,35,34,34,35,34,35,38,30,28,36,31,32,33,29,39,34,35,28,41,42,43,44,45,46,46],"f":[null,null,null,null,null,null,null,null,null,null,[[["tcpstream",3],["capabilities",3],["arc",3,["netadapter"]],["netadapter",8],["handshake",3],["difficulty",3]],[["error",4],["result",4,["peer","error"]],["peer",3]]],null,[[["reasonforban",4],["peeraddr",3]],[["error",4],["result",4,["error"]]]],[[["arc",3,["peer"]],["peer",3]],[["error",4],["result",4,["error"]]]],null,[[],[["vec",3,["peerdata"]],["peerdata",3]]],[[["reasonforban",4],["peeraddr",3]],[["error",4],["result",4,["error"]]]],null,[[["block",3],["peerinfo",3],["options",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["block",3],["peerinfo",3],["options",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compactblock",3]]],[[["blockheader",3]]],[[["transaction",3]]],null,[[["u64",15],["difficulty",3]]],[[["usize",15]]],[[],["state",4]],[[],["peerdata",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[]],[[]],[[["compactblock",3],["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["compactblock",3],["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],null,[[["tcpstream",3],["capabilities",3],["arc",3,["netadapter"]],["netadapter",8],["peeraddr",3],["handshake",3],["difficulty",3]],[["error",4],["result",4,["peer","error"]],["peer",3]]],[[["peeraddr",3]],[["error",4],["result",4,["arc","error"]],["arc",3,["peer"]]]],[[],[["arc",3,["peer"]],["vec",3,["arc"]]]],[[],["result",4]],[[],["result",4]],[[["peeraddr",3]],[["error",4],["result",4,["error"]]]],[[],["bool",15]],[[["state",4]],["bool",15]],[[["peeraddr",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["capabilities",3]],[["peeraddr",3],["vec",3,["peeraddr"]]]],[[["capabilities",3]],[["peeraddr",3],["vec",3,["peeraddr"]]]],[[["usize",15],["capabilities",3],["state",4]],[["vec",3,["peerdata"]],["peerdata",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["hash",3]],[["block",3],["option",4,["block"]]]],[[["hash",3]],[["block",3],["option",4,["block"]]]],[[["peeraddr",3]],[["option",4,["arc"]],["arc",3,["peer"]]]],[[["peeraddr",3]],[["result",4,["peerdata","error"]],["error",4],["peerdata",3]]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[["string",3]],["pathbuf",3]],[[["string",3]],["pathbuf",3]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],null,[[["peerinfo",3],["blockheader",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3],["blockheader",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],[["arc",3,["peer"]],["vec",3,["arc"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["peeraddr",3]],["bool",15]],[[["peeraddr",3]],["bool",15]],[[["peeraddr",3]],["bool",15]],[[],["bool",15]],[[["peeraddr",3],["p2pconfig",3]],["bool",15]],[[["peeraddr",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[["read",8]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["read",8]],[["result",4,["bool","error"]],["error",3],["bool",15]]],null,null,[[],["option",4]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["error",4],["result",4,["error"]]]],null,[[],[["result",4,["vec","error"]],["vec",3,["blockheader"]],["error",3]]],[[],[["result",4,["vec","error"]],["vec",3,["blockheader"]],["error",3]]],[[],[["usize",15],["result",4,["usize","error"]],["error",3]]],[[],[["option",4,["arc"]],["arc",3,["peer"]]]],[[],[["result",4,["vec","error"]],["error",3],["vec",3,["arc"]]]],[[],[["option",4,["arc"]],["arc",3,["peer"]]]],[[],[["arc",3,["peer"]],["vec",3,["arc"]]]],null,[[["chainadapter",8],["peerstore",3],["arc",3,["chainadapter"]],["p2pconfig",3]],["peers",3]],[[["hash",3],["arc",3,["chainadapter"]],["str",15],["arc",3,["stopstate"]],["capabilities",3],["chainadapter",8],["stopstate",3],["p2pconfig",3]],[["error",4],["server",3],["result",4,["server","error"]]]],[[],[["arc",3,["peer"]],["vec",3,["arc"]]]],[[]],[[["peeraddr",3],["vec",3,["peeraddr"]]]],[[["peeraddr",3],["vec",3,["peeraddr"]]]],[[],["u32",15]],[[["u64",15],["i64",15],["peeraddr",3],["difficulty",3]]],[[["u64",15],["i64",15],["peeraddr",3],["difficulty",3]]],[[],["u32",15]],[[],["u32",15]],null,[[["reader",8]],[["peerdata",3],["error",4],["result",4,["peerdata","error"]]]],[[]],[[["peerdata",3]],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["reasonforban",4]],[["error",4],["result",4,["error"]]]],[[["block",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["options",3],["hash",3]],[["error",4],["result",4,["error"]]]],[[["compactblock",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["hash",3]],[["error",4],["result",4,["error"]]]],[[["blockheader",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["vec",3,["hash"]],["hash",3]],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["capabilities",3]],[["error",4],["result",4,["error"]]]],[[["u64",15],["i64",15],["difficulty",3]],[["error",4],["result",4,["error"]]]],[[["transaction",3]],[["error",4],["result",4,["error"]]]],[[["transaction",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["hash",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["hash",3]],[["error",4],["result",4,["error"]]]],[[["u64",15],["hash",3]],[["error",4],["result",4,["error"]]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["difficulty","error"]],["difficulty",3]]],[[],[["error",3],["result",4,["difficulty","error"]],["difficulty",3]]],[[],[["result",4,["u64","error"]],["u64",15],["error",3]]],[[],[["result",4,["u64","error"]],["u64",15],["error",3]]],[[["transaction",3],["bool",15]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["transaction",3],["bool",15]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["peerinfo",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],[["result",4,["blockheader","error"]],["blockheader",3],["error",3]]],[[],[["result",4,["blockheader","error"]],["blockheader",3],["error",3]]],[[["u64",15],["datetime",3,["utc"]],["utc",3]],["bool",15]],[[["u64",15],["datetime",3,["utc"]],["utc",3]],["bool",15]],[[["hash",3]],[["option",4,["txhashsetread"]],["txhashsetread",3]]],[[["hash",3]],[["option",4,["txhashsetread"]],["txhashsetread",3]]],[[],["bool",15]],[[],["bool",15]],[[["peerinfo",3],["file",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3],["file",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["peeraddr",3]],[["error",4],["result",4,["error"]]]],[[["peeraddr",3],["state",4]],[["error",4],["result",4,["error"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],null,[[["tcpstream",3],["capabilities",3],["difficulty",3]],[["peerinfo",3],["error",4],["result",4,["peerinfo","error"]]]],null,[[]],[[]],[[]],[[]],[[["capabilities",3],["tcpstream",3],["peeraddr",3],["difficulty",3]],[["peerinfo",3],["error",4],["result",4,["peerinfo","error"]]]],[[]],[[["p2pconfig",3],["hash",3]],["handshake",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["file",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[],["type",4]],[[],["msgheaderwrapper",4]],[[],["msgheader",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[]],[[]],[[]],null,[[["type",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["writeable",8],["protocolversion",3],["type",4]],[["error",4],["result",4,["msg","error"]],["msg",3]]],[[["u64",15],["type",4]],["msgheader",3]],null,null,[[["reader",8]],[["result",4,["hand","error"]],["hand",3],["error",4]]],[[["reader",8]],[["shake",3],["error",4],["result",4,["shake","error"]]]],[[["reader",8]],[["getpeeraddrs",3],["error",4],["result",4,["getpeeraddrs","error"]]]],[[["reader",8]],[["peererror",3],["error",4],["result",4,["peererror","error"]]]],[[["reader",8]],[["result",4,["ping","error"]],["error",4],["ping",3]]],[[["reader",8]],[["pong",3],["error",4],["result",4,["pong","error"]]]],[[["reader",8]],[["result",4,["txhashsetrequest","error"]],["error",4],["txhashsetrequest",3]]],[[["reader",8]],[["txhashsetarchive",3],["result",4,["txhashsetarchive","error"]],["error",4]]],[[["reader",8]],[["result",4,["kerneldataresponse","error"]],["kerneldataresponse",3],["error",4]]],[[["reader",8]],[["result",4,["msgheaderwrapper","error"]],["error",4],["msgheaderwrapper",4]]],[[["reader",8]],[["peeraddrs",3],["result",4,["peeraddrs","error"]],["error",4]]],[[["reader",8]],[["locator",3],["result",4,["locator","error"]],["error",4]]],[[["reader",8]],[["result",4,["banreason","error"]],["error",4],["banreason",3]]],[[["read",8],["protocolversion",3],["msgheader",3]],[["error",4],["result",4,["error"]],["readable",8]]],[[["u64",15],["read",8]],[["error",4],["result",4,["error"]]]],[[["read",8],["protocolversion",3]],[["error",4],["result",4,["msgheaderwrapper","error"]],["msgheaderwrapper",4]]],[[["read",8],["protocolversion",3]],[["error",4],["result",4,["error"]]]],[[["read",8],["protocolversion",3],["type",4]],[["error",4],["result",4,["error"]],["readable",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["tracker",3],["arc",3,["tracker"]],["msg",3],["write",8]],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["capabilities",3]],[[],["string",3]],[[],["i64",15]],null,[[["capabilities",3]],["capabilities",3]],[[["capabilities",3]]],[[["capabilities",3]],["capabilities",3]],[[["capabilities",3]]],[[],["u32",15]],[[["capabilities",3]],["capabilities",3]],[[["capabilities",3]]],[[["block",3],["peerinfo",3],["options",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["peeraddr",3]],[[],["p2pconfig",3]],[[],["seeding",4]],[[],["capabilities",3]],[[],["direction",4]],[[],["reasonforban",4]],[[],["peerliveinfo",3]],[[],["peerinfo",3]],[[],["peerinfodisplay",3]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[],[["global",3],["nonsyncfeatures",8],["box",3,["nonsyncfeatures","global"]]]],[[],[["defaultfeatures",8],["box",3,["defaultfeatures","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["capabilities",3]],["ordering",4]],[[["compactblock",3],["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["capabilities",3]],["bool",15]],null,[[],["p2pconfig",3]],[[],["seeding",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["capabilities",3]],[[["peeraddr",3]],["bool",15]],[[["p2pconfig",3]],["bool",15]],[[["seeding",4]],["bool",15]],[[["capabilities",3]],["bool",15]],[[["direction",4]],["bool",15]],[[["reasonforban",4]],["bool",15]],[[["intoiterator",8]]],[[["capabilities",3]],[["peeraddr",3],["vec",3,["peeraddr"]]]],[[],[["datetime",3,["utc"]],["utc",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[["error",3]],["error",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["peerinfo",3]],["peerinfodisplay",3]],[[["u32",15]],[["capabilities",3],["option",4,["capabilities"]]]],[[["u32",15]],["capabilities",3]],[[["u32",15]],["capabilities",3]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["ipaddr",4]],["peeraddr",3]],[[["intoiterator",8]],["capabilities",3]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["hash",3]],[["block",3],["option",4,["block"]]]],[[],["pathbuf",3]],[[["string",3]],["pathbuf",3]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],[[]],[[]],[[["peerinfo",3],["blockheader",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["u64",15]],null,null,null,[[["capabilities",3]]],[[["capabilities",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["peeraddr",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[["read",8]],[["result",4,["bool","error"]],["error",3],["bool",15]]],null,[[],[["datetime",3,["utc"]],["utc",3]]],null,null,[[],["i64",15]],null,[[],[["result",4,["vec","error"]],["vec",3,["blockheader"]],["error",3]]],[[["p2pconfig",3]],["bool",15]],[[["capabilities",3]],["bool",15]],[[["difficulty",3]],["peerliveinfo",3]],[[],["capabilities",3]],null,[[["capabilities",3]],[["option",4,["ordering"]],["ordering",4]]],[[["peeraddr",3],["vec",3,["peeraddr"]]]],[[["u64",15],["i64",15],["peeraddr",3],["difficulty",3]]],[[],["u32",15]],null,[[],["u32",15]],null,[[],["u32",15]],null,[[],["u32",15]],null,null,null,null,null,[[["reader",8]],[["result",4,["peeraddr","error"]],["peeraddr",3],["error",4]]],null,[[["capabilities",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["capabilities",3],["bool",15]]],null,[[["capabilities",3]],["capabilities",3]],[[["capabilities",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["capabilities",3]]],[[],[["error",3],["result",4,["difficulty","error"]],["difficulty",3]]],[[],["difficulty",3]],null,null,[[],[["result",4,["u64","error"]],["u64",15],["error",3]]],[[["transaction",3],["bool",15]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["peerinfo",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],[["result",4,["blockheader","error"]],["blockheader",3],["error",3]]],[[["u64",15],["datetime",3,["utc"]],["utc",3]],["bool",15]],[[["hash",3]],[["option",4,["txhashsetread"]],["txhashsetread",3]]],[[],["bool",15]],[[["peerinfo",3],["file",3],["hash",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15],["i64",15],["difficulty",3]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null],"p":[[4,"State"],[3,"Peer"],[3,"Peers"],[3,"PeerData"],[3,"DummyAdapter"],[3,"Server"],[3,"Handshake"],[4,"Type"],[4,"MsgHeaderWrapper"],[3,"Msg"],[3,"BanReason"],[3,"Hand"],[3,"Shake"],[3,"GetPeerAddrs"],[3,"PeerError"],[3,"Headers"],[3,"Ping"],[3,"Pong"],[3,"TxHashSetRequest"],[3,"TxHashSetArchive"],[3,"KernelDataRequest"],[3,"KernelDataResponse"],[3,"MsgHeader"],[3,"PeerAddrs"],[3,"Locator"],[13,"Known"],[13,"Unknown"],[3,"PeerAddr"],[4,"ReasonForBan"],[4,"Error"],[4,"Seeding"],[3,"Capabilities"],[4,"Direction"],[3,"PeerInfo"],[3,"PeerInfoDisplay"],[3,"P2PConfig"],[8,"ChainAdapter"],[3,"TxHashSetRead"],[3,"PeerLiveInfo"],[8,"NetAdapter"],[13,"Serialization"],[13,"Connection"],[13,"Store"],[13,"Chain"],[13,"Send"],[13,"GenesisMismatch"]]},\
"epic_pool":{"doc":"The transaction pool, keeping a view of currently valid …","t":[3,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,0,11,3,12,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,8,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,8,3,3,4,13,4,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,12,11,11,11,11,11,11,10,10,10,12,12,12,12,12,12],"n":["Pool","add_to_pool","all_transactions","all_transactions_aggregate","blockchain","borrow","borrow_mut","bucket_transactions","contains_tx","entries","find_matching_transactions","from","get_tx","into","is_empty","kernel_count","name","new","prepare_mineable_transactions","reconcile","reconcile_block","retrieve_transactions","retrieve_tx_by_kernel_hash","size","transaction_pool","try_from","try_into","type_id","types","validate_raw_txs","TransactionPool","adapter","add_to_pool","blockchain","borrow","borrow_mut","chain_head","config","evict_from_txpool","from","into","new","prepare_mineable_transactions","reconcile_block","reconcile_reorg_cache","reorg_cache","retrieve_transactions","retrieve_tx_by_kernel_hash","stempool","total_size","truncate_reorg_cache","try_from","try_into","txpool","type_id","BlockChain","Broadcast","Committed","DandelionConfig","DandelionError","Deaggregate","DuplicateCommitment","DuplicateTx","EmbargoExpired","Fluff","ImmatureCoinbase","ImmatureTransaction","InvalidBlock","InvalidTx","Keychain","LowFeeTransaction","NoopAdapter","Other","OverCapacity","PoolAdapter","PoolConfig","PoolEntry","PoolError","PushApi","TxSource","accept_fee_base","aggregation_secs","always_stem_our_txs","as_fail","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","chain_head","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","clone_into","clone_into","default","default","deserialize","deserialize","deserialize","deserialize","embargo_secs","epoch_secs","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_block_header","get_block_sums","into","into","into","into","into","into","is_pushed","max_pool_size","max_stempool_size","mineable_max_weight","name","ne","ne","ne","serialize","serialize","serialize","serialize","src","stem_probability","stem_tx_accepted","stem_tx_accepted","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx","tx_accepted","tx_accepted","tx_at","type_id","type_id","type_id","type_id","type_id","type_id","validate_tx","verify_coinbase_maturity","verify_tx_lock_height","0","0","0","0","0","0"],"q":["epic_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_pool::transaction_pool","","","","","","","","","","","","","","","","","","","","","","","","","epic_pool::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_pool::types::PoolError","","","","",""],"d":["","","","Return a single aggregate tx representing all txs in the …","The blockchain","","","Buckets consist of a vec of txs and track the aggregate …","Does the transaction pool contain an entry for the given …","Entries in the pool (tx + info + timer) in simple …","","","","","Is the pool empty?","Number of transaction kernels in the pool. This may differ …","","","Take pool transactions, filtering and ordering them in a …","","Quick reconciliation step - we can evict any txs in the …","Query the tx pool for all known txs based on kernel …","Query the tx pool for an individual tx matching the given …","Size of the pool.","Transaction pool implementation leveraging txhashset for …","","","","The primary module containing the implementations of the …","","Transaction pool implementation.","The pool adapter","Add the given tx to the pool, directing it to either the …","The blockchain","","","","Pool Config","","","","Create a new transaction pool","Returns a vector of transactions from the txpool so we can …","Reconcile the transaction pool (both txpool and stempool) …","","Cache of previous txs in case of a re-org.","Retrieve all transactions matching the provided “compact …","Retrieve individual transaction for the given kernel hash.","Our Dandelion “stempool”.","Get the total size of the pool. Note: we only consider the …","","","","Our transaction pool.","","Interface that the pool requires from a blockchain …","","Underlying “committed” error.","Configuration for “Dandelion”. Note: shared between …","Problem propagating a stem tx to the next Dandelion relay …","","Attempt to add a duplicate output to the pool.","Attempt to add a duplicate tx to the pool.","","","Attempt to spend a coinbase output before it has …","Attempt to add a transaction to the pool with lock_height …","An invalid pool entry caused by underlying block …","An invalid pool entry caused by underlying tx validation …","Underlying keychain error.","Transaction fee is too low given its weight","Dummy adapter used as a placeholder for real …","Other kinds of error (not yet pulled out into meaningful …","Transaction pool is over capacity, can’t accept more …","Bridge between the transaction pool and the rest of the …","Transaction pool configuration","Represents a single entry in the pool. A single (possibly …","Possible errors when interacting with the transaction pool.","","Used to make decisions based on transaction acceptance …","Base fee for a transaction to be accepted by the pool. The …","Dandelion aggregation timer.","Default to always stem our txs as described in Dandelion++ …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dandelion embargo timer. Fluff and broadcast individual …","Length of each “epoch”.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience fn for checking if this tx was sourced via the …","Maximum capacity of the pool in number of transactions","Maximum capacity of the pool in number of transactions","Maximum total weight of transactions that can get selected …","","","","","","","","","Info on where this tx originated from.","Dandelion stem probability (stem 90% of the time, fluff …","The stem transaction pool has accepted this transactions …","","","","","","","","","","","","","","","","","","","The transaction itself.","The transaction pool has accepted this transaction as …","","Timestamp of when this tx was originally added to the pool.","","","","","","","","Verify any coinbase outputs being spent have matured …","Verify any coinbase outputs being spent have matured …","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,4,0,4,3,4,4,3,3,4,4,4,4,4,4,0,4,4,0,0,0,0,3,0,5,6,6,4,4,7,6,5,8,3,4,7,6,5,8,3,4,4,9,6,5,8,3,6,5,8,3,6,5,8,3,6,5,8,3,6,5,8,3,6,5,8,3,6,5,6,5,8,3,6,6,6,5,3,4,6,5,8,3,4,4,7,6,5,8,3,4,4,4,4,4,9,9,7,6,5,8,3,4,3,5,5,5,4,6,5,4,6,5,8,3,8,6,10,7,6,5,8,3,4,7,6,5,8,3,4,7,6,5,8,3,4,8,10,7,8,7,6,5,8,3,4,9,9,9,11,12,13,14,15,16],"f":[null,[[["transaction",3],["vec",3,["transaction"]],["poolentry",3],["blockheader",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[],[["transaction",3],["vec",3,["transaction"]]]],[[],[["option",4,["transaction"]],["result",4,["option","poolerror"]],["poolerror",4]]],null,[[]],[[]],[[["weighting",4]],[["transaction",3],["vec",3,["transaction"]]]],[[["hash",3]],["bool",15]],null,[[],[["transaction",3],["vec",3,["transaction"]]]],[[]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["blockchain",8],["string",3],["arc",3,["blockchain"]]],["pool",3]],[[["usize",15]],[["poolerror",4],["result",4,["vec","poolerror"]],["vec",3,["transaction"]]]],[[["option",4,["transaction"]],["transaction",3],["blockheader",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["block",3]]],[[["u64",15],["hash",3]]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["option",4,["transaction"]],["transaction",3],["weighting",4],["blockheader",3]],[["poolerror",4],["result",4,["vec","poolerror"]],["vec",3,["transaction"]]]],null,null,[[["txsource",4],["transaction",3],["bool",15],["blockheader",3]],[["result",4,["poolerror"]],["poolerror",4]]],null,[[]],[[]],[[],[["blockheader",3],["result",4,["blockheader","poolerror"]],["poolerror",4]]],null,[[]],[[]],[[]],[[["poolconfig",3],["arc",3,["blockchain"]],["blockchain",8],["arc",3,["pooladapter"]],["pooladapter",8]],["transactionpool",3]],[[],[["poolerror",4],["result",4,["vec","poolerror"]],["vec",3,["transaction"]]]],[[["block",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["blockheader",3]],[["result",4,["poolerror"]],["poolerror",4]]],null,[[["u64",15],["hash",3]]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],null,[[],["usize",15]],[[["utc",3],["datetime",3,["utc"]]]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["fail"]],["fail",8]]],[[],[["blockheader",3],["result",4,["blockheader","poolerror"]],["poolerror",4]]],[[],["dandelionconfig",3]],[[],["poolconfig",3]],[[],["poolentry",3]],[[],["txsource",4]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["cloneany",8],["box",3,["cloneany","global"]],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[]],[[]],[[]],[[]],[[],["dandelionconfig",3]],[[],["poolconfig",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["dandelionconfig",3]],["bool",15]],[[["poolconfig",3]],["bool",15]],[[["txsource",4]],["bool",15]],[[["poolerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["poolerror",4]],[[["error",4]],["poolerror",4]],[[["error",4]],["poolerror",4]],[[["error",4]],["poolerror",4]],[[["hash",3]],[["blockheader",3],["result",4,["blockheader","poolerror"]],["poolerror",4]]],[[["hash",3]],[["result",4,["blocksums","poolerror"]],["poolerror",4],["blocksums",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,[[],[["option",4,["str"]],["str",15]]],[[["dandelionconfig",3]],["bool",15]],[[["poolconfig",3]],["bool",15]],[[["poolerror",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["poolentry",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["poolentry",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["poolentry",3]]],[[["poolentry",3]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],null,null,null,null,null,null],"p":[[3,"Pool"],[3,"TransactionPool"],[4,"TxSource"],[4,"PoolError"],[3,"PoolConfig"],[3,"DandelionConfig"],[3,"NoopAdapter"],[3,"PoolEntry"],[8,"BlockChain"],[8,"PoolAdapter"],[13,"InvalidTx"],[13,"InvalidBlock"],[13,"Keychain"],[13,"Committed"],[13,"LowFeeTransaction"],[13,"Other"]]},\
"epic_servers":{"doc":"Main crate putting together all the other crates that …","tn":["Server","borrow","borrow_mut","borrow_replacement","chain","common","config","connect_peer","foundation","from","get_server_stats","head","header_head","into","new","p2p","pause","peer_count","ping_peers","protocol_version","resume","start","start_stratum_server","start_test_miner","stop","stop_state","stop_test_miner","sync_state","try_from","try_into","tx_pool","type_id","vzip","adapters","hooks","stats","types","ChainToPoolAndNetAdapter","DandelionAdapter","NetToChainAdapter","PoolToChainAdapter","PoolToNetAdapter","block_accepted","block_received","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","chain_head","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_boxed","clone_boxed","clone_into","compact_block_received","from","from","from","from","get_block","get_block_header","get_block_sums","get_tmp_dir","get_tmpfile_pathname","get_transaction","header_received","headers_received","init","init","init","into","into","into","into","is_expired","is_expired","is_stem","is_stem","kernel_data_read","kernel_data_write","locate_headers","new","new","new","new","next_epoch","next_epoch","self_address_mut","self_address_mut","set_chain","stem_tx_accepted","to_owned","total_difficulty","total_height","transaction_received","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_accepted","tx_kernel_received","txhashset_archive_header","txhashset_download_update","txhashset_read","txhashset_receive_ready","txhashset_write","type_id","type_id","type_id","type_id","validate_tx","verify_coinbase_maturity","verify_tx_lock_height","vzip","vzip","vzip","vzip","ChainEvents","NetEvents","init_chain_hooks","init_net_hooks","on_block_accepted","on_block_received","on_header_received","on_transaction_received","ChainStats","DiffBlock","DiffStats","PeerStats","ServerStateInfo","ServerStats","StratumStats","TxStats","WorkerStats","addr","algorithm","average_block_time","average_difficulty","block_hash","block_height","block_height","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","chain_stats","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","diff_stats","difficulty","direction","disk_usage_gb","duration","edge_bits","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_peer","header_stats","height","height","height","id","initial_block_height","into","into","into","into","into","into","into","into","into","is_connected","is_enabled","is_running","is_secondary","last_block_h","last_blocks","last_seen","last_seen","latest_timestamp","network_difficulty","network_hashrate","num_accepted","num_blocks_found","num_rejected","num_stale","num_workers","peer_count","peer_stats","pow_difficulty","received_bytes_per_sec","secondary_scaling","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","sent_bytes_per_sec","serialize","serialize","serialize","serialize","state","stem_pool_kernels","stem_pool_size","stratum_stats","stratum_stats","sync_status","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_difficulty","total_difficulty","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_pool_kernels","tx_pool_size","tx_stats","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_agent","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","window_size","worker_stats","API","ArgumentError","Chain","ChainValidationMode","Configuration","Core","Cuckoo","DandelionEpoch","Disabled","Error","EveryBlock","General","IOError","Keychain","LibTx","P2P","Pool","ServerConfig","Store","StratumServerConfig","WalletComm","WebHooksConfig","always_stem_our_txs","api_http_addr","api_secret_path","archive_mode","attempt_time_per_block","block_accepted_url","block_received_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","burn_reward","chain_type","chain_validation_mode","clone","clone","clone","clone","clone_any","clone_any","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_any_sync","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_boxed","clone_into","clone_into","clone_into","clone_into","cuckatoo_minimum_share_difficulty","dandelion_config","db_root","default","default","default","default","deserialize","deserialize","deserialize","deserialize","enable_stratum_server","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","foreign_api_secret_path","foundation_path","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_received_url","header_sync_timeout","into","into","into","into","into","into","is_expired","is_stem","ne","ne","ne","new","next_epoch","nthreads","p2p_config","pool_config","progpow_minimum_share_difficulty","randomx_minimum_share_difficulty","relay_peer","run_test_miner","run_tui","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","self_address_mut","serialize","serialize","serialize","serialize","skip_sync_wait","stratum_mining_config","stratum_server_addr","test_miner_wallet_url","timeout","tls_certificate_file","tls_certificate_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_received_url","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wallet_listener_url","webhook_config","0","0","0","0","0","0","0","0","0","0","0","0","0","0","create_foundation"],"q":["epic_servers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_servers::common","","","","epic_servers::common::adapters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_servers::common::hooks","","","","","","","","epic_servers::common::statsepic_servers::common::typesepic_servers::common::types::Error","","","","","","","","","","","","","","epic_servers::foundation"],"d":["Epic server holding internal structures.","","","","data store access","Modules common to all Epic server types","server config","Asks the server to connect to a peer at the provided …","","","Returns a set of stats about this server. This and the …","The chain head","The head of the block header chain","","Instantiates a new server associated with the provided …","handle to our network server","Pause the p2p server.","Number of peers","Ping all peers, mostly useful for tests to have connected …","The p2p layer protocol version for this node.","Resume p2p server. TODO - We appear not to resume the p2p …","Instantiates and starts a new server. Optionally takes a …","Start a minimal “stratum” mining service on a separate …","Start mining for blocks internally on a separate thread. …","Stop the server.","Stop flag","Stops the test miner without stopping the p2p layer","Whether we’re currently syncing","","","in-memory transaction pool","","","Adapters connecting new block, new transaction, and …","This module allows to register callbacks on certain …","Server stat collection types, to be used by tests, logging …","Server types","Implementation of the ChainAdapter for the network. Gets …","Adapter between the Dandelion monitor and the current …","Implementation of the NetAdapter for the . Gets notified …","Implements the view of the  required by the …","Adapter between the transaction pool and the network, to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a full block by its hash.","","","","","","","","Initialize a NetToChainAdaptor with reference to a Peers …","Initialize a ChainToPoolAndNetAdapter instance with handle …","Setup the p2p server on the adapter","","","","","Is the current Dandelion epoch expired?","","Is the node stemming (or fluffing) transactions in the …","","","","","Construct a new NetToChainAdapter instance","Construct a ChainToPoolAndNetAdapter instance.","Create a new pool to net adapter","Create a new pool adapter","Transition to the next Dandelion epoch (new stem/fluff …","","","","Set the pool adapter’s chain. Should only be called once.","","","","","","","","","","","","","","","","","","Provides a reading view into the current txhashset state …","","Writes a reading view on a txhashset state that’s been …","","","","","","","","","","","","Trait to be implemented by Chain Event Hooks","Trait to be implemented by Network Event Hooks","Returns the list of event hooks that will be initialized …","Returns the list of event hooks that will be initialized …","Triggers when a new block is accepted by the chain (might …","Triggers when a new block arrives","Triggers when a new block header arrives","Triggers when a new transaction arrives","Chain Statistics","Last n blocks for difficulty calculation purposes","Stats on the last WINDOW blocks and the difficulty …","Struct to return relevant information about peers","Server state info collection struct, to be passed around …","Simpler thread-unaware version of above to be populated …","Struct to return relevant information about the stratum …","Transaction Statistics","Struct to return relevant information about stratum workers","Address","Type of the algorithm used to mine the block","Average block time for last WINDOW blocks","Average WINDOW difficulty","Block hash (may be synthetic for a new chain)","what block height we’re mining at","Block height (can be negative for a new chain)","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chain head","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Difficulty calculation statistics","Block network difficulty","direction","Disk usage in GB","Duration since previous block (epoch seconds)","cuckoo size used for mining","","","","","","","","","","","","","","","","","","","Convert from a peer directly","Header head (may differ from chain head)","Height of the tip (max height of the fork)","latest height","height reported by peer on ping","Unique ID for this worker","which block height it starts mining","","","","","","","","","","whether stratum worker is currently connected","whether stratum server is enabled","whether stratum server is running","is secondary","Last block pushed to the fork","Last WINDOW block data","Timestamp of most recent communication with this worker","Last time we saw a ping/pong from this peer.","Timestamp of highest block or header","current network difficulty we’re working on","Calculate network hashrate","number of valid shares submitted","number of valid blocks found","number of invalid shares submitted","number of shares submitted too late","Number of connected workers","Number of peers","Peer stats","pow difficulty this worker is using","Number of bytes we’ve received from the peer.","secondary scaling","","","","","","","","","","","","","","","","","","","Number of bytes we’ve sent to the peer.","","","","","Current state of peer","Number of transaction kernels in the stem pool","Number of transactions in the stem pool","Stratum stats","Handle to current stratum server stats","Whether we’re currently syncing","Time block was found (epoch seconds)","","","","","","","","","","Total difficulty accumulated on that fork","difficulty reported by peer","","","","","","","","","","","","","","","","","","","Number of transaction kernels in the transaction pool","Number of transactions in the transaction pool","Transaction pool statistics","","","","","","","","","","Peer user agent string.","version running","","","","","","","","","","WINDOW size","Individual worker status","Error originating from HTTP API calls.","Invalid Arguments.","Error originating from the blockchain implementation.","Type of seeding the server will use to find other peers on …","Configuration error","Error originating from the core implementation.","Error originating from the cuckoo miner","A node is either “stem” of “fluff” for the …","Do not automatically run chain validation during normal …","Error type wrapping underlying module errors.","Run full chain validation after processing every block.","General error","Error originating from some I/O operation (likely a file …","Error originating from the keychain.","Error originating from the libtx implementation.","Error originating from the peer-to-peer network.","Error originating from the transaction pool.","Full server configuration, aggregating configurations …","Error originating from the db storage.","Stratum (Mining server) configuration","Wallet communication error","Web hooks configuration","Always stem our (pushed via api) txs regardless of …","Network address for the Rest API HTTP server.","Location of secret for basic auth on Rest API HTTP server.","Whether this node is a full archival node or a fast-sync, …","How long to wait before stopping the miner, recollecting …","url to POST block data when a new block is accepted by our …","url to POST block data when a new block arrives from a peer","","","","","","","","","","","","","","","","","","","Attributes the reward to a random private key instead of …","Setup the server for tests, testnet or mainnet","Automatically run full chain validation during normal …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckatoo Minimum difficulty for worker shares","Dandelion configuration","Directory under which the rocksdb stores will be created","","","","","","","","","Run a stratum mining server (the only way to communicate …","","","","","","","","","","","Location of secret for basic auth on v2 Foreign API server.","Path to the directory where the file of pre-generated …","","","","","","","","","","","","","","","","","url to POST header data when a new header arrives from a …","Timeout without the verification of the existence of more …","","","","","","","Is the current Dandelion epoch expired? It is expired if …","Are we stemming (or fluffing) transactions in this epoch?","","","","Create a new Dandelion epoch, defaulting to “stem” and …","Transition to next Dandelion epoch. Select stem/fluff …","number of worker threads in the tokio runtime","Configuration for the peer-to-peer server","Transaction pool configuration","Progpow Minimum difficulty for worker shares","Randomx Minimum difficulty for worker shares","What is our current relay peer? If it is not connected …","Whether to run the test miner (internal, cuckoo 16)","Whether to run the TUI if enabled, this will disable …","","","","","","","","","","","","","Whether to skip the sync timeout on startup (To assist …","Configuration for the mining daemon","If enabled, the address and port to listen on","Test miner wallet URL","timeout in seconds for the http request","TLS certificate file","TLS certificate private key file","","","","","","","","","","","","","","","","","url to POST transaction data when a new transaction …","","","","","","","","","","","","","Base address to the HTTP wallet receiver","Configuration for the webhooks that trigger on certain …","","","","","","","","","","","","","","","Call the wallet API to create a given number of …"],"i":[0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,2,3,3,2,4,5,3,2,4,5,3,2,4,5,5,5,5,5,5,5,5,5,5,3,3,2,4,5,3,5,5,3,3,3,3,3,3,2,4,3,2,4,5,6,4,6,4,3,3,3,3,2,4,5,6,4,5,5,5,4,5,3,3,3,3,2,4,5,3,2,4,5,4,3,3,3,3,3,3,3,2,4,5,5,5,5,3,2,4,5,0,0,0,0,7,8,8,8,0,0,0,0,0,0,0,0,0,9,10,11,11,10,12,10,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,14,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,13,13,14,14,15,15,16,16,17,17,12,12,11,11,10,10,9,9,13,14,15,16,17,12,11,10,9,13,17,12,14,10,9,14,10,12,17,10,9,15,16,17,12,10,9,13,14,15,16,17,12,11,10,9,9,14,15,11,9,17,17,13,14,15,16,17,12,11,10,9,17,12,12,10,15,11,17,9,15,12,12,17,17,17,17,12,14,14,17,9,10,13,13,14,14,15,15,16,16,17,17,12,12,11,11,10,10,9,9,9,15,16,17,12,9,16,16,13,14,14,10,13,14,15,16,17,12,11,10,9,15,9,13,14,15,16,17,12,11,10,9,13,14,15,16,17,12,11,10,9,16,16,14,13,14,15,16,17,12,11,10,9,9,9,13,14,15,16,17,12,11,10,9,11,12,18,18,18,0,18,18,18,0,19,0,19,18,18,18,18,18,18,0,18,0,18,0,20,21,21,21,22,23,23,18,19,21,22,23,20,18,19,21,22,23,20,18,19,21,22,23,20,22,21,21,19,21,22,23,19,21,22,23,19,21,22,23,19,21,22,23,19,21,22,23,19,19,21,21,22,22,23,23,19,21,22,23,22,21,21,19,21,22,23,19,21,22,23,22,19,21,22,23,18,19,21,22,23,20,21,21,18,18,18,18,18,18,18,18,18,18,18,19,21,22,23,20,23,21,18,19,21,22,23,20,20,20,21,22,23,20,20,23,21,21,22,22,20,21,21,19,19,21,21,22,22,23,23,19,21,22,23,21,21,22,21,23,21,21,19,21,22,23,18,19,21,22,23,20,18,19,21,22,23,20,23,18,19,21,22,23,20,18,19,21,22,23,20,22,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0],"f":[null,[[]],[[]],[[]],null,null,null,[[["peeraddr",3]],[["result",4,["error"]],["error",4]]],null,[[]],[[],[["result",4,["serverstats","error"]],["error",4],["serverstats",3]]],[[],[["result",4,["tip","error"]],["error",4],["tip",3]]],[[],[["result",4,["tip","error"]],["error",4],["tip",3]]],[[]],[[["serverconfig",3]],[["server",3],["error",4],["result",4,["server","error"]]]],null,[[]],[[],["u32",15]],[[],[["result",4,["error"]],["error",4]]],[[],["protocolversion",3]],[[]],[[["receiver",3,["logentry"]],["serverconfig",3],["option",4,["receiver"]]],[["result",4,["error"]],["error",4]]],[[["stratumserverconfig",3]]],[[["arc",3,["stopstate"]],["option",4,["string"]],["string",3],["stopstate",3]]],[[]],null,[[["arc",3,["stopstate"]],["stopstate",3]]],null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["options",3],["block",3],["blockstatus",4]]],[[["block",3],["peerinfo",3],["options",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["blockheader",3],["result",4,["blockheader","poolerror"]],["poolerror",4]]],[[],["pooltochainadapter",3]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[]],[[["compactblock",3],["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[]],[[]],[[]],[[]],[[["hash",3]],[["block",3],["option",4,["block"]]]],[[["hash",3]],[["blockheader",3],["result",4,["blockheader","poolerror"]],["poolerror",4]]],[[["hash",3]],[["result",4,["blocksums","poolerror"]],["blocksums",3],["poolerror",4]]],[[],["pathbuf",3]],[[["string",3]],["pathbuf",3]],[[["hash",3]],[["option",4,["transaction"]],["transaction",3]]],[[["peerinfo",3],["blockheader",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[["peers",3],["arc",3,["peers"]]]],[[["peers",3],["arc",3,["peers"]]]],[[["peers",3],["arc",3,["peers"]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4,["file","error"]],["file",3],["error",3]]],[[["read",8]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],[["result",4,["vec","error"]],["vec",3,["blockheader"]],["error",3]]],[[["vec",3,["box"]],["rwlock",6,["transactionpool"]],["arc",3,["rwlock"]],["syncstate",3],["serverconfig",3],["chain",3],["box",3,["netevents"]],["arc",3,["chain"]],["arc",3,["syncstate"]]],["nettochainadapter",3]],[[["box",3,["chainevents"]],["rwlock",6,["transactionpool"]],["vec",3,["box"]],["arc",3,["rwlock"]]],["chaintopoolandnetadapter",3]],[[["dandelionconfig",3]],["pooltonetadapter",3]],[[],["pooltochainadapter",3]],[[]],[[]],[[]],[[]],[[["chain",3],["arc",3,["chain"]]]],[[["poolentry",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[]],[[],[["result",4,["difficulty","error"]],["error",3],["difficulty",3]]],[[],[["u64",15],["result",4,["u64","error"]],["error",3]]],[[["bool",15],["transaction",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["poolentry",3]]],[[["hash",3],["peerinfo",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],[["result",4,["blockheader","error"]],["error",3],["blockheader",3]]],[[["u64",15],["utc",3],["datetime",3,["utc"]]],["bool",15]],[[["hash",3]],[["option",4,["txhashsetread"]],["txhashsetread",3]]],[[],["bool",15]],[[["peerinfo",3],["hash",3],["file",3]],[["result",4,["bool","error"]],["error",3],["bool",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[["transaction",3]],[["result",4,["poolerror"]],["poolerror",4]]],[[]],[[]],[[]],[[]],null,null,[[["serverconfig",3]],[["vec",3,["box"]],["box",3,["chainevents"]]]],[[["serverconfig",3]],[["box",3,["netevents"]],["vec",3,["box"]]]],[[["block",3],["blockstatus",4]]],[[["peeraddr",3],["block",3]]],[[["blockheader",3],["peeraddr",3]]],[[["transaction",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["serverstateinfo",3]],[[],["serverstats",3]],[[],["chainstats",3]],[[],["txstats",3]],[[],["workerstats",3]],[[],["stratumstats",3]],[[],["diffstats",3]],[[],["diffblock",3]],[[],["peerstats",3]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["serverstateinfo",3]],[[],["workerstats",3]],[[],["stratumstats",3]],null,null,null,null,null,null,[[["workerstats",3]],["bool",15]],[[["diffblock",3]],["bool",15]],[[["peerstats",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["peer",3]],["peerstats",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["f64",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["chainvalidationmode",4]],[[],["serverconfig",3]],[[],["stratumserverconfig",3]],[[],["webhooksconfig",3]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["cloneany",8],["global",3],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["global",3],["box",3,["nonsyncfeatures","global"]],["nonsyncfeatures",8]]],[[]],[[]],[[]],[[]],null,null,null,[[],["chainvalidationmode",4]],[[],["serverconfig",3]],[[],["stratumserverconfig",3]],[[],["webhooksconfig",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["chainvalidationmode",4]],["bool",15]],[[["serverconfig",3]],["bool",15]],[[["stratumserverconfig",3]],["bool",15]],[[["webhooksconfig",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[]],[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[["poolerror",4]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["serverconfig",3]],["bool",15]],[[["stratumserverconfig",3]],["bool",15]],[[["webhooksconfig",3]],["bool",15]],[[["dandelionconfig",3]],["dandelionepoch",3]],[[["arc",3]]],null,null,null,null,null,[[["arc",3]],[["option",4,["arc"]],["arc",3,["peer"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["str",15]],[["vec",3,["cbdata"]],["cbdata",3]]]],"p":[[3,"Server"],[3,"ChainToPoolAndNetAdapter"],[3,"NetToChainAdapter"],[3,"PoolToNetAdapter"],[3,"PoolToChainAdapter"],[8,"DandelionAdapter"],[8,"ChainEvents"],[8,"NetEvents"],[3,"PeerStats"],[3,"DiffBlock"],[3,"DiffStats"],[3,"StratumStats"],[3,"ServerStateInfo"],[3,"ServerStats"],[3,"ChainStats"],[3,"TxStats"],[3,"WorkerStats"],[4,"Error"],[4,"ChainValidationMode"],[3,"DandelionEpoch"],[3,"ServerConfig"],[3,"StratumServerConfig"],[3,"WebHooksConfig"],[13,"Core"],[13,"LibTx"],[13,"Store"],[13,"Chain"],[13,"P2P"],[13,"API"],[13,"Cuckoo"],[13,"Pool"],[13,"Keychain"],[13,"ArgumentError"],[13,"WalletComm"],[13,"IOError"],[13,"Configuration"],[13,"General"]]},\
"epic_store":{"doc":"Storage of core types using RocksDB.","t":[0,0,0,0,5,5,5,5,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,4,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,17,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,18,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["leaf_set","lmdb","pmmr","prune_list","read_bitmap","save_via_temp_file","to_key","to_key_u64","types","u64_to_key","LeafSet","add","borrow","borrow_mut","borrow_replacement","copy_snapshot","discard","flush","from","includes","into","is_empty","iter","len","open","remove","removed_pre_cutoff","rewind","snapshot","try_from","try_into","type_id","vzip","ALLOC_CHUNK_SIZE","Batch","Error","LmdbErr","NotFoundErr","SerErr","SerIterator","Store","as_fail","backtrace","batch","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","cause","child","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_boxed","clone_boxed","clone_into","commit","delete","do_resize","eq","exists","exists","fmt","fmt","from","from","from","from","from","get","get","get_ser","get_ser","into","into","into","into","into_iter","iter","iter","name","ne","needs_resize","new","next","open","option_to_not_found","put","put_ser","put_ser_with_version","self_address_mut","self_address_mut","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_version","0","0","0","PMMRBackend","PMMR_FILES","append","borrow","borrow_mut","borrow_replacement","check_compact","clean_files_by_prefix","data_as_temp_file","data_size","discard","dump_stats","from","get_data","get_data_from_file","get_from_file","get_hash","hash_size","into","leaf_idx_iter","leaf_pos_iter","n_unpruned_leaves","new","release_files","remove","rewind","snapshot","sync","try_from","try_into","type_id","unpruned_size","vzip","PruneList","add","borrow","borrow_mut","borrow_replacement","empty","flush","from","get_leaf_shift","get_shift","get_total_leaf_shift","get_total_shift","init_caches","into","is_empty","is_pruned","is_pruned_root","len","new","open","to_vec","try_from","try_into","type_id","vzip","AppendOnlyFile","DataFile","FixedSize","LEN","SizeEntry","SizeInfo","VariableSize","append","append","as_temp_file","as_temp_file","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_replacement","borrow_replacement","borrow_replacement","borrow_replacement","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_boxed","clone_boxed","clone_into","discard","discard","flush","flush","fmt","from","from","from","from","init","into","into","into","into","offset","open","open","path","path","read","read","read","release","release","rewind","rewind","save_prune","save_prune","self_address_mut","self_address_mut","size","size","size","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","0","0"],"q":["epic_store","","","","","","","","","","epic_store::leaf_set","","","","","","","","","","","","","","","","","","","","","","","epic_store::lmdb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_store::lmdb::Error","","","epic_store::pmmr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_store::prune_list","","","","","","","","","","","","","","","","","","","","","","","","","epic_store::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_store::types::SizeInfo",""],"d":["The Epic leaf_set implementation. Compact (roaring) bitmap …","Storage of core types using LMDB.","Implementation of the persistent Backend for the prunable …","The Epic “Prune List” implementation.","Read Bitmap from a file","Creates temporary file with name created by adding …","Build a db key from a prefix and a byte vector identifier.","Build a db key from a prefix and a byte vector identifier …","Common storage-related types","Build a db key from a prefix and a numeric identifier.","Compact (roaring) bitmap representing the set of positions …","Append a new position to the leaf_set.","","","","Copies a snapshot of the utxo file into the primary utxo …","Discard any pending changes.","Flush the leaf_set to file.","","Whether the leaf_set includes the provided position.","","Is the leaf_set empty.","Iterator over positionns in the leaf_set (all leaf …","Number of positions stored in the leaf_set.","Open the remove log file. The content of the file will be …","Remove the provided position from the leaf_set.","Calculate the set of pruned positions up to and including …","Rewinds the leaf_set back to a previous state. Removes all …","Saves the utxo file tagged with block hash as filename …","","","","","number of bytes to grow the database by when needed","Batch to write multiple Writeables to db in an atomic …","Main error type for this lmdb","Wraps an error originating from RocksDB (which …","Couldn’t find what we were looking for","Wraps a serialization error for Writeable or Readable","An iterator that produces Readable instances back. Wraps …","LMDB-backed store facilitating data access and …","","","Builds a new batch to be used with this store.","","","","","","","","","","","","","","Creates a child of this batch. It will be merged with its …","","","","","","","","","Writes the batch to db","Deletes a key/value pair from the db","Increments the database size by as many ALLOC_CHUNK_SIZES …","","Whether the provided key exists","Whether the provided key exists","","","","","","","","Gets a value from the db, provided its key","gets a value from the db, provided its key","Gets a <code>Readable</code> value from the db, provided its key. …","Gets a <code>Readable</code> value from the db, provided its key, …","","","","","","Produces an iterator of (key, value) pairs, where values …","Produces an iterator of <code>Readable</code> types moving forward from …","","","Determines whether the environment needs a resize based on …","Create a new LMDB env under the provided directory. By …","","Opens the database environment","unwraps the inner option by converting the none case to a …","Writes a single key/value pair to the db","Writes a single key and its <code>Writeable</code> value to the db. …","Writes a single key and its <code>Writeable</code> value to the db. …","","","","","","","","","","","","","","","","","","","","","Construct a new store using a specific protocol version. …","","","","PMMR persistent backend implementation. Relies on multiple …","The list of PMMR_Files for internal purposes","Append the provided data and hashes to the backend storage.","","","","Takes the leaf_set at a given cutoff_pos and generates an …","Quietly clean a directory up based on a given prefix. If …","","Number of elements in the underlying stored data. …","Discard the current, non synced state of the backend.","","","Get the data at pos. Return None if it has been removed or …","","","Get the hash at pos. Return None if pos is a leaf and it …","Size of the underlying hashed data. Extremely dependent on …","","Returns an iterator over all the leaf insertion indices …","Returns an iterator over all the leaf positions. for a …","","Instantiates a new PMMR backend. If optional size is …","Release underlying data files","Remove by insertion position.","Rewind the PMMR backend to the given position.","","Syncs all files to disk. A call to sync is required to …","","","","Number of hashes in the PMMR stored by this backend. Only …","","Maintains a list of previously pruned nodes in PMMR, …","Push the node at the provided position in the prune list. …","","","","Instatiate a new empty prune list.","Save the prune_list to disk. Clears out leaf pos before …","","As above, but only returning the number of leaf nodes to …","Computes by how many positions a node at pos should be …","Return the total leaf_shift from all entries in the …","Return the total shift from all entries in the prune_list. …","Init our internal shift caches.","","Is the prune_list empty?","Is the pos pruned? Assumes the pruned_cache is fully built …","Is the specified position a root of a pruned subtree?","Number of entries in the prune_list.","Instantiate a new prune list from the provided path and …","Open an existing prune_list or create a new one.","Convert the prune_list to a vec of pos.","","","","","Wrapper for a file that can be read at any position …","Data file (MMR) wrapper around an append-only file.","Fixed size data.","Length of a size entry (8 + 2 bytes) for convenience.","Represents a single entry in the size_file. Offset (in …","Are we dealing with “fixed size” data or “variable …","Variable size data.","Append an element to the file. Will not be written to disk …","Append data to the file. Until the append-only file is …","Create a new tempfile containing the contents of this data …","Create a new tempfile containing the contents of this …","","","","","","","","","","","","","","","","","","","","","Discard any unsynced changes to the file.","Discard the current non-flushed data.","Flush unsynced changes to the file to disk.","Syncs all writes (fsync), reallocating the memory map to …","","","","","","(Re)init an underlying file and its associated memmap. …","","","","","Offset (bytes) in the corresponding data_file.","Open (or create) a file at the provided path on disk.","Open a file (existing or not) as append-only, backed by a …","Path of the underlying file","Path of the underlying file","Read an element from the file by position. Assumes we have …","Read the bytes representing the element at the given …","","Drop underlying file handles","Release underlying file handles.","Rewind the backend file to the specified position.","Rewinds the data file back to a previous position. We …","Write the file out to disk, pruning removed elements.","Saves a copy of the current file content, skipping data at …","","","Size of the file in number of elements (not bytes).","Current size of the file in bytes.","Size (bytes) in the corresponding data_file.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,0,0,2,2,3,3,4,5,2,3,4,5,2,3,4,5,2,2,4,2,2,2,2,2,2,2,2,4,4,3,2,3,4,2,2,3,4,5,2,2,3,4,3,4,3,4,5,2,5,3,4,2,2,3,3,5,3,0,4,4,4,2,2,2,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,6,7,8,0,0,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,12,0,0,11,13,14,13,14,11,13,14,12,11,13,14,12,11,13,14,12,12,12,12,12,12,12,12,12,13,14,13,14,12,11,13,14,12,14,11,13,14,12,12,13,14,13,14,13,14,12,13,14,13,14,13,14,12,12,13,14,12,12,11,13,14,12,11,13,14,12,11,13,14,12,11,13,14,12,12,15,16],"f":[null,null,null,null,[[["asref",8,["path"]],["path",3]],[["bitmap",3],["result",6,["bitmap"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u8",15],["vec",3]],[["vec",3,["u8"]],["u8",15]]],[[["u64",15],["u8",15],["vec",3]],[["vec",3,["u8"]],["u8",15]]],null,[[["u64",15],["u8",15]],[["vec",3,["u8"]],["u8",15]]],null,[[["u64",15]]],[[]],[[]],[[]],[[["asref",8,["path"]],["path",3]],["result",6]],[[]],[[],["result",6]],[[]],[[["u64",15]],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["usize",15]],[[["asref",8,["path"]],["path",3]],[["result",6,["leafset"]],["leafset",3]]],[[["u64",15]]],[[["u64",15],["bitmap",3],["prunelist",3]],["bitmap",3]],[[["u64",15],["bitmap",3]]],[[["blockheader",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[],[["error",4],["result",4,["batch","error"]],["batch",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4,["fail"]]]],[[],[["error",4],["result",4,["batch","error"]],["batch",3]]],[[],["error",4]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["box",3,["nonsyncfeatures","global"]],["global",3],["nonsyncfeatures",8]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[["error",4]],["bool",15]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["error",4]],["error",4]],[[]],[[],[["option",4,["vec"]],["result",4,["option","error"]],["error",4]]],[[],[["option",4,["vec"]],["result",4,["option","error"]],["error",4]]],[[],[["error",4],["option",4],["result",4,["option","error"]]]],[[],[["error",4],["option",4],["result",4,["option","error"]]]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["seriterator","error"]],["seriterator",3],["error",4]]],[[],[["result",4,["seriterator","error"]],["seriterator",3],["error",4]]],[[],[["option",4,["str"]],["str",15]]],[[["error",4]],["bool",15]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[["option",4,["u32"]],["u32",15],["option",4,["str"]],["str",15]],[["error",4],["store",3],["result",4,["store","error"]]]],[[],["option",4]],[[],[["result",4,["error"]],["error",4]]],[[["result",4,["option","error"]],["option",4],["error",4]],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[["protocolversion",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["protocolversion",3]],["store",3]],null,null,null,null,null,[[["vec",3,["hash"]],["hash",3]],[["string",3],["result",4,["string"]]]],[[]],[[]],[[]],[[["u64",15],["bitmap",3]],[["result",6,["bool"]],["bool",15]]],[[["u64",15],["path",3],["asref",8,["path"]],["str",15]],[["u32",15],["result",6,["u32"]]]],[[],[["result",4,["file","string"]],["file",3],["string",3]]],[[],["u64",15]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],[["option",4,["hash"]],["hash",3]]],[[["u64",15]],[["option",4,["hash"]],["hash",3]]],[[],["u64",15]],[[]],[[["u64",15]],[["iterator",8],["box",3,["iterator"]]]],[[],[["iterator",8],["box",3,["iterator"]]]],[[],["u64",15]],[[["protocolversion",3],["blockheader",3],["bool",15],["option",4,["blockheader"]],["asref",8,["path"]],["path",3]],[["result",6,["pmmrbackend"]],["pmmrbackend",3]]],[[]],[[["u64",15]],[["string",3],["result",4,["string"]]]],[[["u64",15],["bitmap",3]],[["string",3],["result",4,["string"]]]],[[["blockheader",3]],[["string",3],["result",4,["string"]]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],null,[[["u64",15]]],[[]],[[]],[[]],[[],["prunelist",3]],[[],["result",6]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["bool",15]],[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[],["u64",15]],[[["bitmap",3],["option",4,["pathbuf"]],["pathbuf",3]],["prunelist",3]],[[["asref",8,["path"]],["path",3]],[["result",6,["prunelist"]],["prunelist",3]]],[[],[["vec",3,["u64"]],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[],[["u64",15],["result",6,["u64"]]]],[[],["result",6]],[[],[["result",6,["file"]],["file",3]]],[[],[["result",6,["file"]],["file",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sizeentry",3]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["defaultfeatures","global"]],["defaultfeatures",8]]],[[],[["box",3,["nonsyncfeatures","global"]],["global",3],["nonsyncfeatures",8]]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],null,[[["protocolversion",3],["sizeinfo",4]],[["datafile",3],["result",6,["datafile"]]]],[[["protocolversion",3],["sizeinfo",4]],[["result",6,["appendonlyfile"]],["appendonlyfile",3]]],[[],["path",3]],[[],["path",3]],[[["u64",15]],["option",4]],[[["u64",15]],["result",6]],[[["reader",8]],[["sizeentry",3],["result",4,["sizeentry","error"]],["error",4]]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],["u64",15]],[[],[["u64",15],["result",6,["u64"]]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],null,null],"p":[[3,"LeafSet"],[4,"Error"],[3,"Store"],[3,"Batch"],[3,"SerIterator"],[13,"NotFoundErr"],[13,"LmdbErr"],[13,"SerErr"],[3,"PMMRBackend"],[3,"PruneList"],[4,"SizeInfo"],[3,"SizeEntry"],[3,"DataFile"],[3,"AppendOnlyFile"],[13,"FixedSize"],[13,"VariableSize"]]},\
"epic_util":{"doc":"Logging, as well as various low-level utilities that …","t":[6,3,3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,5,14,14,14,14,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,11,0,11,5,5,11,11,11,11,11,11,11,11,11,11,0,0,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,11,11,12,12,12,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,12,11,11,5,5,5,3,11,11,5,11,11,11,11,5,11,11,11,13,13,13,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["Mutex","OneTime","RateCounter","RwLock","RwLockReadGuard","StopState","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes_per_min","clone","clone_any","clone_any_send","clone_any_send_sync","clone_any_sync","clone_into","count_per_min","file","from","from","from","from_hex","impl_array_newtype","impl_array_newtype_encodable","impl_array_newtype_show","impl_index_newtype","inc","inc_quiet","init","into","into","into","is_paused","is_stopped","logger","macros","new","new","new","pause","read_write","resume","secp_static","stop","to_base64","to_hex","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","zip","copy_dir_to","delete","get_first_line","list_files","LogEntry","LoggingConfig","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","default","deserialize","eq","file_log_level","fmt","fmt","from","from","init_logger","init_test_logger","into","into","level","log","log_file_append","log_file_path","log_max_files","log_max_size","log_to_file","log_to_stdout","ne","serialize","serialize","stdout_log_level","to_owned","to_owned","try_from","try_from","try_into","try_into","tui_running","type_id","type_id","from_slice","read_exact","write_all","SECP256K1","borrow","borrow_mut","commit_to_zero_value","deref","from","initialize","into","static_secp_instance","try_from","try_into","type_id","Debug","Error","Info","LogLevel","Trace","Warning","ZeroingString","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_any","clone_any","clone_any_send","clone_any_send","clone_any_send_sync","clone_any_send_sync","clone_any_sync","clone_any_sync","clone_into","clone_into","deref","deserialize","drop","eq","eq","fmt","from","from","from","from","into","into","ne","partial_cmp","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","compress","create_zip","decompress","extract_files"],"q":["epic_util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_util::file","","","","epic_util::logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_util::read_write","","","epic_util::secp_static","","","","","","","","","","","","epic_util::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","epic_util::zip","","",""],"d":["A mutual exclusion primitive useful for protecting shared …","Encapsulation of a RwLock&lt;Option&gt; for one-time …","A rate counter tracks the number of transfers, the amount …","A reader-writer lock","RAII structure used to release the shared read access of a …","Global stopped/paused state shared across various …","","","Borrows the OneTime, should only be called after …","","","","","Number of bytes counted in the last minute. Includes “…","","","","","","","Count of increases in the last minute. Excludes “quiet”…","File util","","","","Decode a hex string into bytes.","gives a newtype array wrapper standard array traits","gives a newtype array wrapper serialization and …","gives a newtype array wrapper the Debug trait","gives a newtype array wrapper Index traits","Increments number of bytes transferred, updating counts …","Increments number of bytes without updating the count or …","Initializes the OneTime, should only be called once after …","","","","Check if we are paused.","Check if we are stopped.","Logging wrapper to be used throughout all crates in the …","Macros to support Rust BIP-32 code (though could …","Instantiate a new rate counter","Create a new stop_state in default “running” state.","Builds a new uninitialized OneTime.","Pause the server (only used in tests).","Custom impls of read_exact and write_all to work around …","Resume a paused server (only used in tests).","Globally accessible static instance of secp256k1, to avoid …","Stop the server.","Encode an utf8 string to a base64 string","Encode the provided bytes into a hex string","","","","","","","","","","","Logging configuration types","Compress and decompress zip bz2 archives","Copy directory, create destination if needed","Delete a directory or file","Retrieve first line from file","List directory","Log Entry","Logging config","","","","","","","","","","","","","","","","","","","","log file level","","","","","Initialize the logger with the given configuration","Initializes the logger for unit and integration tests","","","The log levelO","The log message","Whether to append to log or replace","Log file path","Number of the log files to rotate over (optional)","Size of the log in bytes to rotate over (optional)","whether to log to file","whether to log to stdout","","","","logging level for stdout","","","","","","","Whether the tui is running (optional)","","","","The default implementation of read_exact is useless with …","Same as <code>read_exact</code> but for writing.","Static reference to secp instance","","","Convenient way to generate a commitment to zero.","","","","","Returns the static instance, but calls randomize on it as …","","","","Debug","Error","Info","Log level types","Trace","Warning","Zeroing string, mainly useful for password","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compress a source directory recursively into a zip file. …","Create a zip archive from source dir and list of relative …","Decompress a source file into the provided destination …","Extract a set of files from the provided zip archive."],"i":[0,0,0,0,0,0,1,2,3,3,1,2,3,1,3,3,3,3,3,3,1,0,1,2,3,0,0,0,0,0,1,1,3,1,2,3,2,2,0,0,1,2,3,2,0,2,0,2,0,0,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,5,5,5,4,5,4,5,0,0,4,5,4,4,5,5,5,5,5,5,5,4,5,5,4,5,4,5,4,5,5,4,5,0,0,0,0,6,6,0,6,6,6,6,0,6,6,6,7,7,7,0,7,7,0,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,8,7,8,7,8,7,7,8,8,8,7,8,8,8,7,7,8,7,8,7,8,7,8,0,0,0,0],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["onetime",3]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[],["u64",15]],null,[[]],[[]],[[]],[[["string",3]],[["result",4,["vec","parseinterror"]],["vec",3,["u8"]],["parseinterror",3]]],null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["ratecounter",3]],[[],["stopstate",3]],[[],["onetime",3]],[[]],null,[[]],null,[[]],[[["str",15]],["string",3]],[[["vec",3,["u8"]],["u8",15]],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["path",3]],[["result",6,["u64"]],["u64",15]]],[[["pathbuf",3]],["result",6]],[[["string",3],["option",4,["string"]]],[["string",3],["option",4,["string"]]]],[[["path",3]],[["pathbuf",3],["vec",3,["pathbuf"]]]],null,null,[[]],[[]],[[]],[[]],[[],["logentry",3]],[[],["loggingconfig",3]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[],["loggingconfig",3]],[[],["result",4]],[[["loggingconfig",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["syncsender",3,["logentry"]],["option",4,["loggingconfig"]],["option",4,["syncsender"]],["loggingconfig",3]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["loggingconfig",3]],["bool",15]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[]],[[["duration",3],["bool",15],["read",8]],["result",6]],[[["duration",3],["write",8]],["result",6]],null,[[]],[[]],[[],["commitment",3]],[[],["arc",3]],[[]],[[]],[[]],[[],[["arc",3,["mutex"]],["mutex",6,["secp256k1"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["loglevel",4]],[[],["zeroingstring",3]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["box",3,["cloneany","global"]],["cloneany",8],["global",3]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["cloneany",8],["box",3,["cloneany","global"]]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[],[["global",3],["box",3,["cloneany","global"]],["cloneany",8]]],[[]],[[]],[[],["str",15]],[[],["result",4]],[[]],[[["loglevel",4]],["bool",15]],[[["zeroingstring",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["str",15]]],[[]],[[["string",3]]],[[]],[[]],[[["zeroingstring",3]],["bool",15]],[[["zeroingstring",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["file",3],["path",3]],["zipresult",6]],[[["path",3],["file",3],["vec",3,["pathbuf"]],["pathbuf",3]],["result",6]],[[["path",3]],[["usize",15],["zipresult",6,["usize"]]]],[[["path",3],["vec",3,["pathbuf"]],["file",3],["pathbuf",3]],["result",6]]],"p":[[3,"RateCounter"],[3,"StopState"],[3,"OneTime"],[3,"LogEntry"],[3,"LoggingConfig"],[3,"SECP256K1"],[4,"LogLevel"],[3,"ZeroingString"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};