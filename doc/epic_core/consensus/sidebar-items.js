initSidebarItems({"constant":[["AR_SCALE_DAMP_FACTOR","Dampening factor to use for AR scale calculation."],["AUTOMATEDTEST_FOUNDATION_HEIGHT","Set the height (and its multiples) where the foundation coinbase will be added to the block. Used in automated tests."],["BASE_EDGE_BITS","Original reference edge_bits to compute difficulty factors for higher Cuckoo graph sizes, changing this would hard fork"],["BASE_REWARD_ERA_6_ONWARDS","Block Reward that will be assigned after we change from era 5 to era 6."],["BLOCK_DIFF_FACTOR_PROGPOW","Progpow Minimum difficulty (used for saturation)"],["BLOCK_DIFF_FACTOR_RANDOMX","RandomX Minimum difficulty (used for saturation)"],["BLOCK_ERA_1","Height of the first epic block emission era (1440*334) = 480.960"],["BLOCK_ERA_2","Height of the second epic block emission era (480960 + (1440*470)) = 1.157.760"],["BLOCK_ERA_3","Height of the third epic block emission era (1157760 + (1440*601)) = 2.023.200"],["BLOCK_ERA_4","Height of the fourth epic block emission era"],["BLOCK_ERA_5","Height of the fifth epic block emission era"],["BLOCK_ERA_6_ONWARDS","After the epic block emission era 6, each era will last 4 years (approximately 1460 days)"],["BLOCK_INPUT_WEIGHT","Weight of an input when counted against the max block weight capacity"],["BLOCK_KERNEL_WEIGHT","Weight of a kernel when counted against the max block weight capacity"],["BLOCK_OUTPUT_WEIGHT","Weight of an output when counted against the max block weight capacity"],["BLOCK_TIME_SEC","Block interval, in seconds, the network will tune its next_target for. Note that we may reduce this value in the future as we get more data on mining with Cuckoo Cycle, networks improve and block propagation is optimized (adjusting the reward accordingly)."],["BLOCK_TIME_WINDOW","Average time span of the difficulty adjustment window"],["CLAMP_FACTOR","Clamp factor to use for difficulty adjustment Limit value to within this factor of goal"],["COINBASE_MATURITY","Number of blocks before a coinbase matures and can be spent"],["CUT_THROUGH_HORIZON","Default number of blocks in the past when cross-block cut-through will start happening. Needs to be long enough to not overlap with a long reorg. Rational behind the value is the longest bitcoin fork was about 30 blocks, so 5h. We add an order of magnitude to be safe and round to 7x24h of blocks to make it easier to reason about."],["DAY_HEIGHT","A day is 1440 blocks"],["DEFAULT_MIN_EDGE_BITS","Default Cuckatoo Cycle edge_bits, used for mining and validating."],["DIFFICULTY_ADJUST_WINDOW","Number of blocks used to calculate difficulty adjustments"],["DIFFICULTY_DAMP_FACTOR","Dampening factor to use for difficulty adjustment"],["EPIC_BASE","A epic is divisible to 10^8 like bitcoin"],["FLOONET_BLOCK_ERA_1","Floonet: Height of the first epic block emission era"],["FLOONET_DIFFICULTY_ERA","defines the block height at wich the difficulty adjustment era changes for floonet"],["FLOONET_FIRST_HARD_FORK","Floonet first hard fork height"],["FLOONET_FOUNDATION_HEIGHT","Set the height (and its multiples) where the foundation coinbase will be added to the block. Used in the Floonet."],["FOUNDATION_LEVY",""],["FOUNDATION_LEVY_ERA_1","Duration in height of the first foundation levy era NOTE_L: Adjust this before the official launch"],["FOUNDATION_LEVY_ERA_2_ONWARDS","After the first foundation levy era, we decrease the foundation levy each year"],["FOUNDATION_LEVY_RATIO","The foundation levy in each era"],["FREEMAN","Freeman, smallest unit, takes a hundred million to make a epic"],["HOUR_HEIGHT","Nominal height for standard time intervals, hour is 60 blocks"],["INITIAL_DIFFICULTY","The initial difficulty at launch. This should be over-estimated and difficulty should come down at launch rather than up Currently grossly over-estimated at 10% of current ethereum GPUs (assuming 1GPU can solve a block at diff 1 in one block interval)"],["MAINNET_DIFFICULTY_ERA","defines the block height at wich the difficulty adjustment era changes"],["MAINNET_FIRST_HARD_FORK","Mainnet first hard fork height, set to happen around 2020-04-29"],["MAINNET_FOUNDATION_HEIGHT","Set the height (and its multiples) where the foundation coinbase will be added to the block. This variable will sparse the blocks that receive the foundation coinbase."],["MAX_BLOCK_WEIGHT","Total maximum block weight. At current sizes, this means a maximum theoretical size of:"],["MICRO_EPIC","Microepic, a thousand of a milliepic"],["MILLI_EPIC","Milliepic, a thousand of a epic"],["MIN_AR_SCALE","Minimum scaling factor for AR pow, enforced in diff retargetting avoids getting stuck when trying to increase ar_scale subject to dampening"],["MIN_DIFFICULTY","Minimum difficulty, enforced in diff retargetting avoids getting stuck when trying to increase difficulty subject to dampening"],["MIN_DIFFICULTY_PROGPOW","Progpow Minimum difficulty (used for saturation)"],["MIN_DIFFICULTY_RANDOMX","RandomX Minimum difficulty (used for saturation)"],["OLD_MIN_DIFFICULTY_PROGPOW","Progpow Minimum difficulty until fork (used for saturation)"],["OLD_MIN_DIFFICULTY_RANDOMX","RandomX Minimum difficulty until fork (used for saturation)"],["PP_CLAMP_FACTOR","Clamp factor to use for difficulty adjustment Limit value to within this factor of goal"],["PP_DIFFICULTY_DAMP_FACTOR","Dampening factor to use for difficulty adjustment"],["PROOFSIZE","Cuckoo-cycle proof size (cycle length)"],["RX_CLAMP_FACTOR","Clamp factor to use for difficulty adjustment Limit value to within this factor of goal"],["RX_DIFFICULTY_DAMP_FACTOR","Dampening factor to use for difficulty adjustment"],["SECOND_POW_EDGE_BITS","Cuckaroo proof-of-work edge_bits, meant to be ASIC resistant."],["STATE_SYNC_THRESHOLD","Default number of blocks in the past to determine the height where we request a txhashset (and full blocks from). Needs to be long enough to not overlap with a long reorg. Rational behind the value is the longest bitcoin fork was about 30 blocks, so 5h. We add an order of magnitude to be safe and round to 2x24h of blocks to make it easier to reason about."],["TESTING_DIFFICULTY_ERA","defines the block height at wich the difficulty adjustment era changes for testing"],["TESTING_FIRST_HARD_FORK","AutomatedTesting and UserTesting first hard fork height."],["UNIT_DIFFICULTY","unit difficulty, equal to graph_weight(SECOND_POW_EDGE_BITS)"],["WEEK_HEIGHT","A week is 10_080 blocks"],["YEAR_HEIGHT","A year is 524_160 blocks"]],"fn":[["add_reward_foundation","Check if the current height is a foundation height, if it’s, the function returns the cumulative foundation reward value for one DAY_HEIGHT. Otherwise, the function returns 0."],["ar_count","Count, in units of 1/100 (a percent), the number of “secondary” (AR) blocks in the provided window of blocks."],["block_total_reward_at_height","Compute the total reward generated by each block in a given height."],["clamp","limit value to be within some factor from a goal"],["cumulative_reward_foundation","Sum all the foundation reward, to send one"],["damp","Move value linearly toward a goal"],["difficultyfix_height","Get the height where the difficulty patch will be added."],["first_fork_height","Get the height of the first epic hard fork"],["floonet_block_total_reward_at_height","Floonet: Compute the total reward generated by each block in a given height."],["foundation_height","Get the height where the foundation coinbase will be added to the block."],["foundation_index","Get the current position of the foundation coinbase in the file `foundation.json` based on the block’s height"],["graph_weight","Compute weight of a graph as number of siphash bits defining the graph Must be made dependent on height to phase out smaller size over the years This can wait until end of 2019 at latest"],["header_version","Compute possible block version at a given height"],["is_foundation_height","Check if the given height is a foundation height. A foundation height is a height where we add the foundation levy. To be a foundation height the height has to be multiple of the foundation height and we have to have a foundation levy (following the schedule) different from zero for that height."],["mainnet_block_total_reward_at_height","Mainnet: Compute the total reward generated by each block in a given height."],["next_difficulty","Computes the proof-of-work difficulty that the next block should comply with. Takes an iterator over past block headers information, from latest (highest height) to oldest (lowest height)."],["next_difficulty_era1","changes the header info with new difficulty era1 for the block to mine"],["next_hash_difficulty","calculates the next difficulty level for progpow and randomx"],["next_policy",""],["reward","Get the total mining reward (with fee) based on the height"],["reward_at_height","Get the mining reward at current height"],["reward_foundation","Get the current value of the mining reward + foundation levy for a given height"],["reward_foundation_at_height","Compute the foundation levy for each block."],["secondary_pow_ratio","Ratio the secondary proof of work should take over the primary, as a function of block height (time). Starts at 90% losing a percent approximately every week. Represented as an integer between 0 and 100."],["secondary_pow_scaling","Factor by which the secondary proof of work difficulty will be adjusted"],["timestamp_median","returns the median timestamp from last 6 mined blocks"],["total_overage_at_height","The total overage at a given height. Variable due to changing rewards TODOBG: Make this more efficient by hardcoding reward schedule times"],["valid_header_version","Check whether the block version is valid at a given height, implements 6 months interval scheduled hard forks for the first 2 years."]],"struct":[["HeaderInfo","Minimal header information required for the Difficulty calculation to take place"]]});