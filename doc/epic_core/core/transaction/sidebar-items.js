initSidebarItems({"enum":[["Error","Errors thrown by Transaction validation"],["KernelFeatures","Various tx kernel variants."],["OutputFeatures","Various flavors of tx kernel."],["Weighting","Enum of possible tx weight verification options -"]],"fn":[["aggregate","Aggregate a vec of txs into a multi-kernel tx with cut_through."],["cut_through","Matches any output with a potential spending input, eliminating them from the Vec. Provides a simple way to cut-through a block or aggregated transaction. The elimination is stable with respect to the order of inputs and outputs."],["deaggregate","Attempt to deaggregate a multi-kernel transaction based on multiple transactions"]],"struct":[["Input","A transaction input."],["Output","Output for a transaction, defining the new ownership of coins that are being transferred. The commitment is a blinded value for the output while the range proof guarantees the commitment includes a positive value without overflow and the ownership of the private key."],["OutputIdentifier","An output_identifier can be build from either an input or an output and contains everything we need to uniquely identify an output being spent. Needed because it is not sufficient to pass a commitment around."],["Transaction","A transaction"],["TransactionBody","TransactionBody is a common abstraction for transaction and block"],["TxKernel","A proof that a transaction sums to zero. Includes both the transactionâ€™s Pedersen commitment and the signature, that guarantees that the commitments amount to zero. The signature signs the fee and the lock_height, which are retained for signature validation."]]});